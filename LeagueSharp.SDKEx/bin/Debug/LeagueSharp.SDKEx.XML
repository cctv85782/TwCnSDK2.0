<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeagueSharp.SDKEx</name>
    </assembly>
    <members>
        <member name="T:LeagueSharp.SDK.Bootstrap">
            <summary>
                Bootstrap is an initialization pointer for the AppDomainManager to initialize the library correctly once loaded in
                game.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Bootstrap.initialized">
            <summary>
                Indicates whether the bootstrap has been initialized.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Bootstrap.Init(System.String[])">
            <summary>
                Initializes the whole SDK. It is safe to call in your code at any point.
            </summary>
            <param name="args">Not currently used or needed.</param>
            <returns>true if SDK is loaded, false if it is not</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Constants">
            <summary>
                Constant values of the LeagueSharp development kit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Constants.LeagueSharpAppData">
            <summary>
                LeagueSharp Application Data folder.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Constants.LogDirectory">
            <summary>
                LeagueSharp SDK Log directory.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Constants.LogFileName">
            <summary>
                LeagueSharp SDK Session Log file name.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Constants.leagueSharpFont">
            <summary>
                LeagueSharp SDK Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Constants.LeagueSharpFont">
            <summary>
                Gets the league sharp font.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.CastStates">
            <summary>
                Cast States
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.SuccessfullyCasted">
            <summary>
                Spell Successfully Casted
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.NotReady">
            <summary>
                Spell Not Ready
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.NotCasted">
            <summary>
                Spell Not Casted
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.OutOfRange">
            <summary>
                Spell Out of Range
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.Collision">
            <summary>
                Spell Collision
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.NotEnoughTargets">
            <summary>
                Spell Not Enough Targets
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.LowHitChance">
            <summary>
                Spell Low Hit Chance
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.InvalidTarget">
            <summary>
                Spell Invalid Target
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.LowMana">
            <summary>
                Spell Low Mana
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CastStates.FailedCondition">
            <summary>
                Failed Condition
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.CenteredFlags">
            <summary>
                CenteredText Drawing Flags
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.None">
            <summary>
                None Flag
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.HorizontalLeft">
            <summary>
                Center Horizontally Left.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.HorizontalCenter">
            <summary>
                Center Horizontally.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.HorizontalRight">
            <summary>
                Center Horizontally Right.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.VerticalUp">
            <summary>
                Center Vertically Up.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.VerticalCenter">
            <summary>
                Center Vertically.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.CenteredFlags.VerticalDown">
            <summary>
                Center Vertically Down.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.DrawType">
            <summary>
                The draw type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.DrawType.OnBeginScene">
            <summary>
                The OnBeginScene drawing type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.DrawType.OnDraw">
            <summary>
                The OnDraw drawing type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.DrawType.OnEndScene">
            <summary>
                The OnEndScene drawing type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.HealthPredictionType">
            <summary>
                Name enumerations of health prediction types
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HealthPredictionType.Default">
            <summary>
                Default Prediction
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HealthPredictionType.Simulated">
            <summary>
                Simulated Prediction
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.HitChance">
            <summary>
                <c>Skillshot</c> HitChance
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Immobile">
            <summary>
                Target is immobile, <c>skillshot</c> will hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Dashing">
            <summary>
                Target is dashing to a known location, <c>skillshot</c> will hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.VeryHigh">
            <summary>
                Very High Prediction output, <c>skillshot</c> will probably hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.High">
            <summary>
                High Prediction output, <c>skillshot</c> will probably hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Medium">
            <summary>
                Medium Prediction output, accuracy considered low.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Low">
            <summary>
                Low Prediction output, accuracy considered low.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Impossible">
            <summary>
                Impossible Hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.OutOfRange">
            <summary>
                <c>skillshot</c> is out of range.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.Collision">
            <summary>
                Collision before hit onto target.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.HitChance.None">
            <summary>
                No HitChance.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.JungleType">
            <summary>
                The jungle mob types.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.JungleType.Unknown">
            <summary>
                The unknown type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.JungleType.Small">
            <summary>
                The small type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.JungleType.Large">
            <summary>
                The large type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.JungleType.Legendary">
            <summary>
                The legendary type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.KeyBindType">
            <summary>
                Key Bind Type for Menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.KeyBindType.Toggle">
            <summary>
                Toggle Key Bind.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.KeyBindType.Press">
            <summary>
                Press Key Bind
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.LogLevel">
            <summary>
                The level of the information being logged
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Debug">
            <summary>
                Debug Information
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Error">
            <summary>
                An error occurred somewhere in the code (exception)
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Fatal">
            <summary>
                An error occurred and the program is unable to proceed
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Info">
            <summary>
                General information
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Trace">
            <summary>
                Current location of the program
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.LogLevel.Warn">
            <summary>
                Warning level
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.MinionTypes">
            <summary>
                Types of minions
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Unknown">
            <summary>
                The unknown type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Normal">
            <summary>
                The normal type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Ranged">
            <summary>
                The ranged type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Melee">
            <summary>
                The melee type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Siege">
            <summary>
                The siege type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Super">
            <summary>
                The super type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.MinionTypes.Ward">
            <summary>
                The ward type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.NotificationIconType">
            <summary>
                The notification icon type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.NotificationIconType.None">
            <summary>
                No Icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.NotificationIconType.Error">
            <summary>
                Error Icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.NotificationIconType.Warning">
            <summary>
                Warning Icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.NotificationIconType.Check">
            <summary>
                Check Icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.NotificationIconType.Select">
            <summary>
                Select Icon.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.OrbwalkingMode">
            <summary>
                <c>Orbwalker</c> Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingMode.None">
            <summary>
                None Mode
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingMode.Combo">
            <summary>
                Combo Mode
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingMode.Hybrid">
            <summary>
                Hybrid Mode
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingMode.LastHit">
            <summary>
                Last Hit Mode
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingMode.LaneClear">
            <summary>
                Lane Clear Mode
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.OrbwalkingType">
            <summary>
                <c>Orbwalker</c> Process Type
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.None">
            <summary>
                None Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.Movement">
            <summary>
                Movement Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.StopMovement">
            <summary>
                Stop Movement Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.BeforeAttack">
            <summary>
                BeforeAttack Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.AfterAttack">
            <summary>
                AfterAttack Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.OnAttack">
            <summary>
                OnAttack Type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.OrbwalkingType.NonKillableMinion">
            <summary>
                Non Kill-able Minion Type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.PerformanceType">
            <summary>
                Performance Type to log.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.PerformanceType.TickCount">
            <summary>
                Logs the Tick Count(CPU Ticks).
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.PerformanceType.Milliseconds">
            <summary>
                Logs the number of milliseconds.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.PerformanceType.TimeSpan">
            <summary>
                Logs the time spanned in TimeSpam format.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.SkillshotType">
            <summary>
                <c>Skillshot</c> Type Enumeration
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.SkillshotType.SkillshotLine">
            <summary>
                Determines that the <c>skillshot</c> is a linear <c>skillshot</c>.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.SkillshotType.SkillshotCircle">
            <summary>
                Determines that the <c>skillshot</c> is a circle <c>skillshot</c>.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.SkillshotType.SkillshotCone">
            <summary>
                Determines that the <c>skillshot</c> is a cone <c>skillshot</c>.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.TeleportStatus">
            <summary>
                The teleport status.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportStatus.Start">
            <summary>
                The start status.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportStatus.Abort">
            <summary>
                The abort status.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportStatus.Finish">
            <summary>
                The finish status.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportStatus.Unknown">
            <summary>
                The unknown status.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.TeleportType">
            <summary>
                The teleport type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportType.Recall">
            <summary>
                The recall type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportType.Teleport">
            <summary>
                The teleport type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportType.TwistedFate">
            <summary>
                The twisted fate type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportType.Shen">
            <summary>
                The <c>shen</c> type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TeleportType.Unknown">
            <summary>
                The unknown type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.TurretType">
            <summary>
                The turret type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TurretType.Unknown">
            <summary>
                The unknown tier.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TurretType.TierOne">
            <summary>
                The tier one.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TurretType.TierTwo">
            <summary>
                The tier two.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TurretType.TierThree">
            <summary>
                The tier three.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.TurretType.TierFour">
            <summary>
                The tier four.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Enumerations.WindowsMessages">
            <summary>
                Windows Messages
                Defined in <![CDATA[winuser.h]]> from Windows SDK v6.1
                Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NULL">
            <summary>
                The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message
                that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CREATE">
            <summary>
                The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx
                or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window
                receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DESTROY">
            <summary>
                The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window
                being destroyed after the window is removed from the screen.
                This message is sent first to the window being destroyed and then to the child windows (if any) as they are
                destroyed. During the processing of the message, it can be assumed that all child windows still exist.
                ///
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOVE">
            <summary>
                The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SIZE">
            <summary>
                The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ACTIVATE">
            <summary>
                The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows
                use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window
                being deactivated, then to the window procedure of the top-level window being activated. If the windows use
                different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETFOCUS">
            <summary>
                The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.KILLFOCUS">
            <summary>
                The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ENABLE">
            <summary>
                The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window
                whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the
                enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETREDRAW">
            <summary>
                An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to
                prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETTEXT">
            <summary>
                An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETTEXT">
            <summary>
                An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by
                the caller.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETTEXTLENGTH">
            <summary>
                An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with
                a window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PAINT">
            <summary>
                The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an
                application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the
                DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage
                function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CLOSE">
            <summary>
                The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUERYENDSESSION">
            <summary>
                The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of
                the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending
                WM_QUERYENDSESSION messages as soon as one application returns zero.
                After processing this message, the system sends the WM_ENDSESSION message with the <c>wParam</c> parameter set to
                the
                results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUERYOPEN">
            <summary>
                The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size
                and position.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ENDSESSION">
            <summary>
                The WM_ENDSESSION message is sent to an application after the system processes the results of the
                WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUIT">
            <summary>
                The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the
                PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ERASEBKGND">
            <summary>
                The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is
                resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSCOLORCHANGE">
            <summary>
                This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SHOWWINDOW">
            <summary>
                The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.WININICHANGE">
            <summary>
                An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI
                file. The SystemParametersInfo function sends this message after an application uses the function to change a
                setting in WIN.INI.
                Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system.
                Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETTINGCHANGE">
            <summary>
                An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI
                file. The SystemParametersInfo function sends this message after an application uses the function to change a
                setting in WIN.INI.
                Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system.
                Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DEVMODECHANGE">
            <summary>
                The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ACTIVATEAPP">
            <summary>
                The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is
                about to be activated. The message is sent to the application whose window is being activated and to the
                application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.FONTCHANGE">
            <summary>
                An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of
                font resources.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.TIMECHANGE">
            <summary>
                A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CANCELMODE">
            <summary>
                The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends
                this message to the active window when a dialog box or message box is displayed. Certain functions also send this
                message explicitly to the specified window regardless of whether it is the active window. For example, the
                EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETCURSOR">
            <summary>
                The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input
                is not captured.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEACTIVATE">
            <summary>
                The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button.
                The parent window receives this message only if the child window passes it to the <c>DefWindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CHILDACTIVATE">
            <summary>
                The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the
                window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUEUESYNC">
            <summary>
                The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages
                from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETMINMAXINFO">
            <summary>
                The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An
                application can use this message to override the window's default maximized size and position, or its default
                minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PAINTICON">
            <summary>
                Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted.
                This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the
                Remarks.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ICONERASEBKGND">
            <summary>
                Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the
                icon must be filled before painting the icon. A window receives this message only if a class icon is defined for
                the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NEXTDLGCTL">
            <summary>
                The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the
                dialog box.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SPOOLERSTATUS">
            <summary>
                The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print
                Manager queue.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DRAWITEM">
            <summary>
                The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a
                visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MEASUREITEM">
            <summary>
                The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item
                when the control or menu is created.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DELETEITEM">
            <summary>
                Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed
                by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a
                WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or
                combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.VKEYTOITEM">
            <summary>
                Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CHARTOITEM">
            <summary>
                Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETFONT">
            <summary>
                An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETFONT">
            <summary>
                An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently
                drawing its text.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETHOTKEY">
            <summary>
                An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user
                presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETHOTKEY">
            <summary>
                An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUERYDRAGICON">
            <summary>
                The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user
                but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The
                system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COMPAREITEM">
            <summary>
                The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of
                an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to
                the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETOBJECT">
            <summary>
                Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a
                server application.
                Applications never send this message directly. It is sent only by Active Accessibility in response to calls to
                AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications
                handle this message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COMPACTING">
            <summary>
                The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system
                time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COMMNOTIFY">
            <summary>
                WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.WINDOWPOSCHANGING">
            <summary>
                The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to
                change as a result of a call to the <c>SetWindowPos</c> function or another window-management function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.WINDOWPOSCHANGED">
            <summary>
                The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a
                result of a call to the <c>SetWindowPos</c> function or another window-management function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.POWER">
            <summary>
                Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended
                mode.
                Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COPYDATA">
            <summary>
                An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CANCELJOURNAL">
            <summary>
                The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling
                activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NOTIFY">
            <summary>
                Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INPUTLANGCHANGEREQUEST">
            <summary>
                The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input
                language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the
                system taskbar. An application can accept the change by passing the message to the <c>DefWindowProc</c> function or
                reject
                the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INPUTLANGCHANGE">
            <summary>
                The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has
                been changed. You should make any application-specific settings and pass the message to the <c>DefWindowProc</c>
                function,
                which passes the message to all first-level child windows. These child windows can pass the message to
                <c>DefWindowProc</c> to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.TCARD">
            <summary>
                Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the
                application when the user clicks an author-able button. An application initiates a training card by specifying the
                HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HELP">
            <summary>
                Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window
                associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has
                the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.USERCHANGED">
            <summary>
                The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or
                off, the system updates the user-specific settings. The system sends this message immediately after updating the
                settings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NOTIFYFORMAT">
            <summary>
                Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT
                messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CONTEXTMENU">
            <summary>
                The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the
                window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.STYLECHANGING">
            <summary>
                The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of
                the window's styles.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.STYLECHANGED">
            <summary>
                The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the
                window's styles
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DISPLAYCHANGE">
            <summary>
                The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETICON">
            <summary>
                The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a
                window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SETICON">
            <summary>
                An application sends the WM_SETICON message to associate a new large or small icon with a window. The system
                displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCCREATE">
            <summary>
                The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCDESTROY">
            <summary>
                The WM_NCDESTROY message informs a window that its non-client area is being destroyed. The DestroyWindow function
                sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the
                allocated memory object associated with the window.
                The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent
                before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCCALCSIZE">
            <summary>
                The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By
                processing this message, an application can control the content of the window's client area when the size or
                position of the window changes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCHITTEST">
            <summary>
                The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released.
                If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent
                to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCPAINT">
            <summary>
                The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCACTIVATE">
            <summary>
                The WM_NCACTIVATE message is sent to a window when its non-client area needs to be changed to indicate an active or
                inactive state.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETDLGCODE">
            <summary>
                The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles
                all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation
                keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types
                of input it wants to process itself.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYNCPAINT">
            <summary>
                The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMOUSEMOVE">
            <summary>
                The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the non-client area of the window.
                This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is
                not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCLBUTTONDOWN">
            <summary>
                The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCLBUTTONUP">
            <summary>
                The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCLBUTTONDBLCLK">
            <summary>
                The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is
                within the non-client area of a window. This message is posted to the window that contains the cursor. If a window
                has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCRBUTTONDOWN">
            <summary>
                The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCRBUTTONUP">
            <summary>
                The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCRBUTTONDBLCLK">
            <summary>
                The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is
                within the non-client area of a window. This message is posted to the window that contains the cursor. If a window
                has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMBUTTONDOWN">
            <summary>
                The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMBUTTONUP">
            <summary>
                The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMBUTTONDBLCLK">
            <summary>
                The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is
                within the non-client area of a window. This message is posted to the window that contains the cursor. If a window
                has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCXBUTTONDOWN">
            <summary>
                The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in
                the non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCXBUTTONUP">
            <summary>
                The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the
                non-client area of a window. This message is posted to the window that contains the cursor. If a window has
                captured
                the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCXBUTTONDBLCLK">
            <summary>
                The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor
                is in the non-client area of a window. This message is posted to the window that contains the cursor. If a window
                has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INPUT_DEVICE_CHANGE">
            <summary>
                The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives
                this message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INPUT">
            <summary>
                The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.KEYFIRST">
            <summary>
                This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.KEYDOWN">
            <summary>
                The WM_KEYDOWN message is posted to the window with the keyboard focus when a non-system key is pressed. A
                non-system
                key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.KEYUP">
            <summary>
                The WM_KEYUP message is posted to the window with the keyboard focus when a non-system key is released. A
                non-system
                key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has
                the keyboard focus.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CHAR">
            <summary>
                The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the
                TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DEADCHAR">
            <summary>
                The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by
                the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key
                that generates a character, such as the umlaut (double-dot), that is combined with another character to form a
                composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut
                character, and then typing the O key.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSKEYDOWN">
            <summary>
                The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which
                activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window
                currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window
                that receives the message can distinguish between these two contexts by checking the context code in the
                <c>lParam</c> parameter.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSKEYUP">
            <summary>
                The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was
                pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this
                case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish
                between these two contexts by checking the context code in the <c>lParam</c> parameter.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSCHAR">
            <summary>
                The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated
                by the TranslateMessage function. It specifies the character code of a system character key — that is, a character
                key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSDEADCHAR">
            <summary>
                The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated
                by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a
                dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.UNICHAR">
            <summary>
                The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by
                the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
                The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas
                WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle
                Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.KEYLAST">
            <summary>
                This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_STARTCOMPOSITION">
            <summary>
                Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this
                message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_ENDCOMPOSITION">
            <summary>
                Sent to an application when the IME ends composition. A window receives this message through its <c>WindowProc</c>
                function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_COMPOSITION">
            <summary>
                Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this
                message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_KEYLAST">
            <summary>
                Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this
                message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INITDIALOG">
            <summary>
                The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog
                box procedures typically use this message to initialize controls and carry out any other initialization tasks that
                affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COMMAND">
            <summary>
                The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a
                notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSCOMMAND">
            <summary>
                A window receives this message when the user chooses a command from the Window menu, clicks the maximize button,
                minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering
                this out.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.TIMER">
            <summary>
                The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted
                by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSCROLL">
            <summary>
                The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll
                bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the
                control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.VSCROLL">
            <summary>
                The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar.
                This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INITMENU">
            <summary>
                The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on
                the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.INITMENUPOPUP">
            <summary>
                The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an
                application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENUSELECT">
            <summary>
                The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENUCHAR">
            <summary>
                The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any
                mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ENTERIDLE">
            <summary>
                The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state.
                A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed
                one or more previous messages.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENURBUTTONUP">
            <summary>
                The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu
                item.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENUDRAG">
            <summary>
                The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENUGETOBJECT">
            <summary>
                The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item
                or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.UNINITMENUPOPUP">
            <summary>
                The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MENUCOMMAND">
            <summary>
                The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CHANGEUISTATE">
            <summary>
                An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.UPDATEUISTATE">
            <summary>
                An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window
                and all its child windows.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUERYUISTATE">
            <summary>
                An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORMSGBOX">
            <summary>
                The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By
                responding to this message, the owner window can set the text and background colors of the message box by using the
                given display device context handle.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLOREDIT">
            <summary>
                An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the
                control is about to be drawn. By responding to this message, the parent window can use the specified device context
                handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORLISTBOX">
            <summary>
                Sent to the parent window of a list box before the system draws the list box. By responding to this message, the
                parent window can set the text and background colors of the list box by using the specified display device context
                handle.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORBTN">
            <summary>
                The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window
                can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window
                processing this message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORDLG">
            <summary>
                The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this
                message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORSCROLLBAR">
            <summary>
                The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to
                be drawn. By responding to this message, the parent window can use the display context handle to set the background
                color of the scroll bar control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CTLCOLORSTATIC">
            <summary>
                A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its
                parent window when the control is about to be drawn. By responding to this message, the parent window can use the
                specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEFIRST">
            <summary>
                Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEMOVE">
            <summary>
                The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is
                posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the
                mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.LBUTTONDOWN">
            <summary>
                The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client
                area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise,
                the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.LBUTTONUP">
            <summary>
                The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client
                area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise,
                the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.LBUTTONDBLCLK">
            <summary>
                The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the
                client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.RBUTTONDOWN">
            <summary>
                The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client
                area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise,
                the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.RBUTTONUP">
            <summary>
                The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client
                area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise,
                the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.RBUTTONDBLCLK">
            <summary>
                The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in
                the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MBUTTONDOWN">
            <summary>
                The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the
                client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MBUTTONUP">
            <summary>
                The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client
                area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise,
                the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MBUTTONDBLCLK">
            <summary>
                The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in
                the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEWHEEL">
            <summary>
                The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The <c>DefWindowProc</c>
                function
                propagates the message to the window's parent. There should be no internal forwarding of the message, since
                <c>DefWindowProc</c> propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.XBUTTONDOWN">
            <summary>
                The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the
                client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.XBUTTONUP">
            <summary>
                The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the
                client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor.
                Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.XBUTTONDBLCLK">
            <summary>
                The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is
                in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the
                cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEHWHEEL">
            <summary>
                The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or
                rotated. The <c>DefWindowProc</c> function propagates the message to the window's parent. There should be no
                internal
                forwarding of the message, since <c>DefWindowProc</c> propagates it up the parent chain until it finds a window
                that
                processes it.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSELAST">
            <summary>
                Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PARENTNOTIFY">
            <summary>
                The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed,
                or when the user clicks a mouse button while the cursor is over the child window. When the child window is being
                created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the
                window returns. When the child window is being destroyed, the system sends the message before any processing to
                destroy the window takes place.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ENTERMENULOOP">
            <summary>
                The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been
                entered.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.EXITMENULOOP">
            <summary>
                The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NEXTMENU">
            <summary>
                The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the
                menu bar and the system menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SIZING">
            <summary>
                The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can
                monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CAPTURECHANGED">
            <summary>
                The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOVING">
            <summary>
                The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can
                monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.POWERBROADCAST">
            <summary>
                Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DEVICECHANGE">
            <summary>
                Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDICREATE">
            <summary>
                An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI
                child window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIDESTROY">
            <summary>
                An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI
                child window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIACTIVATE">
            <summary>
                An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct
                the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIRESTORE">
            <summary>
                An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an
                MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDINEXT">
            <summary>
                An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the
                next or previous child window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIMAXIMIZE">
            <summary>
                An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an
                MDI child window. The system resizes the child window to make its client area fill the client window. The system
                places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the
                child window's restore icon in the leftmost position. The system also appends the title bar text of the child
                window to that of the frame window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDITILE">
            <summary>
                An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of
                its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDICASCADE">
            <summary>
                An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all
                its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIICONARRANGE">
            <summary>
                An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange
                all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIGETACTIVE">
            <summary>
                An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve
                the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDISETMENU">
            <summary>
                An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the
                entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ENTERSIZEMOVE">
            <summary>
                The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The
                window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when
                the window passes the WM_SYSCOMMAND message to the <c>DefWindowProc</c> function and the <c>wParam</c> parameter of
                the message
                specifies the SC_MOVE or SC_SIZE value. The operation is complete when <c>DefWindowProc</c> returns.
                The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.EXITSIZEMOVE">
            <summary>
                The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The
                window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when
                the window passes the WM_SYSCOMMAND message to the <c>DefWindowProc</c> function and the <c>wParam</c> parameter of
                the message
                specifies the SC_MOVE or SC_SIZE value. The operation is complete when <c>DefWindowProc</c> returns.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DROPFILES">
            <summary>
                Sent when the user drops a file on the window of an application that has registered itself as a recipient of
                dropped files.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MDIREFRESHMENU">
            <summary>
                An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh
                the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_SETCONTEXT">
            <summary>
                Sent to an application when a window is activated. A window receives this message through its <c>WindowProc</c>
                function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_NOTIFY">
            <summary>
                Sent to an application to notify it of changes to the IME window. A window receives this message through its
                <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_CONTROL">
            <summary>
                Sent by an application to direct the IME window to carry out the requested command. The application uses this
                message to control the IME window that it has created. To send this message, the application calls the SendMessage
                function with the following parameters.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_COMPOSITIONFULL">
            <summary>
                Sent to an application when the IME window finds no space to extend the area for the composition window. A window
                receives this message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_SELECT">
            <summary>
                Sent to an application when the operating system is about to change the current IME. A window receives this message
                through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_CHAR">
            <summary>
                Sent to an application when the IME gets a character of the conversion result. A window receives this message
                through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_REQUEST">
            <summary>
                Sent to an application to provide commands and request information. A window receives this message through its
                <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_KEYDOWN">
            <summary>
                Sent to an application by the IME to notify the application of a key press and to keep message order. A window
                receives this message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.IME_KEYUP">
            <summary>
                Sent to an application by the IME to notify the application of a key release and to keep message order. A window
                receives this message through its <c>WindowProc</c> function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSEHOVER">
            <summary>
                The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the
                period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.MOUSELEAVE">
            <summary>
                The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a
                prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMOUSEHOVER">
            <summary>
                The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the non-client area of the window for
                the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.NCMOUSELEAVE">
            <summary>
                The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the non-client area of the window
                specified
                in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.WTSSESSION_CHANGE">
            <summary>
                The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.TABLET_FIRST">
            <summary>
                The WM_TABLET_FIRST messages notifies applications of change in session state of a tablet.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.TABLET_LAST">
            <summary>
                The WM_TABLET_FIRST messages notifies applications of change in session state of a tablet.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CUT">
            <summary>
                An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if
                any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.COPY">
            <summary>
                An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the
                clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PASTE">
            <summary>
                An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the
                clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data
                in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CLEAR">
            <summary>
                An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if
                any, from the edit control.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.UNDO">
            <summary>
                An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to
                an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.RENDERFORMAT">
            <summary>
                The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format
                and if an application has requested data in that format. The clipboard owner must render data in the specified
                format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.RENDERALLFORMATS">
            <summary>
                The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has
                delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other
                applications, the clipboard owner must render data in all the formats it is capable of generating, and place the
                data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DESTROYCLIPBOARD">
            <summary>
                The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties
                the clipboard.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DRAWCLIPBOARD">
            <summary>
                The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the
                clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PAINTCLIPBOARD">
            <summary>
                The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard
                contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.VSCROLLCLIPBOARD">
            <summary>
                The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard
                contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The
                owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SIZECLIPBOARD">
            <summary>
                The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard
                contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.ASKCBFORMATNAME">
            <summary>
                The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a
                CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CHANGECBCHAIN">
            <summary>
                The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being
                removed from the chain.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSCROLLCLIPBOARD">
            <summary>
                The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the
                clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal
                scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.QUERYNEWPALETTE">
            <summary>
                This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to
                realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PALETTEISCHANGING">
            <summary>
                The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PALETTECHANGED">
            <summary>
                This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus
                realizes its logical palette.
                This message enables windows that do not have the keyboard focus to realize their logical palettes and update their
                client areas.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HOTKEY">
            <summary>
                The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The
                message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PRINT">
            <summary>
                The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most
                commonly in a printer device context.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PRINTCLIENT">
            <summary>
                The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device
                context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.APPCOMMAND">
            <summary>
                The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by
                clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.THEMECHANGED">
            <summary>
                The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change
                events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CLIPBOARDUPDATE">
            <summary>
                Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DWMCOMPOSITIONCHANGED">
            <summary>
                The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop
                composition has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DWMNCRENDERINGCHANGED">
            <summary>
                WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows
                that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
                Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
                WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register
                for this message as well. You'd have other window go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.GETTITLEBARINFOEX">
            <summary>
                Sent to request extended title bar information. A window receives this message through its <c>WindowProc</c>
                function.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HANDHELDFIRST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HANDHELDLAST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.AFXFIRST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.AFXLAST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PENWINFIRST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.PENWINLAST">
            <summary>
                Functions use this constant for filtering purposes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.APP">
            <summary>
                The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X
                is an integer value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.USER">
            <summary>
                The WM_USER constant is used by applications to help define private messages for use by private window classes,
                usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CPL_LAUNCH">
            <summary>
                An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application
                be started.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.CPL_LAUNCHED">
            <summary>
                The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has
                closed. The WM_CPL_LAUNCHED message is sent to the window identified by the <c>wParam</c> parameter of the
                WM_CPL_LAUNCH
                message that started the application.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.SYSTIMER">
            <summary>
                WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like
                scrolling.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_ACCESSIBILITYSTATE">
            <summary>
                The accessibility state has changed.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
                The shell should activate its main window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_APPCOMMAND">
            <summary>
                The user completed an input event (for example, pressed an application command button on the mouse or an
                application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by
                that input.
                If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value
                section for more information.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_GETMINRECT">
            <summary>
                A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the
                window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_LANGUAGE">
            <summary>
                Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_REDRAW">
            <summary>
                The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_TASKMAN">
            <summary>
                The user has selected the task list. A shell application that provides a task list should return TRUE to prevent
                Windows from starting its task list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_WINDOWCREATED">
            <summary>
                A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_WINDOWDESTROYED">
            <summary>
                A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_WINDOWACTIVATED">
            <summary>
                The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Enumerations.WindowsMessages.HSHELL_WINDOWREPLACED">
            <summary>
                A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Events">
            <summary>
                Dash class, contains the OnDash event for tracking for Dash events of a champion.
            </summary>
            <summary>
                The provided events by the kit.
            </summary>
            <summary>
                Provides an event for when the game starts.
            </summary>
            <summary>
                Detection of Gap-closers and fires the OnGapCloser event.
            </summary>
            <summary>
                Provides events for interrupting spells.
            </summary>
            <summary>
                Provides events for OnStealth
            </summary>
            <summary>
                Teleport class, contains Teleport even which is triggered on recalls, teleports and shen or twisted fate
                ultimates.
            </summary>
            <summary>
                Turret tracker and event handler.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.DetectedDashes">
            <summary>
                DetectedDashes list.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnDash">
            <summary>
                OnDash Event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.GetDashInfo(LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the speed of the dashing unit if it is dashing.
            </summary>
            <param name="unit">
                The unit.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Events.DashArgs" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Events.IsDashing(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns true if the unit is dashing.
            </summary>
            <param name="unit">
                The unit.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventDash(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectNewPathEventArgs)">
            <summary>
                New Path subscribed event function.
            </summary>
            <param name="sender"><see cref="T:LeagueSharp.Obj_AI_Base" /> sender</param>
            <param name="args">New Path event data</param>
        </member>
        <member name="T:LeagueSharp.SDK.Events.DashArgs">
            <summary>
                Dash event data.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.Duration">
            <summary>
                Gets or sets the dash duration.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.EndPos">
            <summary>
                Gets or sets the end position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.EndTick">
            <summary>
                Gets or sets the end tick.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.IsBlink">
            <summary>
                Gets or sets a value indicating whether is blink.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.Path">
            <summary>
                Gets or sets the path.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.Speed">
            <summary>
                Gets or sets the speed.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.StartPos">
            <summary>
                Gets or sets the start position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.StartTick">
            <summary>
                Gets or sets the start tick.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.DashArgs.Unit">
            <summary>
                Gets or sets the unit.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Events" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnCreate(LeagueSharp.GameObject,System.EventArgs)">
            <summary>
                On create event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnIntegerPropertyChange(LeagueSharp.GameObject,LeagueSharp.GameObjectIntegerPropertyChangeEventArgs)">
            <summary>
                On integer property change event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnNewPath(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectNewPathEventArgs)">
            <summary>
                On new path event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnProcessSpellCast(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                On process spell cast event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnStopCast(LeagueSharp.Spellbook,LeagueSharp.SpellbookStopCastEventArgs)">
            <summary>
                On stop cast event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnTeleportEvent(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                On teleport event.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The args.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.OnUpdate(System.EventArgs)">
            <summary>
                OnUpdate event.
            </summary>
            <param name="args">
                The event args.
            </param>
        </member>
        <member name="F:LeagueSharp.SDK.Events.LoadInvocationList">
            <summary>
                The invocation list.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnLoad">
            <summary>
                The load event, invoked when the system detects that the game has been fully loaded.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.ActiveSpellsList">
            <summary>
                Gets or sets the active spells.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.SpellsList">
            <summary>
                Gets the spells.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnGapCloser">
            <summary>
                OnGapCloser Event.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.ActiveSpells">
            <summary>
                Gets the active spells.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserSpells">
            <summary>
                Gets the spells.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventGapcloser(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                On Process Spell Cast subscribed event function
            </summary>
            <param name="sender"><see cref="T:LeagueSharp.Obj_AI_Base" /> sender</param>
            <param name="args">Process Spell Cast Data</param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventGapcloser">
            <summary>
                On game tick update subscribed event function.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Events.GapCloserEventArgs">
            <summary>
                GapCloser Data Container
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.End">
            <summary>
                Gets or sets the position at which the enemy will be upon spell completion.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.IsDirectedToPlayer">
            <summary>
                Gets or sets a value indicating whether is directed to player.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.Sender">
            <summary>
                Gets or sets the sender.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.SkillType">
            <summary>
                Gets or sets the skill type.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.Slot">
            <summary>
                Gets or sets the slot.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.SpellName">
            <summary>
                Gets or sets the spell name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.Start">
            <summary>
                Gets or sets the start.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:LeagueSharp.SDK.Events.GapCloserEventArgs.Target" -->
        <member name="P:LeagueSharp.SDK.Events.GapCloserEventArgs.TickCount">
            <summary>
                Gets or sets the tick count.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.GlobalInterruptableSpells">
            <summary>
                Gets the global interruptable spells.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.InterruptableSpells">
            <summary>
                Gets the interruptable spells.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.CastingInterruptableSpellDictionary">
            <summary>
                Gets the casting interruptable spells.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnInterruptableTarget">
            <summary>
                Gets fired when an enemy is casting a spellData that should be interrupted.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.CastingInterruptableSpell">
            <summary>
                Gets the casting interruptible spell dictionary.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.GetInterruptableTargetData(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the <see cref="T:LeagueSharp.SDK.Events.InterruptableTargetEventArgs" /> for the unit.
            </summary>
            <param name="target">
                The unit
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.Events.InterruptableTargetEventArgs" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Events.IsCastingInterruptableSpell(LeagueSharp.Obj_AI_Hero,System.Boolean)">
            <summary>
                Checks if the unit is casting a spell that can be interrupted.
            </summary>
            <param name="target">
                The unit
            </param>
            <param name="checkMovementInterruption">
                Checks if moving cancels the spellData.
            </param>
            <returns>
                If the unit is casting an interrupt-able spellData.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventInterruptableSpell">
            <summary>
                Function called by update tick event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventInterruptableSpell(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                Function called by OnProcessSpellCast event
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                Processed Spell Cast Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventInterruptableSpell(LeagueSharp.Spellbook)">
            <summary>
                Function called by the stop cast event.
            </summary>
            <param name="sender">
                Sender Spell-book
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Events.InterruptableTargetEventArgs">
            <summary>
                Class that represents the event arguments for <see cref="E:LeagueSharp.SDK.Events.OnInterruptableTarget" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.#ctor(LeagueSharp.Obj_AI_Hero,LeagueSharp.Data.Enumerations.DangerLevel,System.Single,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Events.InterruptableTargetEventArgs" /> class.
            </summary>
            <param name="sender">
                Sender or classified Target
            </param>
            <param name="dangerLevel">
                Danger Level
            </param>
            <param name="endTime">
                Ending time of the spell
            </param>
            <param name="movementInterrupts">
                Does Movement Interrupts the spell
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.DangerLevel">
            <summary>
                Gets the <see cref="P:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.DangerLevel" /> of the spellData.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.EndTime">
            <summary>
                Gets the time the spellData ends.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.MovementInterrupts">
            <summary>
                Gets a value indicating whether movement interrupts.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.InterruptableTargetEventArgs.Sender">
            <summary>
                Gets the sender.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnStealth">
            <summary>
                Gets fired when any hero is invisible.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventStealth(LeagueSharp.GameObject,LeagueSharp.GameObjectIntegerPropertyChangeEventArgs)">
            <summary>
                Function is called when a <see cref="T:LeagueSharp.GameObject" /> gets an integer property change and is called by an event.
            </summary>
            <param name="sender">
                GameObject sender
            </param>
            <param name="args">
                Integer Property Change Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.FireOnStealth(LeagueSharp.SDK.Events.OnStealthEventArgs)">
            <summary>
                Attempts to fire the <see cref="E:LeagueSharp.SDK.Events.OnStealth" /> event.
            </summary>
            <param name="args">
                OnStealthEventArgs <see cref="T:LeagueSharp.SDK.Events.OnStealthEventArgs" />
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Events.OnStealthEventArgs">
            <summary>
                On Stealth Event Data, contains useful information that is passed with OnStealth
                <seealso cref="E:LeagueSharp.SDK.Events.OnStealth" />
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.OnStealthEventArgs.IsStealthed">
            <summary>
                Gets or sets a value indicating whether is in stealth.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.OnStealthEventArgs.Sender">
            <summary>
                Gets or sets the sender.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Events.OnStealthEventArgs.Time">
            <summary>
                Gets or sets the time.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.ErrorBuffer">
            <summary>
                The error buffer.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.TeleportDataByNetworkId">
            <summary>
                The teleport data by network id dictionary.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Events.TypeByString">
            <summary>
                The type by string dictionary.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnTeleport">
            <summary>
                This event is triggered on recalls, teleports and <c>shen</c> or twisted fate <c>ultimates</c>.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventTeleport(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                OnTeleport event.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.FireEvent(LeagueSharp.SDK.TeleportEventArgs)">
            <summary>
                Fires the event.
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="F:LeagueSharp.SDK.Events.Turrets">
            <summary>
                The Turrets list.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Events.OnTurretAttack">
            <summary>
                On turret attack event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventTurret(LeagueSharp.GameObject)">
            <summary>
                On Create event.
            </summary>
            <param name="sender">
                The sender
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Events.EventTurret(LeagueSharp.Obj_AI_Base)">
            <summary>
                On process spell cast event.
            </summary>
            <param name="sender">
                The sender
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.GameObjectNotifier`1">
            <summary>
                Raises events when a type of <see cref="T:LeagueSharp.GameObject" /> is created.
                <example>
                    <code>
            GameObjectNotifier&lt;Obj_AI_Minion&gt;.OnCreate += (sender, minion) => Game.PrintChat(minion.Name); 
            </code>
                </example>
            </summary>
            <typeparam name="T">The type of <see cref="T:LeagueSharp.GameObject" /></typeparam>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjectNotifier`1.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.GameObjectNotifier`1" /> class.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.GameObjectNotifier`1.OnCreate">
            <summary>
                Occurs when a <see cref="T:LeagueSharp.GameObject" /> of the type <typeparamref name="T" /> is created.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.GameObjectNotifier`1.OnDelete">
            <summary>
                Occurs when a <see cref="T:LeagueSharp.GameObject" /> of the type <typeparamref name="T" /> is deleted.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.TeleportEventArgs">
            <summary>
                Contains data about a teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.Duration">
            <summary>
                Gets the duration of the teleport
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.IsTarget">
            <summary>
                Gets a value indicating whether the object/sender is the target of a teleport: <c>eg</c>. turret is target of the
                <c>summoner</c> Teleport, or <see cref="T:LeagueSharp.Obj_AI_Hero" /> is target of a <c>shen</c> ultimate.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.Object">
            <summary>
                Gets the <see cref="T:LeagueSharp.Obj_AI_Hero" /> who is teleporting or is the target of a teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.Start">
            <summary>
                Gets the start time of the teleport
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.Status">
            <summary>
                Gets the status of the teleport
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportEventArgs.Type">
            <summary>
                Gets the type of teleport
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.ITeleport">
            <summary>
                The Teleport interface.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ITeleport.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ITeleport.GetDuration(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Get duration
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                Duration of the teleport.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ITeleport.IsTarget(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Is Target
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                returns where the teleport is target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.RecallTeleport">
            <summary>
                The recall teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.RecallTeleport.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.RecallTeleport.GetDuration(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Get duration
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                Duration of the teleport.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.RecallTeleport.IsTarget(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Is Target
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                returns where the teleport is target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TeleportTeleport">
            <summary>
                The teleport teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TeleportTeleport.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TeleportTeleport.GetDuration(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Get duration
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                Duration of the teleport.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TeleportTeleport.IsTarget(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Is Target
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                returns where the teleport is target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TwistedFateTeleport">
            <summary>
                The twisted fate teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TwistedFateTeleport.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TwistedFateTeleport.GetDuration(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Get duration
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                Duration of the teleport.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TwistedFateTeleport.IsTarget(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Is Target
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                returns where the teleport is target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.ShenTeleport">
            <summary>
                The <c>shen</c> teleport.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ShenTeleport.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ShenTeleport.GetDuration(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Get duration
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                Duration of the teleport.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ShenTeleport.IsTarget(LeagueSharp.GameObjectTeleportEventArgs)">
            <summary>
                Is Target
            </summary>
            <param name="args">
                The event data
            </param>
            <returns>
                returns where the teleport is target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TurretArgs">
            <summary>
                Turret event data which are passed with <see cref="E:LeagueSharp.SDK.Events.OnTurretAttack" />
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.AttackDelay">
            <summary>
                Gets or sets the attack delay.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.AttackEnd">
            <summary>
                Gets or sets the attack end.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.AttackStart">
            <summary>
                Gets or sets the attack start.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.IsWindingUp">
            <summary>
                Gets a value indicating whether the turret is winding up.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.Target">
            <summary>
                Gets the target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.Turret">
            <summary>
                Gets or sets the turret.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TurretArgs.TurretBoltObject">
            <summary>
                Gets or sets the turret bolt object.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Extensions">
            <summary>
                Enumerable Extensions.
            </summary>
            <summary>
                The generic SharpDX extensions.
            </summary>
            <summary>
                SharpDX/Vector2 Extensions.
            </summary>
            <summary>
                SharpDX/Vector3 Extensions
            </summary>
            <summary>
                Provides helpful extensions to Units.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ClearFlags``1(``0,``0)">
            <summary>
                Clears all given flags from a specific struct source.
            </summary>
            <typeparam name="T">
                Flag with Attributes type.
            </typeparam>
            <param name="value">
                The enumeration
            </param>
            <param name="flags">
                Flags to be cleared
            </param>
            <returns>
                Enumeration with Flag Attributes (struct)
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Combines flags from an enumerable list to a new given struct source.
            </summary>
            <typeparam name="T">Flag with Attributes type.</typeparam>
            <param name="flags">The flags</param>
            <returns>Enumeration with Flag Attributes (struct)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Finds match in a container of values.
            </summary>
            <typeparam name="TSource">
                Given source
            </typeparam>
            <param name="source">
                List of all the values
            </param>
            <param name="match">
                Method that determines whether the specified object meets the criteria
            </param>
            <returns>
                Matches based on the predicate
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Does an action over a list of types.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="list">List of values</param>
            <param name="action">Function to call foreach value</param>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetCombinations(System.Collections.Generic.IReadOnlyCollection{SharpDX.Vector2})">
            <summary>
                Returns all the subgroup combinations that can be made from a group
            </summary>
            <param name="allValues">List of <see cref="T:SharpDX.Vector2" /></param>
            <returns>Double list of vectors.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetFlagDescription``1(``0)">
            <summary>
                Gets a flag attribute description.
            </summary>
            <typeparam name="T">Flag with Attributes type.</typeparam>
            <param name="value">The enumeration</param>
            <returns>Enumeration with Flag Attributes (struct)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetFlags``1(``0)">
            <summary>
                Retrieves all of the flags from a specific struct source.
            </summary>
            <typeparam name="T">Flag with Attributes type.</typeparam>
            <param name="value">The enumeration</param>
            <returns>Enumeration with Flag Attributes (struct)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.In``1(``0,``0[])">
            <summary>
                Determines if a list contains any of the values.
            </summary>
            <param name="source">Container of objects</param>
            <param name="list">Any object that should be in the container</param>
            <typeparam name="T">Type of object to look for</typeparam>
            <returns>If the container contains any values.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Log(System.Exception)">
            <summary>
                Logs an exception to the console and a file.
            </summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Gets the maximum value of an IEnumerable by the comparer, or returns the default.
            </summary>
            <param name="container">Container of values to search through</param>
            <param name="comparer">Function to compare values</param>
            <typeparam name="T">Type of object</typeparam>
            <typeparam name="TR">Type result of comparer</typeparam>
            <returns>The maximums of the objects</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Gets the minimum value of an IEnumerable by the comparer, or returns the default.
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <typeparam name="TR">Type result of comparer</typeparam>
            <param name="container">Container of values to search through</param>
            <param name="comparer">Function to compare the values</param>
            <returns>The minimum of the objects</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.SetFlags``1(``0,``0,System.Boolean)">
            <summary>
                Sets the given flags to the struct source, given struct must be an enumeration with flag attributes.
            </summary>
            <typeparam name="T">Flag with Attributes type.</typeparam>
            <param name="value">The enumeration</param>
            <param name="flags">The flags to be set</param>
            <param name="status">Turn flags on or off</param>
            <returns>Enumeration with Flag Attributes (struct)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Standard Deviation of the values list.
            </summary>
            <param name="values">Values list</param>
            <returns>Standard Deviation</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.To``1(System.IConvertible)">
            <summary>
                Converts an item to another Type
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="object">The object to convert to</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.FromJson``1(System.String)">
            <summary>
                From a JSON-Type string to the type given.
            </summary>
            <param name="json">
                The JSON string.
            </param>
            <typeparam name="T">
                The type to convert the JSON to
            </typeparam>
            <returns>
                The converted type of the JSON.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsReady(LeagueSharp.SpellDataInst,System.Int32)">
            <summary>
                Returns if the spell is ready to use.
            </summary>
            <param name="spell">Spell Data Instance</param>
            <param name="t">Time Left</param>
            <returns>Is Spell Ready to use</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsReady(LeagueSharp.SpellSlot,System.Int32)">
            <summary>
                Returns if the spell is ready to use.
            </summary>
            <param name="slot">The SpellSlot</param>
            <param name="t">Time Left</param>
            <returns>Is Spell Ready to use</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToJson(System.Object)">
            <summary>
                To a JSON-Type string from an object.
            </summary>
            <param name="obj">
                The object
            </param>
            <returns>
                The JSON string.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToArgb(SharpDX.Color)">
            <summary>
                Converts a SharpDX Color to <c>Argb</c> format.
            </summary>
            <param name="color">
                The color
            </param>
            <returns>
                The <see cref="T:System.Int32" /> in 0xAARRGGBB format.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToRgba(System.Drawing.Color)">
            <summary>
                Converts a System Color to <c>Rgba</c> format.
            </summary>
            <param name="color">
                The color
            </param>
            <returns>
                The <see cref="T:System.Int32" /> in 0xRRGGBBAA format.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToSharpDxColor(System.Drawing.Color)">
            <summary>
                Converts a System Color to a SharpDX Color.
            </summary>
            <param name="color">
                The color.
            </param>
            <returns>
                The SharpDX Color instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToSystemColor(SharpDX.Color)">
            <summary>
                Converts a SharpDX Color to a System Color.
            </summary>
            <param name="color">
                The color.
            </param>
            <returns>
                The System Color instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToSystemColor(SharpDX.ColorBGRA)">
            <summary>
                Converts a SharpDX Color to a System Color.
            </summary>
            <param name="color">
                The color.
            </param>
            <returns>
                The System Color instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.AngleBetween(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Returns the angle between two vectors.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>Angle between two vectors in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.AngleBetween(SharpDX.Vector2,SharpDX.Vector3)">
            <summary>
                Returns the angle between two vectors.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>Angle between two vectors in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CircleCircleIntersection(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
            <summary>
                Returns the two intersection points between two circles.
            </summary>
            <param name="center1">Center of Circle 1</param>
            <param name="center2">Center of Circle 2</param>
            <param name="radius1">Circle 1 Radius</param>
            <param name="radius2">Circle 2 Radius</param>
            <returns>Array of <see cref="T:SharpDX.Vector2" /> that contains the intersection points.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Closest(SharpDX.Vector2,System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
            <summary>
                Seeks for the closest Vector2 to the extended Vector2.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="array">Vector2 Collection</param>
            <returns>Closest Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Closest(SharpDX.Vector2,System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
            <summary>
                Seeks for the closest Vector3 to the extended Vector2.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="array">Vector3 Collection</param>
            <returns>Closest Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountAllyHeroesInRange(SharpDX.Vector2,System.Single,LeagueSharp.Obj_AI_Base)">
            <summary>
                Counts the ally heroes in range.
            </summary>
            <param name="vector2">The vector2.</param>
            <param name="range">The range.</param>
            <param name="originalUnit">The original unit.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountEnemyHeroesInRange(SharpDX.Vector2,System.Single,LeagueSharp.Obj_AI_Base)">
            <summary>
                Counts the enemy heroes in range.
            </summary>
            <param name="vector2">The vector2.</param>
            <param name="range">The range.</param>
            <param name="originalUnit">The original unit.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CrossProduct(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Returns the cross product Z value.
            </summary>
            <param name="self">
                The self Vector2.
            </param>
            <param name="other">
                The other Vector2.
            </param>
            <returns>
                The <see cref="T:System.Single" /> cross product.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Calculates the distance between the extended Vector2 and a Vector2.
            </summary>
            <param name="vector2">SharpDX Vector2 (From)</param>
            <param name="toVector2">SharpDX Vector2 (To)</param>
            <returns>Float Units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector3)">
            <summary>
                Calculates the distance between the extended Vector2 and a Vector3.
            </summary>
            <param name="vector2">SharpDX Vector2 (From)</param>
            <param name="toVector3">SharpDX Vector3 (To)</param>
            <returns>Float Units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
            <summary>
                Returns the distance to the line segment.
            </summary>
            <param name="point">Extended SharpDX Vector2</param>
            <param name="segmentStart">Vector2 Segment Start</param>
            <param name="segmentEnd">Vector2 Segment End</param>
            <param name="onlyIfOnSegment">Only if Segment</param>
            <returns>The distance between the point and the segment.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Calculates the squared distance between two vectors.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector3)">
            <summary>
                Calculates the squared distance between two vectors.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
            <summary>
                Returns the squared distance to the line segment.
            </summary>
            <param name="point">Extended SharpDX Vector2</param>
            <param name="segmentStart">Vector2 Segment Start</param>
            <param name="segmentEnd">Vector2 Segment End</param>
            <param name="onlyIfOnSegment">Only if Segment</param>
            <returns>The squared distance between the point and the segment.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Extend(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
                Extends a Vector2 to another Vector2.
            </summary>
            <param name="vector2">Extended SharpDX Vector2 (From)</param>
            <param name="toVector2">SharpDX Vector2 (To)</param>
            <param name="distance">Distance (float units)</param>
            <returns>Extended Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Extend(SharpDX.Vector2,SharpDX.Vector3,System.Single)">
            <summary>
                Extends a Vector2 to a Vector3.
            </summary>
            <param name="vector2">Extended SharpDX Vector2 (From)</param>
            <param name="toVector3">SharpDX Vector3 (To)</param>
            <param name="distance">Distance (float units)</param>
            <returns>Extended Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetPathLength(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Gets the total distance of a list of vectors.
            </summary>
            <param name="path">The path</param>
            <returns>Total distance of the path</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Intersects two line segments.
            </summary>
            <param name="lineSegment1Start">Line Segment 1 (Start)</param>
            <param name="lineSegment1End">Line Segment 1 (End)</param>
            <param name="lineSegment2Start">Line Segment 2 (Start)></param>
            <param name="lineSegment2End">Line Segment 2 (End)</param>
            <returns>The intersection result, <seealso cref="T:LeagueSharp.SDK.IntersectionResult" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOnScreen(SharpDX.Vector2,System.Single)">
            <summary>
                Returns if the Vector2 is on the screen.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            ///
            <param name="radius">Radius</param>
            <returns>Is Vector2 on screen</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOrthogonal(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Returns if the angle is orthogonal.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOrthogonal(SharpDX.Vector2,SharpDX.Vector3)">
            <summary>
                Returns if the angle is orthogonal.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderAllyTurret(SharpDX.Vector2)">
            <summary>
                Returns whether the given position is under a ally turret
            </summary>
            <param name="position">Extended SharpDX Vector2</param>
            <returns>Is Position under a turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderEnemyTurret(SharpDX.Vector2)">
            <summary>
                Returns whether the given position is under a enemy turret
            </summary>
            <param name="position">Extended SharpDX Vector2</param>
            <returns>Is Position under a turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderRectangle(SharpDX.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Returns true if the point is under the rectangle
            </summary>
            <param name="point">
                Extended SharpDX Vector2
            </param>
            <param name="x">
                Rectangle X-axis
            </param>
            <param name="y">
                Rectangle Y-axis
            </param>
            <param name="width">
                Rectangle width
            </param>
            <param name="height">
                Rectangle height
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsValid(SharpDX.Vector2)">
            <summary>
                Checks for if the extended Vector2 is valid.
            </summary>
            <param name="vector2">SharpDX Vector2</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsWall(SharpDX.Vector2)">
            <summary>
                Returns if the Vector2 position is a wall.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <returns>Is Vector2 position a wall position</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Magnitude(SharpDX.Vector2)">
            <summary>
                Returns the calculated magnitude of the given Vector2.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <returns>Magnitude in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Normalized(SharpDX.Vector2)">
            <summary>
                Normalizes a Vector2.
            </summary>
            <param name="vector2">SharpDX Vector2</param>
            <returns>Normalized Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.PathLength(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Returns the total distance of a path.
            </summary>
            <param name="path">
                The path.
            </param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Perpendicular(SharpDX.Vector2,System.Int32)">
            <summary>
                Returns the Perpendicular Vector2 to the Extended Vector2.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="offset">Axis Offset (0 = X, 1 = Y)</param>
            <returns>Perpendicular Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Polar(SharpDX.Vector2)">
            <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <returns>Polar for Vector Angle (Degrees)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ProjectOn(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Returns the projection of the Vector2 on the segment.
            </summary>
            <param name="point">The Point</param>
            <param name="segmentStart">Start of Segment</param>
            <param name="segmentEnd">End of Segment</param>
            <returns><see cref="T:LeagueSharp.SDK.ProjectionInfo" /> containing the projection.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Rotated(SharpDX.Vector2,System.Single)">
            <summary>
                Rotates the Vector2 to a set angle.
            </summary>
            <param name="vector2">Extended SharpDX Vector2</param>
            <param name="angle">Angle (in radians)</param>
            <returns>Rotated Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToVector3(SharpDX.Vector2,System.Single)">
            <summary>
                Transforms an extended Vector2 into a Vector3.
            </summary>
            <param name="vector2">SharpDX Vector2</param>
            <param name="z">Float Z-axis (default = 0f)</param>
            <returns>The <see cref="T:SharpDX.Vector3" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToVector3(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Transforms an extended Vector2 List into a Vector3 List.
            </summary>
            <param name="path">
                The path.
            </param>
            <returns>
                Vector3 List
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.VectorMovementCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2,System.Single,System.Single)">
            <summary>
                Calculates movement collision between two vectors points.
            </summary>
            <param name="pointStartA">
                Point A Start.
            </param>
            <param name="pointEndA">
                Point A End.
            </param>
            <param name="pointVelocityA">
                Point A Velocity.
            </param>
            <param name="pointB">
                Point B.
            </param>
            <param name="pointVelocityB">
                Point B Velocity.
            </param>
            <param name="delay">
                Additional Delay.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.MovementCollisionInfo" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.VectorMovementCollision(SharpDX.Vector2[],System.Single,SharpDX.Vector2,System.Single,System.Single)">
            <summary>
                Calculates movement collision between two vectors points.
            </summary>
            <param name="pointA">
                Point A.
            </param>
            <param name="pointVelocityA">
                Point A Velocity.
            </param>
            <param name="pointB">
                Point B.
            </param>
            <param name="pointVelocityB">
                Point B Velocity.
            </param>
            <param name="delay">
                Additional Delay.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.MovementCollisionInfo" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.AngleBetween(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Returns the angle between two vectors.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>Angle between two vectors in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.AngleBetween(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
                Returns the angle between two vectors.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>Angle between two vectors in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Closest(SharpDX.Vector3,System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
            <summary>
                Seeks for the closest Vector3 to the extended Vector3.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="array">Vector3 Collection</param>
            <returns>Closest Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Closest(SharpDX.Vector3,System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
            <summary>
                Seeks for the closest Vector2 to the extended Vector3.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="array">Vector2 Collection</param>
            <returns>Closest Vector2</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountAllyHeroesInRange(SharpDX.Vector3,System.Single,LeagueSharp.Obj_AI_Base)">
            <summary>
                Counts the ally heroes in range.
            </summary>
            <param name="vector3">The vector3.</param>
            <param name="range">The range.</param>
            <param name="originalUnit">The original unit.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountEnemyHeroesInRange(SharpDX.Vector3,System.Single,LeagueSharp.Obj_AI_Base)">
            <summary>
                Counts the enemy heroes in range.
            </summary>
            <param name="vector3">The vector3.</param>
            <param name="range">The range.</param>
            <param name="originalUnit">The original unit.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Calculates the distance between the extended Vector3 and a Vector3.
            </summary>
            <param name="vector3">SharpDX Vector3 (From)</param>
            <param name="toVector3">SharpDX Vector3 (To)</param>
            <returns>Float Units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
                Calculates the distance between the extended Vector3 and a Vector3.
            </summary>
            <param name="vector3">SharpDX Vector3 (From)</param>
            <param name="toVector2">SharpDX Vector2 (To)</param>
            <returns>Float Units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Calculates the squared distance between two vectors.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
                Calculates the squared distance between two vectors.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Extend(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
                Extends a Vector3 to another Vector3.
            </summary>
            <param name="vector3">Extended SharpDX Vector3 (From)</param>
            <param name="toVector3">SharpDX Vector3 (To)</param>
            <param name="distance">Distance (float units)</param>
            <returns>Extended Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Extend(SharpDX.Vector3,SharpDX.Vector2,System.Single)">
            <summary>
                Extends a Vector3 to a Vector2.
            </summary>
            <param name="vector3">Extended SharpDX Vector3 (From)</param>
            <param name="toVector2">SharpDX Vector2 (To)</param>
            <param name="distance">Distance (float units)</param>
            <returns>Extended Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetPathLength(System.Collections.Generic.List{SharpDX.Vector3})">
            <summary>
                Gets the total distance of a list of vectors.
            </summary>
            <param name="path">The path</param>
            <returns>Total distance of the path</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOnScreen(SharpDX.Vector3,System.Single)">
            <summary>
                Returns if the Vector3 is on the screen.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            ///
            <param name="radius">Radius</param>
            <returns>Is Vector3 on screen</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOrthogonal(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Returns if the angle is orthogonal.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector3">SharpDX Vector3</param>
            <returns>Returns if the angle is orthogonal</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsOrthogonal(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
                Returns if the angle is orthogonal.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="toVector2">SharpDX Vector2</param>
            <returns>Returns if the angle is orthogonal</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderAllyTurret(SharpDX.Vector3)">
            <summary>
                Returns whether the given position is under a ally turret
            </summary>
            <param name="position">Extended SharpDX Vector3</param>
            <returns>Is Position under a turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderEnemyTurret(SharpDX.Vector3)">
            <summary>
                Returns whether the given position is under a enemy turret
            </summary>
            <param name="position">Extended SharpDX Vector3</param>
            <returns>Is Position under a turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsValid(SharpDX.Vector3)">
            <summary>
                Checks for if the extended Vector3 is valid.
            </summary>
            <param name="vector3">
                SharpDX Vector3
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsWall(SharpDX.Vector3)">
            <summary>
                Returns if the Vector3 position is a wall.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <returns>Is Vector3 position a wall position</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Magnitude(SharpDX.Vector3)">
            <summary>
                Returns the calculated magnitude of the given Vector3.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <returns>Magnitude in float-units</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Normalized(SharpDX.Vector3)">
            <summary>
                Normalizes a Vector3.
            </summary>
            <param name="vector3">SharpDX Vector3</param>
            <returns>Normalized Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.PathLength(System.Collections.Generic.List{SharpDX.Vector3})">
            <summary>
                Returns the total distance of a path.
            </summary>
            <param name="path">
                The path.
            </param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Perpendicular(SharpDX.Vector3,System.Int32)">
            <summary>
                Returns the Perpendicular Vector3 to the Extended Vector3.
            </summary>
            <param name="vector3">Extended SharpDX Vector3</param>
            <param name="offset">Axis Offset (0 = X, 1 = Y)</param>
            <returns>Perpendicular Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Polar(SharpDX.Vector3)">
            <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
            <param name="vector3">Extended SharpDX Vector2</param>
            <returns>Polar for Vector Angle (Degrees)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ProjectOn(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Converts the points to 2D, then returns the projection of the Vector2 on the segment.
            </summary>
            <param name="point">The point</param>
            <param name="segmentStart">Start of Segment</param>
            <param name="segmentEnd">End of Segment</param>
            <returns><see cref="T:LeagueSharp.SDK.ProjectionInfo" /> containing the projection.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Rotated(SharpDX.Vector3,System.Single)">
            <summary>
                Rotates the Vector3 to a set angle.
            </summary>
            <param name="vector3">Extended SharpDX Vector2</param>
            <param name="angle">Angle (in radians)</param>
            <returns>Rotated Vector3</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.SetZ(SharpDX.Vector3,System.Nullable{System.Single})">
            <summary>
                Returns the modified Vector3 with a quick changed Z-axis value.
            </summary>
            <param name="v">Extended SharpDX Vector3</param>
            <param name="value">Switched Z value in float-units</param>
            <returns>Modified Vector3.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToVector2(SharpDX.Vector3)">
            <summary>
                Transforms an extended Vector3 into a Vector2.
            </summary>
            <param name="vector3">SharpDX Vector3</param>
            <returns>The <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.ToVector2(System.Collections.Generic.List{SharpDX.Vector3})">
            <summary>
                Transforms an extended Vector3 List into a Vector2 List.
            </summary>
            <param name="path">
                The path.
            </param>
            <returns>
                Vector2 List
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.Extensions.TurretsTierFour">
            <summary>
                Turrets Tier Four
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Extensions.TurretsTierOne">
            <summary>
                Turrets Tier One
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Extensions.TurretsTierTwo">
            <summary>
                Turrets Tier Two
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Extensions.TurretsTierThree">
            <summary>
                Turrets Tier Three
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountAllyHeroesInRange(LeagueSharp.Obj_AI_Base,System.Single)">
            <summary>
                Counts the ally heroes in range.
            </summary>
            <param name="unit">The unit.</param>
            <param name="range">The range.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.CountEnemyHeroesInRange(LeagueSharp.Obj_AI_Base,System.Single)">
            <summary>
                Counts the enemy heroes in range.
            </summary>
            <param name="unit">The unit.</param>
            <param name="range">The range.</param>
            <returns>
                The count.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.GameObject,LeagueSharp.GameObject)">
            <summary>
                Gets the distance between two GameObjects
            </summary>
            <param name="source">The Source</param>
            <param name="target">The Target</param>
            <returns>The distance between the two objects</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.GameObject,SharpDX.Vector3)">
            <summary>
                Gets the distance between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector3" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.GameObject,SharpDX.Vector2)">
            <summary>
                Gets the distance between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector2" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the distance between two <c>Obj_AI_Base</c>s using ServerPosition
            </summary>
            <param name="source">The Source</param>
            <param name="target">The Target</param>
            <returns>The Distance</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.Obj_AI_Base,SharpDX.Vector3)">
            <summary>
                Gets the distance between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector3" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector3" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.Distance(LeagueSharp.Obj_AI_Base,SharpDX.Vector2)">
            <summary>
                Gets the distance between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector2" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.GameObject,LeagueSharp.GameObject)">
            <summary>
                Gets the distance squared between two GameObjects
            </summary>
            <param name="source">The Source</param>
            <param name="target">The Target</param>
            <returns>The squared distance between the two objects</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.GameObject,SharpDX.Vector3)">
            <summary>
                Gets the distance squared between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector3" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance squared between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector3" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.GameObject,SharpDX.Vector2)">
            <summary>
                Gets the distance squared between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector2" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance squared between a <see cref="T:LeagueSharp.GameObject" /> and a <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the distance squared between two Obj_AI_Base
            </summary>
            <param name="source">The Source</param>
            <param name="target">The Target</param>
            <returns>The squared distance between the two Obj_AI_Base</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.Obj_AI_Base,SharpDX.Vector3)">
            <summary>
                Gets the distance squared between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector3" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance squared between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector3" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceSquared(LeagueSharp.Obj_AI_Base,SharpDX.Vector2)">
            <summary>
                Gets the distance squared between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector2" />
            </summary>
            <param name="source">The Source</param>
            <param name="position">The Position</param>
            <returns>The distance squared between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and a <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceToPlayer(LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the distance between <c>Obj_AI_Base</c> source and Player
            </summary>
            <param name="source">The Source</param>
            <returns>The distance between a <see cref="T:LeagueSharp.Obj_AI_Base" /> and the Player</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceToPlayer(SharpDX.Vector3)">
            <summary>
                Gets the distance between the point and the Player
            </summary>
            <param name="position">The Position</param>
            <returns>The distance between the position and the Player</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.DistanceToPlayer(SharpDX.Vector2)">
            <summary>
                Gets the distance between the point and the Player
            </summary>
            <param name="position">The Position</param>
            <returns>The distance between the position and the Player</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetRecallTime(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns the recall time duration for a specified <see cref="T:LeagueSharp.Obj_AI_Hero" />
            </summary>
            <param name="hero">The Hero</param>
            <returns>Recall Time Duration</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetRecallTime(System.String)">
            <summary>
                Returns the recall time duration for a specific recall type by name.
            </summary>
            <param name="recallName">Recall type name</param>
            <returns>Recall Time Duration</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetSpellSlot(LeagueSharp.Obj_AI_Hero,System.String)">
            <summary>
                Returns the spell slot with the name.
            </summary>
            <param name="unit">
                The Unit
            </param>
            <param name="name">
                Spell Name
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SpellSlot" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.GetTurretType(LeagueSharp.Obj_AI_Turret)">
            <summary>
                Gets the turret tier type.
            </summary>
            <param name="turret">
                The turret.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Enumerations.TurretType" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.InFountain(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns whether the hero is in fountain range.
            </summary>
            <param name="hero">The Hero</param>
            <returns>Is Hero in fountain range</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.InShop(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns whether the hero is in shop range.
            </summary>
            <param name="hero">The Hero</param>
            <returns>Is Hero in shop range</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsBothFacing(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Calculates if the source and the target are facing each-other.
            </summary>
            <param name="source">Extended source</param>
            <param name="target">The Target</param>
            <returns>Returns if the source and target are facing each-other (boolean)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsFacing(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Calculates if the source is facing the target.
            </summary>
            <param name="source">Extended source</param>
            <param name="target">The Target</param>
            <returns>Returns if the source is facing the target (boolean)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsMelee(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Return whether the specific hero is melee
            </summary>
            <param name="unit">Extended unit</param>
            <returns>Returns if the unit is melee</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsRecalling(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns if the unit is recalling.
            </summary>
            <param name="unit">Extended unit</param>
            <returns>Returns if the unit is recalling (boolean)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderAllyTurret(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns whether the specific unit is under a ally turret.
            </summary>
            <param name="unit"><see cref="T:LeagueSharp.Obj_AI_Base" /> unit</param>
            <returns>Is Unit under an Enemy Turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsUnderEnemyTurret(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns whether the specific unit is under a enemy turret.
            </summary>
            <param name="unit"><see cref="T:LeagueSharp.Obj_AI_Base" /> unit</param>
            <returns>Is Unit under an Enemy Turret</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsValid(LeagueSharp.Obj_AI_Base)">
            <summary>
                Checks if the Unit is valid.
            </summary>
            <param name="unit">
                Unit from <c>Obj_AI_Base</c> type
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Extensions.IsValidTarget(LeagueSharp.AttackableUnit,System.Single,System.Boolean,SharpDX.Vector3)">
            <summary>
                Checks if the target unit is valid.
            </summary>
            <param name="unit">
                The Unit
            </param>
            <param name="range">
                The Range
            </param>
            <param name="checkTeam">
                Checks if the target is an enemy from the Player's side
            </param>
            <param name="from">
                Check From
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.ProjectionInfo">
            <summary>
                Holds info for the ProjectOn method.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ProjectionInfo.IsOnSegment">
            <summary>
                Returns if the point is on the segment
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ProjectionInfo.LinePoint">
            <summary>
                Line point
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ProjectionInfo.SegmentPoint">
            <summary>
                Segment point
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ProjectionInfo.#ctor(System.Boolean,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.ProjectionInfo" /> struct.
            </summary>
            <param name="isOnSegment">
                Is on Segment
            </param>
            <param name="segmentPoint">
                Segment point
            </param>
            <param name="linePoint">
                Line point
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.MovementCollisionInfo">
            <summary>
                Holds info for the VectorMovementCollision method.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.MovementCollisionInfo.CollisionPosition">
            <summary>
                Collision position.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.MovementCollisionInfo.CollisionTime">
            <summary>
                Collision Time from calculation.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MovementCollisionInfo.#ctor(System.Single,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.MovementCollisionInfo" /> struct.
            </summary>
            <param name="collisionTime">
                Collision time from calculation
            </param>
            <param name="collisionPosition">
                Collision position
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.MovementCollisionInfo.Item(System.Int32)">
            <summary>
                Information accessor.
            </summary>
            <param name="i">
                The Indexer.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.IntersectionResult">
            <summary>
                Holds info for the <see cref="M:LeagueSharp.SDK.Extensions.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)" /> method.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.IntersectionResult.Intersects">
            <summary>
                Returns if both of the points intersect.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.IntersectionResult.Point">
            <summary>
                Intersection point
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.IntersectionResult.#ctor(System.Boolean,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.IntersectionResult" /> struct.
                Constructor for Intersection Result
            </summary>
            <param name="intersects">
                Intersection of input
            </param>
            <param name="point">
                Intersection Point
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.GameObjects">
            <summary>
                A static (stack) class which contains a sort-of cached versions of the important game objects.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyHeroesList">
            <summary>
                The ally heroes list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyInhibitorsList">
            <summary>
                The ally inhibitors list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyList">
            <summary>
                The ally list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyMinionsList">
            <summary>
                The ally minions list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyShopsList">
            <summary>
                The ally shops list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllySpawnPointsList">
            <summary>
                The ally spawn points list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyTurretsList">
            <summary>
                The ally turrets list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AllyWardsList">
            <summary>
                The ally wards list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.AttackableUnitsList">
            <summary>
                The attackable unit list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyHeroesList">
            <summary>
                The enemy heroes list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyInhibitorsList">
            <summary>
                The enemy inhibitors list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyList">
            <summary>
                The enemy list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyMinionsList">
            <summary>
                The enemy minions list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyShopsList">
            <summary>
                The enemy shops list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemySpawnPointsList">
            <summary>
                The enemy spawn points list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyTurretsList">
            <summary>
                The enemy turrets list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.EnemyWardsList">
            <summary>
                The enemy wards list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.GameObjectsList">
            <summary>
                The game objects list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.HeroesList">
            <summary>
                The heroes list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.InhibitorsList">
            <summary>
                The inhibitors list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.JungleLargeList">
            <summary>
                The jungle large list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.JungleLegendaryList">
            <summary>
                The jungle legendary list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.JungleList">
            <summary>
                The jungle list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.JungleSmallList">
            <summary>
                The jungle small list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.MinionsList">
            <summary>
                The minions list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.NexusList">
            <summary>
                The nexus list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.ParticleEmittersList">
            <summary>
                The general particle emitters list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.ShopsList">
            <summary>
                The shops list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.SpawnPointsList">
            <summary>
                The spawn points list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.TurretsList">
            <summary>
                The turrets list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.WardsList">
            <summary>
                The wards list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GameObjects.initialized">
            <summary>
                Indicates whether the <see cref="T:LeagueSharp.SDK.GameObjects" /> stack was initialized and saved required instances.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.GameObjects" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllGameObjects">
            <summary>
                Gets the game objects.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Ally">
            <summary>
                Gets the ally.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyHeroes">
            <summary>
                Gets the ally heroes.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyInhibitors">
            <summary>
                Gets the ally inhibitors.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyMinions">
            <summary>
                Gets the ally minions.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyNexus">
            <summary>
                Gets or sets the ally nexus.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyShops">
            <summary>
                Gets the ally shops.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllySpawnPoints">
            <summary>
                Gets the ally spawn points.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyTurrets">
            <summary>
                Gets the ally turrets.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AllyWards">
            <summary>
                Gets the ally wards.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.AttackableUnits">
            <summary>
                Gets the attackable units.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Enemy">
            <summary>
                Gets the enemy.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyHeroes">
            <summary>
                Gets the enemy heroes.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyInhibitors">
            <summary>
                Gets the enemy inhibitors.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyMinions">
            <summary>
                Gets the enemy minions.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyNexus">
            <summary>
                Gets or sets the enemy nexus.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyShops">
            <summary>
                Gets the enemy shops.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemySpawnPoints">
            <summary>
                Gets the enemy spawn points.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyTurrets">
            <summary>
                Gets the enemy turrets.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.EnemyWards">
            <summary>
                Gets the enemy wards.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Heroes">
            <summary>
                Gets the heroes.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Inhibitors">
            <summary>
                Gets the inhibitors.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Jungle">
            <summary>
                Gets the jungle.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.JungleLarge">
            <summary>
                Gets the jungle large.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.JungleLegendary">
            <summary>
                Gets the jungle legendary.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.JungleSmall">
            <summary>
                Gets the jungle small.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Minions">
            <summary>
                Gets the minions.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Nexuses">
            <summary>
                Gets the nexuses.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.ParticleEmitters">
            <summary>
                Gets the general particle emitters.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Player">
            <summary>
                Gets or sets the player.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Shops">
            <summary>
                Gets the shops.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.SpawnPoints">
            <summary>
                Gets the spawn points.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Turrets">
            <summary>
                Gets the turrets.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GameObjects.Wards">
            <summary>
                Gets the wards.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.Compare(LeagueSharp.GameObject,LeagueSharp.GameObject)">
            <summary>
                Compares two <see cref="T:LeagueSharp.GameObject" /> and returns if they are identical.
            </summary>
            <param name="gameObject">The GameObject</param>
            <param name="object">The Compare GameObject</param>
            <returns>Whether the <see cref="T:LeagueSharp.GameObject" />s are identical.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.Get``1">
            <summary>
                The get operation from the GameObjects stack.
            </summary>
            <typeparam name="T">
                The requested <see cref="T:LeagueSharp.GameObject" /> type.
            </typeparam>
            <returns>
                The List containing the requested type.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.GetNative``1">
            <summary>
                Get get operation from the native GameObjects stack.
            </summary>
            <typeparam name="T">
                The requested <see cref="T:LeagueSharp.GameObject" /> type.
            </typeparam>
            <returns>
                The List containing the requested type.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.Initialize">
            <summary>
                The initialize method.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.OnCreate(LeagueSharp.GameObject,System.EventArgs)">
            <summary>
                OnCreate event.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.GameObjects.OnDelete(LeagueSharp.GameObject,System.EventArgs)">
            <summary>
                OnDelete event.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Collision">
            <summary>
                Collision class, calculates collision for moving objects.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Collision.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Collision" /> class.
                Static Constructor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Collision.GetCollision(System.Collections.Generic.List{SharpDX.Vector3},LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns the list of the units that the skill-shot will hit before reaching the set positions.
            </summary>
            <param name="positions">
                The positions.
            </param>
            <param name="input">
                The input.
            </param>
            <returns>
                A list of <c>Obj_AI_Base</c>s which the input collides with.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.ConvexHull">
            <summary>
                Provides methods for finding the minimum enclosing circles.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ConvexHull.MinMaxBox">
            <summary>
                Gets or sets the min max box.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ConvexHull.MinMaxCorners">
            <summary>
                Gets or sets the min max corners.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ConvexHull.NonCulledPoints">
            <summary>
                Gets or sets the non culled points.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.FindMinimalBoundingCircle(System.Collections.Generic.List{SharpDX.Vector2},SharpDX.Vector2@,System.Single@)">
            <summary>
                Find a minimal bounding circle.
            </summary>
            <param name="points">The Points</param>
            <param name="center">The center</param>
            <param name="radius">The radius</param>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.GetMec(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Returns the minimum enclosing circle from a list of points.
            </summary>
            <param name="points">List of points</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.ConvexHull.MecCircle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.MakeConvexHull(System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Return the points that make up a polygon's convex hull. This method leaves the points list unchanged.
            </summary>
            <param name="points">The Points</param>
            <returns>List of <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.AngleValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Return a number that gives the ordering of angles
                WRST horizontal from the point (x1, y1) to (x2, y2).
                In other words, AngleValue(x1, y1, x2, y2) is not
                the angle, but if:
                Angle(x1, y1, x2, y2) > Angle(x1, y1, x2, y2)
                then
                AngleValue(x1, y1, x2, y2) > AngleValue(x1, y1, x2, y2)
                this angle is greater than the angle for another set
                of points,) this number for
                This function is <c>dy</c> / (<c>dy</c> + dx).
            </summary>
            <param name="x1">First X</param>
            <param name="y1">First Y</param>
            <param name="x2">Second X</param>
            <param name="y2">Second Y</param>
            <returns>The <see cref="T:System.Single" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.CircleEnclosesPoints(SharpDX.Vector2,System.Single,System.Collections.Generic.IEnumerable{SharpDX.Vector2},System.Int32,System.Int32,System.Int32)">
            <summary>
                Returns whether the indicated circle encloses all of the points.
            </summary>
            <param name="center">Center of the Circle</param>
            <param name="radius2">Circle Radius</param>
            <param name="points">Points List</param>
            <param name="skip1">Skip certain point 1</param>
            <param name="skip2">Skip certain point 2</param>
            <param name="skip3">Skip certain point 3</param>
            <returns>The <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.FindCircle(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2@,System.Single@)">
            <summary>
                Find a circle through three Vector2 points
            </summary>
            <param name="a">Vector2 point A</param>
            <param name="b">Vector2 point B</param>
            <param name="c">Vector2 point C</param>
            <param name="center">Returned Vector2 Center</param>
            <param name="radius2">Retuned Circle Radius</param>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.GetMinMaxBox(System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
            <summary>
                Find a box that fits inside the MinMax quadrilateral.
            </summary>
            <param name="points">The Points</param>
            <returns>
                <see cref="T:SharpDX.RectangleF" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.GetMinMaxCorners(System.Collections.Generic.IEnumerable{SharpDX.Vector2},SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Find the points nearest the upper left, upper right, lower left, and lower right corners.
            </summary>
            <param name="points">
                The Points
            </param>
            <param name="upperLeft">
                Upper left <see cref="T:SharpDX.Vector2" />
            </param>
            <param name="upperRight">
                Upper right <see cref="T:SharpDX.Vector2" />
            </param>
            <param name="lowerLeft">
                Lower left <see cref="T:SharpDX.Vector2" />
            </param>
            <param name="lowerRight">
                Lower right <see cref="T:SharpDX.Vector2" />
            </param>
            <returns>
                The <see cref="T:SharpDX.Vector2" /> list.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.HullCull(System.Collections.Generic.IReadOnlyList{SharpDX.Vector2})">
            <summary>
                Cull points out of the convex hull that lie inside the trapezoid defined by the vertices with smallest and largest
                X and Y coordinates. Return the points that are not culled.
            </summary>
            <param name="points">The Points</param>
            <returns>List of <see cref="T:SharpDX.Vector2" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.ConvexHull.MecCircle">
            <summary>
                Contains Center and Radius
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MecCircle.Center">
            <summary>
                The center
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MecCircle.Radius">
            <summary>
                The Radius
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.MecCircle.#ctor(SharpDX.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.ConvexHull.MecCircle" /> struct.
            </summary>
            <param name="center">
                The center
            </param>
            <param name="radius">
                The radius
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo">
            <summary>
                Information container for the <see cref="M:LeagueSharp.SDK.ConvexHull.GetMinMaxCorners(System.Collections.Generic.IEnumerable{SharpDX.Vector2},SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)" /> method.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo.LowerLeft">
            <summary>
                The lower left component.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo.LowerRight">
            <summary>
                The lower right component.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo.UpperLeft">
            <summary>
                The upper left component.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo.UpperRight">
            <summary>
                The upper right component.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo.#ctor(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.ConvexHull.MinMaxCornersInfo" /> struct.
            </summary>
            <param name="upperLeft">
                The upper left component
            </param>
            <param name="upperRight">
                The upper right component
            </param>
            <param name="lowerLeft">
                The lower left component
            </param>
            <param name="lowerRight">
                The lower right component
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Geometry">
            <summary>
                Geometry math class, contains geometry calculations.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Geometry.GetCenter(SharpDX.Rectangle,SharpDX.Direct3D9.Sprite,SharpDX.Rectangle,LeagueSharp.SDK.Enumerations.CenteredFlags)">
            <summary>
                Returns the center position of the rendering object on the rectangle.
            </summary>
            <param name="rectangle">Rectangle boundaries</param>
            <param name="sprite">Sprite which is being drawn on</param>
            <param name="dimensions">Object Dimensions</param>
            <param name="flags">Centered Flags</param>
            <returns>Vector2 center position of the rendering object on the rectangle.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Geometry.GetCenteredText(SharpDX.Rectangle,SharpDX.Direct3D9.Sprite,System.String,LeagueSharp.SDK.Enumerations.CenteredFlags)">
            <summary>
                Calculates the center position for the given text on within a rectangle boundaries.
            </summary>
            <param name="rectangle">Rectangle boundaries</param>
            <param name="sprite">Sprite which is being drawn on</param>
            <param name="text">The Text</param>
            <param name="flags">Centered Flags</param>
            <returns>Returns the center position of the text on the rectangle.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Geometry.GetCenteredText(SharpDX.Rectangle,SharpDX.Direct3D9.Sprite,SharpDX.Direct3D9.Font,System.String,LeagueSharp.SDK.Enumerations.CenteredFlags)">
            <summary>
                Calculates the center position for the given text on within a rectangle boundaries.
            </summary>
            <param name="rectangle">Rectangle boundaries</param>
            <param name="sprite">Sprite which is being drawn on</param>
            <param name="font">Text Font</param>
            <param name="text">The Text</param>
            <param name="flags">Centered Flags</param>
            <returns>Returns the center position of the text on the rectangle.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.ArcPoly">
            <summary>
                Represents an Arc <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Polygons.ArcPoly.quality">
            <summary>
                Arc Quality
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.ArcPoly.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.ArcPoly" /> class, after converting the points to 2D.
            </summary>
            <param name="start">
                Start of the Arc
            </param>
            <param name="direction">
                Direction of the Arc
            </param>
            <param name="angle">
                Angle of the Arc
            </param>
            <param name="radius">
                Radius of the Arc
            </param>
            <param name="quality">
                Quality of the Arc
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.ArcPoly.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.ArcPoly" /> class.
            </summary>
            <param name="start">
                Start of the Arc
            </param>
            <param name="end">
                End of the Arc
            </param>
            <param name="angle">
                Angle of the Arc
            </param>
            <param name="radius">
                Radius of the Arc
            </param>
            <param name="quality">
                Quality of the Arc
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.ArcPoly.Angle">
            <summary>
                Gets or sets the angle.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.ArcPoly.EndPos">
            <summary>
                Gets or sets the end position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.ArcPoly.Radius">
            <summary>
                Gets or sets the radius.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.ArcPoly.StartPos">
            <summary>
                Gets or sets the start position.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.ArcPoly.UpdatePolygon(System.Int32)">
            <summary>
                Updates the Arc. Use this after changing something.
            </summary>
            <param name="offset">Radius extra offset</param>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.CirclePoly">
            <summary>
                Represents a Circle <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Polygons.CirclePoly.quality">
            <summary>
                Circle Quality
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.CirclePoly.#ctor(SharpDX.Vector3,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.CirclePoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="radius">
                The Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.CirclePoly.#ctor(SharpDX.Vector2,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.CirclePoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="radius">
                The Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.CirclePoly.Center">
            <summary>
                Gets or sets the Center of the Circle.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.CirclePoly.Radius">
            <summary>
                Gets or sets the Radius of Circle.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.CirclePoly.UpdatePolygon(System.Int32,System.Single)">
            <summary>
                Updates the Polygon. Call this after changing something.
            </summary>
            <param name="offset">Extra radius</param>
            <param name="overrideWidth">New width to use, overriding the set one.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.LinePoly">
            <summary>
                Represents a Line <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.LinePoly.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.LinePoly" /> class.
            </summary>
            <param name="start">
                The Start
            </param>
            <param name="end">
                The End
            </param>
            <param name="length">
                Length of line(will be automatically set if -1)
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.LinePoly.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.LinePoly" /> class.
            </summary>
            <param name="start">
                The Start
            </param>
            <param name="end">
                The End
            </param>
            <param name="length">
                Length of line(will be automatically set if -1)
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.LinePoly.Length">
            <summary>
                Gets or sets the length of the Line. (Does not have to be updated)
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.LinePoly.LineEnd">
            <summary>
                Gets or sets the End of the Line.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.LinePoly.LineStart">
            <summary>
                Gets or sets the Start of the Line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.LinePoly.UpdatePolygon">
            <summary>
                Updates the polygon. Use this after changing something.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.Polygon">
            <summary>
                Base class representing a polygon.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.Polygon.Points">
            <summary>
                Gets or sets the list of all points in the polygon.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.Add(SharpDX.Vector2)">
            <summary>
                Adds a Vector2 to the points
            </summary>
            <param name="point">The Point</param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.Add(SharpDX.Vector3)">
            <summary>
                Converts Vector3 to 2D, then adds it to the points.
            </summary>
            <param name="point">The Point</param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.Add(LeagueSharp.SDK.Polygons.Polygon)">
            <summary>
                Adds all of the points in the polygon to this instance.
            </summary>
            <param name="polygon">The Polygon</param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.Draw(System.Drawing.Color,System.Int32)">
            <summary>
                Draws all of the points in the polygon connected.
            </summary>
            <param name="color">The Color</param>
            <param name="width">Width of lines</param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.IsInside(SharpDX.Vector2)">
            <summary>
                Gets if the Vector2 is inside the polygon.
            </summary>
            <param name="point">The Point</param>
            <returns>Whether the Vector2 is inside the polygon</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.IsInside(SharpDX.Vector3)">
            <summary>
                Gets if the Vector3 is inside the polygon.
            </summary>
            <param name="point">The Point</param>
            <returns>Whether the Vector3 is inside the polygon</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.IsInside(LeagueSharp.GameObject)">
            <summary>
                Gets if the Objects Position is inside the polygon.
            </summary>
            <param name="gameObject">Game Object</param>
            <returns>Whether the <see cref="T:LeagueSharp.GameObject" />'s position is inside the polygon</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.IsOutside(SharpDX.Vector2)">
            <summary>
                Gets if the position is outside of the polygon.
            </summary>
            <param name="point">The Point</param>
            <returns>Whether the Vector2 is inside the polygon</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.Polygon.ToClipperPath">
            <summary>
                Converts all the points to the Clipper Library format
            </summary>
            <returns>List of <c>IntPoint</c>'s</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.RectanglePoly">
            <summary>
                Represents a Rectangle <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RectanglePoly.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.RectanglePoly" /> class.
            </summary>
            <param name="start">
                The Start
            </param>
            <param name="end">
                The End
            </param>
            <param name="width">
                The Width
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RectanglePoly.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.RectanglePoly" /> class.
            </summary>
            <param name="start">
                The Start
            </param>
            <param name="end">
                The End
            </param>
            <param name="width">
                The Width
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RectanglePoly.Direction">
            <summary>
                Gets the direction of the Rectangle(Does not need update)
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RectanglePoly.End">
            <summary>
                Gets or sets the end.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RectanglePoly.Perpendicular">
            <summary>
                Gets a perpendicular direction of the Rectangle(Does not need an update)
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RectanglePoly.Start">
            <summary>
                Gets or sets the start.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RectanglePoly.Width">
            <summary>
                Gets or sets the width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RectanglePoly.UpdatePolygon(System.Int32,System.Single)">
            <summary>
                Updates the Polygon. Call this after changing something.
            </summary>
            <param name="offset">Extra width</param>
            <param name="overrideWidth">New width to use, overriding the set one.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.RingPoly">
            <summary>
                Represents a Ring <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Polygons.RingPoly.quality">
            <summary>
                Ring Quality
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RingPoly.#ctor(SharpDX.Vector3,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.RingPoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="width">
                The ring width
            </param>
            <param name="outerRadius">
                Outer Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RingPoly.#ctor(SharpDX.Vector2,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.RingPoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="width">
                The ring width
            </param>
            <param name="outerRadius">
                Outer Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RingPoly.Center">
            <summary>
                Gets or sets the center.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RingPoly.OuterRadius">
            <summary>
                Gets or sets the outer radius.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.RingPoly.Width">
            <summary>
                Gets or sets the ring width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.RingPoly.UpdatePolygon(System.Int32)">
            <summary>
                Updates the polygon. Call this after you change something.
            </summary>
            <param name="offset">Added radius</param>
        </member>
        <member name="T:LeagueSharp.SDK.Polygons.SectorPoly">
            <summary>
                Represents a Sector <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Polygons.SectorPoly.quality">
            <summary>
                Local quality.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.SectorPoly.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.SectorPoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="direction">
                The Direction
            </param>
            <param name="angle">
                The Angle
            </param>
            <param name="radius">
                The Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.SectorPoly.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Polygons.SectorPoly" /> class.
            </summary>
            <param name="center">
                The Center
            </param>
            <param name="endPosition">
                The end position
            </param>
            <param name="angle">
                The Angle
            </param>
            <param name="radius">
                The Radius
            </param>
            <param name="quality">
                The Quality
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.SectorPoly.Angle">
            <summary>
                Gets or sets the angle.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.SectorPoly.Center">
            <summary>
                Gets or sets the center.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.SectorPoly.Direction">
            <summary>
                Gets or sets the direction.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Polygons.SectorPoly.Radius">
            <summary>
                Gets or sets the radius.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Polygons.SectorPoly.UpdatePolygon(System.Int32)">
            <summary>
                Updates the polygon. Call this after changing something.
            </summary>
            <param name="offset">Added radius</param>
        </member>
        <member name="T:LeagueSharp.SDK.Cluster">
            <summary>
                Cluster (Area of Effect) Prediction class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.GetAoEPrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns an Area of Effect Prediction
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.GetPossibleTargets(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns the possible targets of a prediction input source.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns><see cref="T:LeagueSharp.SDK.Cluster.PossibleTarget" /> list.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Cluster.Circle">
            <summary>
                Circle Cluster (Area of Effect) Prediction sub class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Circle.GetCirclePrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns an Area of Effect circler prediction from a prediction input source.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Cluster.Cone">
            <summary>
                Cone Cluster (Area of Effect) Prediction sub class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Cone.GetConePrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns an Area-of-Effect cone prediction from a prediction input source.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Cone.GetHits(SharpDX.Vector2,System.Double,System.Single,System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Returns the number of hits within the cone.
            </summary>
            <param name="end">Vector2 end-point of the cone</param>
            <param name="range">Cone Range</param>
            <param name="angle">Cone Facing Angle</param>
            <param name="points">Vector2 points</param>
            <returns>Number of Hits</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Cluster.Line">
            <summary>
                Line Cluster (Area of Effect) Prediction sub class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Line.GetLinePrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns an Area-of-Effect line prediction from a prediction input source.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Line.GetCandidates(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
            <summary>
                Returns a list of Vector2 point candidates for the linear prediction.
            </summary>
            <param name="from">Vector2 from position</param>
            <param name="to">Vector2 to position</param>
            <param name="radius">The Radius</param>
            <param name="range">The Range</param>
            <returns>Vector2 list</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Cluster.Line.GetHits(SharpDX.Vector2,SharpDX.Vector2,System.Double,System.Collections.Generic.List{SharpDX.Vector2})">
            <summary>
                Returns the number of hits
            </summary>
            <param name="start">Vector2 starting point</param>
            <param name="end">Vector2 ending point</param>
            <param name="radius">Line radius</param>
            <param name="points">Vector2 points</param>
            <returns>Number of Hits</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Cluster.PossibleTarget">
            <summary>
                Container for a possible target output.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Cluster.PossibleTarget.Position">
            <summary>
                Gets or sets the unit position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Cluster.PossibleTarget.Unit">
            <summary>
                Gets or sets the unit.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Health">
            <summary>
                Health Prediction class for prediction of health of units.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.ActiveAttacks">
            <summary>
                List of Active Attacks.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.lastTick">
            <summary>
                Last Tick Update
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Health.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Health" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Health.GetAggroTurret(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Return the Attacking turret.
            </summary>
            <param name="minion">
                The minion.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.GetPrediction(LeagueSharp.Obj_AI_Base,System.Int32,System.Int32,LeagueSharp.SDK.Enumerations.HealthPredictionType)">
            <summary>
                Returns the health prediction, either default or simulated
            </summary>
            <param name="unit"><see cref="T:LeagueSharp.Obj_AI_Base" /> unit</param>
            <param name="time">The time in milliseconds</param>
            <param name="delay">An optional delay</param>
            <param name="type"><see cref="T:LeagueSharp.SDK.Enumerations.HealthPredictionType" /> type</param>
            <returns>
                The <see cref="T:System.Single" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.HasMinionAggro(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Determines whether the specified minion has minion aggro.
            </summary>
            <param name="minion">The minion.</param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.HasTurretAggro(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Determines whether the specified minion has turret aggro.
            </summary>
            <param name="minion">The minion</param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.TurretAggroStartTick(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Return the starttick of the attacking turret.
            </summary>
            <param name="minion">
                The minion.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.GetPredictionDefault(LeagueSharp.Obj_AI_Base,System.Int32,System.Int32)">
            <summary>
                Calculates the default prediction of the unit.
            </summary>
            <param name="unit">
                The unit
            </param>
            <param name="time">
                The time
            </param>
            <param name="delay">
                The delay
            </param>
            <returns>
                The <see cref="T:System.Single" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.GetPredictionSimulated(LeagueSharp.Obj_AI_Base,System.Int32)">
            <summary>
                Calculates the simulated prediction of the unit.
            </summary>
            <param name="unit">
                The unit
            </param>
            <param name="time">
                The time
            </param>
            <returns>
                The <see cref="T:System.Single" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Health.OnGameObjectDelete(LeagueSharp.GameObject,System.EventArgs)">
            <summary>
                GameObject on delete subscribed event function.
            </summary>
            <param name="sender">
                <see cref="T:LeagueSharp.GameObject" /> sender
            </param>
            <param name="args">
                <see cref="T:System.EventArgs" /> event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Health.OnGameUpdate(System.EventArgs)">
            <summary>
                Game Tick which is called by the game update event.
            </summary>
            <param name="args">
                <see cref="T:System.EventArgs" /> event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Health.OnObjAiBaseDoCast(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                Obj_AI_Base on DoCast subscribed event function.
            </summary>
            <param name="sender">
                <see cref="T:LeagueSharp.Obj_AI_Base" /> sender
            </param>
            <param name="args">
                <see cref="T:LeagueSharp.GameObjectProcessSpellCastEventArgs" /> event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Health.OnObjAiBaseProcessSpellCast(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                Process Spell Cast subscribed event function.
            </summary>
            <param name="sender"><see cref="T:LeagueSharp.Obj_AI_Base" /> sender</param>
            <param name="args">Processed Spell Cast Data</param>
        </member>
        <member name="M:LeagueSharp.SDK.Health.OnSpellbookStopCast(LeagueSharp.Spellbook,LeagueSharp.SpellbookStopCastEventArgs)">
            <summary>
                Spell-book on casting stop subscribed event function.
            </summary>
            <param name="sender">
                <see cref="T:LeagueSharp.Spellbook" /> sender
            </param>
            <param name="args">Spell-book Stop Cast Data</param>
        </member>
        <member name="T:LeagueSharp.SDK.Health.PredictedDamage">
            <summary>
                Predicted Damage Container
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.AnimationTime">
            <summary>
                Animation Time
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.Damage">
            <summary>
                The Damage
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.Delay">
            <summary>
                Delay before damage impact
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.ProjectileSpeed">
            <summary>
                Projectile Speed
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.Source">
            <summary>
                The Source
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.StartTick">
            <summary>
                Start Tick
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Health.PredictedDamage.Target">
            <summary>
                The Target
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Health.PredictedDamage.#ctor(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Int32,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Health.PredictedDamage" /> class.
            </summary>
            <param name="source">
                Damage Source
            </param>
            <param name="target">
                Damage Target
            </param>
            <param name="startTick">
                Starting Game Tick
            </param>
            <param name="delay">
                Delay of damage impact
            </param>
            <param name="animationTime">
                Animation time
            </param>
            <param name="projectileSpeed">
                Projectile Speed
            </param>
            <param name="damage">
                The Damage
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Movement">
            <summary>
                Calculates a prediction based off data values given by the source input and converts it into a output prediction
                for movement, containing spell casting position and unit position in 3D-Space.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPrediction(LeagueSharp.Obj_AI_Base,System.Single)">
            <summary>
                Returns Calculated Prediction based off given data values.
            </summary>
            <param name="unit">Prediction Based Unit</param>
            <param name="delay">Prediction Delay</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPrediction(LeagueSharp.Obj_AI_Base,System.Single,System.Single)">
            <summary>
                Returns Calculated Prediction based off given data values.
            </summary>
            <param name="unit">Prediction Based Unit</param>
            <param name="delay">Prediction Delay</param>
            <param name="radius">Prediction Radius</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPrediction(LeagueSharp.Obj_AI_Base,System.Single,System.Single,System.Single)">
            <summary>
                Returns Calculated Prediction based off given data values.
            </summary>
            <param name="unit">Prediction Based Unit</param>
            <param name="delay">Prediction Delay</param>
            <param name="radius">Prediction Radius</param>
            <param name="speed">Prediction Speed</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns Calculated Prediction based off given data values.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetDashingPrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns Dashing Prediction
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns><see cref="T:LeagueSharp.SDK.PredictionOutput" /> output</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetImmobilePrediction(LeagueSharp.SDK.PredictionInput,System.Double)">
            <summary>
                Returns Immobile Prediction
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <param name="remainingImmobileT">Remaining Immobile Time</param>
            <returns><see cref="T:LeagueSharp.SDK.PredictionOutput" /> output</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPositionOnPath(LeagueSharp.SDK.PredictionInput,System.Collections.Generic.List{SharpDX.Vector2},System.Single)">
            <summary>
                Get Position on Unit's Path.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <param name="path">Path in Vector2 List</param>
            <param name="speed">Unit Speed</param>
            <returns><see cref="T:LeagueSharp.SDK.PredictionOutput" /> output</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetPrediction(LeagueSharp.SDK.PredictionInput,System.Boolean,System.Boolean)">
            <summary>
                Returns Calculated Prediction based off given data values.
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <param name="ft">Add Delay</param>
            <param name="checkCollision">Check Collision</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.GetStandardPrediction(LeagueSharp.SDK.PredictionInput)">
            <summary>
                Returns Standard Prediction
            </summary>
            <param name="input">
                <see cref="T:LeagueSharp.SDK.PredictionInput" /> input
            </param>
            <returns><see cref="T:LeagueSharp.SDK.PredictionOutput" /> output</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Movement.UnitIsImmobileUntil(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns if the unit is immobile and immobile time.
            </summary>
            <param name="unit">The unit</param>
            <returns>Immobile Time left</returns>
        </member>
        <member name="T:LeagueSharp.SDK.PredictionInput">
            <summary>
                Prediction Input, collect data values from the input source of the requested prediction to execute a movement
                prediction for both a unit position and a skill-shot casting area which is then returned as a
                <see cref="T:LeagueSharp.SDK.PredictionOutput" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.PredictionInput.from">
            <summary>
                From source location on a 3D-Space.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.PredictionInput.rangeCheckFrom">
            <summary>
                Range check from location on a 3D-Space.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.AoE">
            <summary>
                Gets or sets a value indicating whether prediction should include Area of Effect calculations to hit as many as
                targets possible.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Collision">
            <summary>
                Gets or sets a value indicating whether input source has a collision flag to collide with other objects before
                reaching the target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.CollisionObjects">
            <summary>
                Gets or sets the flags that contains the unit types that the skill-shot can collide with.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Delay">
            <summary>
                Gets or sets the skill-shot delay in seconds.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.From">
            <summary>
                Gets or sets the position from where the skill-shot missile gets fired.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Radius">
            <summary>
                Gets or sets the skill-shot width's radius or the angle in case of the cone skill shots.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Range">
            <summary>
                Gets or sets the skill-shot range in units.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.RangeCheckFrom">
            <summary>
                Gets or sets the position from where the range is checked.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Speed">
            <summary>
                Gets or sets the skill-shot speed in units per second.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Type">
            <summary>
                Gets or sets the skill-shot type.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.Unit">
            <summary>
                Gets or sets the unit that the prediction will made for.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.UseBoundingRadius">
            <summary>
                Gets or sets a value indicating whether use bounding radius.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionInput.RealRadius">
            <summary>
                Gets the the calculated real radius of the unit.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.PredictionInput.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.PredictionOutput">
            <summary>
                Prediction Output, contains the calculated data from the source prediction input.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.PredictionOutput.castPosition">
            <summary>
                Cast Predicted Position data in a 3D-Space given value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.PredictionOutput.unitPosition">
            <summary>
                Unit Predicted Position data ina a 3D-Space given value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.AoeHitCount">
            <summary>
                Gets or sets the data value which is declared for output data after calculation of how many Area-of-Effect
                targets will get hit by the prediction input source.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.AoeTargetsHit">
            <summary>
                Gets or sets the list of the targets that the spell will hit (only if Area of Effect was enabled).
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.AoeTargetsHitCount">
            <summary>
                Gets the number of targets the skill-shot will hit (only if Area of Effect was enabled).
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.CastPosition">
            <summary>
                Gets or sets the position where the skill-shot should be casted to increase the accuracy.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.CollisionObjects">
            <summary>
                Gets or sets the collision objects list which the input source would collide with.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.Hitchance">
            <summary>
                Gets or sets the hit chance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.Input">
            <summary>
                Gets or sets the input.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.PredictionOutput.UnitPosition">
            <summary>
                Gets or sets where the unit is going to be when the skill-shot reaches his position.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.GamePath">
            <summary>
                Path class, contains path tracker and a container
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.GamePath.PathTracker">
            <summary>
                Path Tracker class, tracks a given path.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GamePath.PathTracker.MaxTime">
            <summary>
                Maximum time of a path track.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.GamePath.PathTracker.StoredPaths">
            <summary>
                Stored Path list
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.GamePath.PathTracker.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.GamePath.PathTracker" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.GamePath.PathTracker.GetCurrentPath(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns the current path of a specific unit.
            </summary>
            <param name="unit">The specific unit</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.GamePath.StoredPath" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.GamePath.PathTracker.GetMeanSpeed(LeagueSharp.Obj_AI_Base,System.Double)">
            <summary>
                Returns the Root-mean-squared-speed of the specific unit.
            </summary>
            <param name="unit">The specific unit</param>
            <param name="maxT">Max time</param>
            <returns>The mean speed</returns>
        </member>
        <member name="M:LeagueSharp.SDK.GamePath.PathTracker.GetStoredPaths(LeagueSharp.Obj_AI_Base,System.Double)">
            <summary>
                Returns the stored paths from the list for a specific unit.
            </summary>
            <param name="unit">The specific unit</param>
            <param name="maxT">Max time</param>
            <returns>List of <see cref="T:LeagueSharp.SDK.GamePath.StoredPath" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.GamePath.PathTracker.Obj_AI_Hero_OnNewPath(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectNewPathEventArgs)">
            <summary>
                On New Path subscribed event function.
            </summary>
            <param name="sender"><see cref="T:LeagueSharp.Obj_AI_Base" /> sender.</param>
            <param name="args">Path Data</param>
        </member>
        <member name="T:LeagueSharp.SDK.GamePath.StoredPath">
            <summary>
                Stored Path Container, contains a stored path
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.EndPoint">
            <summary>
                Gets the end point.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.Path">
            <summary>
                Gets or sets the path.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.StartPoint">
            <summary>
                Gets the start point.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.Tick">
            <summary>
                Gets or sets the tick.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.Time">
            <summary>
                Gets the current tick of the path.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.GamePath.StoredPath.WaypointCount">
            <summary>
                Gets the number of waypoints within the path.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal">
            <summary>
                A signal.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.#ctor(LeagueSharp.SDK.Signals.Signal.OnRaisedDelegate,LeagueSharp.SDK.Signals.Signal.SignalWaverDelegate,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Signals.Signal" /> class.
            </summary>
            <param name="signalRaised">
                The signal raised
            </param>
            <param name="signalWaver">
                The signal waver
            </param>
            <param name="expiration">
                The expiration
            </param>
            <param name="properties">
                The properties
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.OnEnabledStatusChangedDelegate">
            <summary>
                Raised delegate.
            </summary>
            <param name="sender">The Sender</param>
            <param name="e">The Raised Event Data</param>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.OnRaisedDelegate">
            <summary>
                Raised delegate.
            </summary>
            <param name="sender">The Sender</param>
            <param name="e">The Raised Event Data</param>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.OnSignalRaisedDelegate">
            <summary>
                Signal raised delegate.
            </summary>
            <param name="sender">The Sender</param>
            <param name="e">The Signal</param>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.SignalWaverDelegate">
            <summary>
                The delegate for <see cref="P:LeagueSharp.SDK.Signals.Signal.SignalWaver" />
            </summary>
            <param name="signal">The signal.</param>
            <returns>True if the signal should be waved.</returns>
        </member>
        <member name="E:LeagueSharp.SDK.Signals.Signal.OnSignalRaised">
            <summary>
                Occurs when any signal is raised.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Signals.Signal.OnEnabledStatusChanged">
            <summary>
                Occurs when <see cref="P:LeagueSharp.SDK.Signals.Signal.Enabled" /> is changed.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Signals.Signal.OnExpired">
            <summary>
                Occurs when this signal expires.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.Signals.Signal.OnRaised">
            <summary>
                Occurs when this signal is raised.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.Enabled">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.Signals.Signal" /> is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.Expiration">
            <summary>
                Gets or sets the expiration.
            </summary>
            <value>
                The expiration.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.Expired">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.Signals.Signal" /> is expired.
            </summary>
            <value>
                <c>true</c> if expired; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.LastSignaled">
            <summary>
                Gets or sets the last time the signal was signaled.
            </summary>
            <value>
                The last time the signal was signaled.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.Properties">
            <summary>
                Gets the properties. Useful for attaching things like state, etc.
            </summary>
            <value>
                The properties.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.Raised">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.Signals.Signal" /> is raised.
            </summary>
            <value>
                <c>true</c> if raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.SignalWaver">
            <summary>
                Gets or sets the signal delegate.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.CalledExpired">
            <summary>
                Gets or sets a value indicating whether called expired events.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Create(LeagueSharp.SDK.Signals.Signal.OnRaisedDelegate,LeagueSharp.SDK.Signals.Signal.SignalWaverDelegate,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Creates an instance of the <see cref="T:LeagueSharp.SDK.Signals.Signal" /> class.
            </summary>
            <param name="onRaised">The delegate to call when this signal is raised.</param>
            <param name="signalWaver">The function that returns <c>true</c> when this signal should be waved.</param>
            <param name="expiration">The expiration of this signal.</param>
            <param name="defaultProperties">A dictionary that contents will be dumped into <see cref="P:LeagueSharp.SDK.Signals.Signal.Properties" /></param>
            <returns>The <see cref="T:LeagueSharp.SDK.Signals.Signal" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Disable">
            <summary>
                Disables this signal.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Enable">
            <summary>
                Enables this signal.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Raise(System.String,System.Object[])">
            <summary>
                Raises the signal.
            </summary>
            <param name="reason">The reason.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Raise(System.Exception)">
            <summary>
                Raises the signal.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.Reset">
            <summary>
                Resets the signal.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.TriggerEnabledStatusChanged(System.Object,System.Boolean)">
            <summary>
                Triggers the enabled status changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="enabled">Signal enabled or not..</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.TriggerOnExipired(System.Object)">
            <summary>
                Triggers the on expired event.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.TriggerSignal(System.Object,System.String)">
            <summary>
                Triggers the signal.
            </summary>
            <param name="sender">The sender.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.EnabledStatusChangedArgs">
            <summary>
                Raised Arguments.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.EnabledStatusChangedArgs.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Signals.Signal.EnabledStatusChangedArgs" /> class.
            </summary>
            <param name="status">Signal is enabled or not.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.EnabledStatusChangedArgs.Status">
            <summary>
                Gets or sets a value indicating whether the status.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.GlobalSignalRaisedArgs">
            <summary>
                Arguments for the <see cref="E:LeagueSharp.SDK.Signals.Signal.OnSignalRaised" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.GlobalSignalRaisedArgs.#ctor(System.String,LeagueSharp.SDK.Signals.Signal)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Signals.Signal.GlobalSignalRaisedArgs" /> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.GlobalSignalRaisedArgs.Reason">
            <summary>
                Gets or sets the reason why the signal was raised..
            </summary>
            <value>
                The reason.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.GlobalSignalRaisedArgs.Signal">
            <summary>
                Gets or sets the signal that was raised.
            </summary>
            <value>
                The signal.
            </value>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.Signal.RaisedArgs">
            <summary>
                Raised Arguments.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.Signal.RaisedArgs.#ctor(System.String,LeagueSharp.SDK.Signals.Signal)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Signals.Signal.RaisedArgs" /> class.
            </summary>
            <param name="reason">
                The Reason
            </param>
            <param name="signal">
                The Signal
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.RaisedArgs.Reason">
            <summary>
                Gets or sets the raised reason.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Signals.Signal.RaisedArgs.Signal">
            <summary>
                Gets or sets the signal.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Signals.SignalManager">
            <summary>
                Manages Signals.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Signals.SignalManager.Signals">
            <summary>
                Signals list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.SignalManager.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Signals.SignalManager" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.SignalManager.AddSignal(LeagueSharp.SDK.Signals.Signal)">
            <summary>
                Adds a signal.
            </summary>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.SignalManager.RemoveSignal(LeagueSharp.SDK.Signals.Signal)">
            <summary>
                Removes a signal.
            </summary>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Signals.SignalManager.Game_OnUpdate(System.EventArgs)">
            <summary>
                Game Update tick subscribe.
            </summary>
            <param name="args">
                Event data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.distance">
            <summary>
                Distance for the element which get moved
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.mode">
            <summary>
                Defines which Slide method will be used to calculate the new element position
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.endValue">
            <summary>
                Final Rectangle of the element which will get slided
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.startValue">
            <summary>
                Start Rectangle of the element which will get slided
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode,System.Double,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="distance">Distance for the defined animation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode,System.Double,System.Single,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="distance">Distance for the defined animation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultPos">Default Position of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode">
            <summary>
                Contains 4 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode.Left">
            <summary>
                Adjust to left
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode.Top">
            <summary>
                Adjust to top
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode.Right">
            <summary>
                Adjust to right
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Mode.Bottom">
            <summary>
                Adjust to bottom
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Start(SharpDX.Vector2)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Position of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Bottom(System.Double,SharpDX.Vector2,System.Double,System.Double)">
            <summary>
                Moves element to bottom
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Position</param>
            <param name="dist">Distance</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Calculate(System.Double,SharpDX.Vector2,System.Double,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dist">Distance</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Left(System.Double,SharpDX.Vector2,System.Double,System.Double)">
            <summary>
                Moves element to left
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Position</param>
            <param name="dist">Distance</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Right(System.Double,SharpDX.Vector2,System.Double,System.Double)">
            <summary>
                Moves element to right
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Position</param>
            <param name="dist">Distance</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationSlide.Top(System.Double,SharpDX.Vector2,System.Double,System.Double)">
            <summary>
                Moves element to top
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Position</param>
            <param name="dist">Distance</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.mode">
            <summary>
                Defines which Blind method will be used to calculate the new element rectangle
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.endValue">
            <summary>
                Final Rectangle of the element which will get blinded
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.startValue">
            <summary>
                Start Rectangle of the element which will get blinded
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode,System.Single,SharpDX.Rectangle)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultRect">Default Rectangle of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode">
            <summary>
                Contains 4 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode.VerticalDecrease">
            <summary>
                Vertically decrease height to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode.VerticalIncrease">
            <summary>
                Vertically increase height to max height
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode.HorizontalDecrease">
            <summary>
                Horizontally decrease width to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Mode.HorizontalIncrease">
            <summary>
                Horizontally increase width to max width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Start(SharpDX.Rectangle)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Rectangle of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.Calculate(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.HorizontalDecrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Width until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.HorizontalIncrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Increases the Width from 0 to specified width
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.VerticalDecrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Height until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationBlind.VerticalIncrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Increases the Height from 0 to specified height
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationResize">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.mode">
            <summary>
                Defines which Resize method will be used to calculate the new element rectangle
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.endValue">
            <summary>
                Final Rectangle of the element which will get resized
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.startValue">
            <summary>
                Start Rectangle of the element which will get resized
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationResize" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Mode,System.Single,SharpDX.Rectangle)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationResize" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultRect">Default Rectangle of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Mode">
            <summary>
                Contains 1 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Mode.Resize">
            <summary>
                Resizes Width and Height
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Start(SharpDX.Rectangle,SharpDX.Rectangle)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Rectangle of the element</param>
            <param name="endVal">Final Rectangle of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Calculate(System.Double,SharpDX.Rectangle,SharpDX.Rectangle,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationResize.Resize(System.Double,SharpDX.Rectangle,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Width / Height until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Starting Rectangle</param>
            <param name="endVal">Final Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationShake">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.distance">
            <summary>
                Defines the distance from the start initial point to shake
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.mode">
            <summary>
                Defines which Shake method will be used to calculate the new element rectangle
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.shakeTimes">
            <summary>
                How many times the element should get shaked
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.endValue">
            <summary>
                Final Rectangle of the element which will get shaked
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.startValue">
            <summary>
                Start Rectangle of the element which will get shaked
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Mode,System.Double,System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationShake" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="distance">Shaking distance from main point</param>
            <param name="shakeTimes">Shake times until it stops</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Mode,System.Double,System.Int32,System.Single,SharpDX.Rectangle)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationShake" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="distance">Shaking distance from main point</param>
            <param name="shakeTimes">Shake times until it stops</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultRect">Default Rectangle of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Mode">
            <summary>
                Contains 2 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Mode.Horizontal">
            <summary>
                Horizontal shake
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Mode.Vertical">
            <summary>
                Vertical shake
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Start(SharpDX.Rectangle)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Rectangle of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Calculate(System.Double,SharpDX.Rectangle,System.Double,System.Int32,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dist">Distance</param>
            <param name="times">Shake Times</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Horizontal(System.Double,SharpDX.Rectangle,System.Double,System.Int32,System.Double)">
            <summary>
                Shakes in horizontal position
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Color</param>
            <param name="dist">Distance</param>
            <param name="times">Shake Times</param>
            <param name="dur">Duration</param>
            <returns>New calculated color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationShake.Vertical(System.Double,SharpDX.Rectangle,System.Double,System.Int32,System.Double)">
            <summary>
                Shakes in vertical position
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Color</param>
            <param name="dist">Distance</param>
            <param name="times">Shake Times</param>
            <param name="dur">Duration</param>
            <returns>New calculated color</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationScale">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.mode">
            <summary>
                Defines which Clip method will be used to calculate the new element rectangle
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.endValue">
            <summary>
                Final Rectangle of the element which will get scaled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.startValue">
            <summary>
                Start Rectangle of the element which will get scaled
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationScale" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Mode,System.Single,SharpDX.Rectangle)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationScale" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultRect">Default Rectangle of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Mode">
            <summary>
                Contains 2 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Mode.ScaleDecrease">
            <summary>
                Decrease height / width to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Mode.ScaleIncrease">
            <summary>
                Increase height / width to max height / width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Start(SharpDX.Rectangle)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Rectangle of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.Calculate(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.ScaleDecrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Width / Height until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationScale.ScaleIncrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Increases the Width / Height from 0 to specified width / height
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationClip">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.mode">
            <summary>
                Defines which Clip method will be used to calculate the new element rectangle
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.endValue">
            <summary>
                Final Rectangle of the element which will get clipped
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.startValue">
            <summary>
                Start Rectangle of the element which will get clipped
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationClip" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode,System.Single,SharpDX.Rectangle)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationClip" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultRect">Default Rectangle of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode">
            <summary>
                Contains 4 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode.VerticalDecrease">
            <summary>
                Vertically decrease height to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode.VerticalIncrease">
            <summary>
                Vertically increase height to max height
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode.HorizontalDecrease">
            <summary>
                Horizontally decrease width to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Mode.HorizontalIncrease">
            <summary>
                Horizontally increase width to max width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.GetCurrentValue">
            <summary>
                Returns the current rectangle of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Start(SharpDX.Rectangle)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Rectangle of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.Calculate(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.HorizontalDecrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Width until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.HorizontalIncrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Increases the Width from 0 to specified width
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.VerticalDecrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Decreases the Height until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationClip.VerticalIncrease(System.Double,SharpDX.Rectangle,System.Double)">
            <summary>
                Increases the Height from 0 to specified height
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Rectangle</param>
            <param name="dur">Duration</param>
            <returns>New calculated rectangle</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.mode">
            <summary>
                Defines which Drop method will be used to calculate the new element AnimationDropData
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.endValue">
            <summary>
                Final AnimationDropData of the element which will get dropped
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.startValue">
            <summary>
                Start AnimationDropData of the element which will get dropped
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode,System.Single,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultAnimDropData">Default AnimationDropData of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode">
            <summary>
                Contains 4 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode.VerticalDecrease">
            <summary>
                Vertically decrease height to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode.VerticalIncrease">
            <summary>
                Vertically increase height to max height
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode.HorizontalDecrease">
            <summary>
                Horizontally decrease width to 0
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Mode.HorizontalIncrease">
            <summary>
                Horizontally increase width to max width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.GetCurrentValue">
            <summary>
                Returns the current AnimationDropData of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Start(LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting AnimationDropData of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.Calculate(System.Double,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.HorizontalDecrease(System.Double,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData,System.Double)">
            <summary>
                Decreases the Width until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">AnimationDropData</param>
            <param name="dur">Duration</param>
            <returns>New calculated AnimationDropData</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.HorizontalIncrease(System.Double,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData,System.Double)">
            <summary>
                Increases the Width from 0 to specified width
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">AnimationDropData</param>
            <param name="dur">Duration</param>
            <returns>New calculated AnimationDropData</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.VerticalDecrease(System.Double,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData,System.Double)">
            <summary>
                Decreases the Height until it reaches 0
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">AnimationDropData</param>
            <param name="dur">Duration</param>
            <returns>New calculated AnimationDropData</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.VerticalIncrease(System.Double,LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData,System.Double)">
            <summary>
                Increases the Height from 0 to specified height
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">AnimationDropData</param>
            <param name="dur">Duration</param>
            <returns>New calculated AnimationDropData</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData">
            <summary>
                Data class for <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop" /> class to save <see cref="T:SharpDX.Rectangle" /> and
                <see cref="T:SharpDX.ColorBGRA" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData.Rectangle">
            <summary>
                Used to save rectangle data
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData.#ctor(SharpDX.Rectangle,SharpDX.ColorBGRA)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Core.UI.Animations.AnimationDrop.AnimationDropData.Color">
            <summary>
                Used to save color data
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationEase">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.mode">
            <summary>
                Defines which Ease method will be used to calculate the new element position
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.endPosition">
            <summary>
                End Position of the element which will get moved
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.startPosition">
            <summary>
                Start Position of the element which will get moved
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationEase" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode,System.Single,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationEase" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultPos">Default Position of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode">
            <summary>
                Contains 41 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.Linear">
            <summary>
                Linear calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BackEaseIn">
            <summary>
                BackEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BackEaseOut">
            <summary>
                BackEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BackEaseInOut">
            <summary>
                BackEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BackEaseOutIn">
            <summary>
                BackEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BounceEaseIn">
            <summary>
                BounceEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BounceEaseOut">
            <summary>
                BounceEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BounceEaseInOut">
            <summary>
                BounceEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.BounceEaseOutIn">
            <summary>
                BounceEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CircEaseIn">
            <summary>
                CircEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CircEaseOut">
            <summary>
                CircEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CircEaseInOut">
            <summary>
                CircEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CircEaseOutIn">
            <summary>
                CircEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CubicEaseIn">
            <summary>
                CubicEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CubicEaseOut">
            <summary>
                CubicEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CubicEaseInOut">
            <summary>
                CubicEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.CubicEaseOutIn">
            <summary>
                CubicEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ElasticEaseIn">
            <summary>
                ElasticEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ElasticEaseOut">
            <summary>
                ElasticEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ElasticEaseInOut">
            <summary>
                ElasticEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ElasticEaseOutIn">
            <summary>
                ElasticEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ExpoEaseIn">
            <summary>
                ExpoEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ExpoEaseOut">
            <summary>
                ExpoEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ExpoEaseInOut">
            <summary>
                ExpoEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.ExpoEaseOutIn">
            <summary>
                ExpoEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuadEaseIn">
            <summary>
                QuadEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuadEaseOut">
            <summary>
                QuadEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuadEaseInOut">
            <summary>
                QuadEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuadEaseOutIn">
            <summary>
                QuadEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuartEaseIn">
            <summary>
                QuartEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuartEaseOut">
            <summary>
                QuartEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuartEaseInOut">
            <summary>
                QuartEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuartEaseOutIn">
            <summary>
                QuartEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuintEaseIn">
            <summary>
                QuintEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuintEaseOut">
            <summary>
                QuintEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuintEaseInOut">
            <summary>
                QuintEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.QuintEaseOutIn">
            <summary>
                QuintEaseOutIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.SineEaseIn">
            <summary>
                SineEaseIn calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.SineEaseOut">
            <summary>
                SineEaseOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.SineEaseInOut">
            <summary>
                SineEaseInOut calculation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Mode.SineEaseOutIn">
            <summary>
                SineEaseOutIn calculation
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.GetCurrentPosition">
            <summary>
                Returns the current position of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Start(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Starts the animation
                After start you can get the current value by calling <see cref="P:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.GetCurrentPosition" /> method
            </summary>
            <param name="startPos">Starting Position of the element</param>
            <param name="endPos">Final Position of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BackEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Back Ease In
                Overshooting cubic easing (s+1)*t^3 - s*t^2
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BackEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Back Ease In Out
                Overshooting cubic easing (s+1)*t^3 - s*t^2
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BackEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Back Ease Out
                Overshooting cubic easing (s+1)*t^3 - s*t^2
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BackEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Back Ease Out In
                Overshooting cubic easing (s+1)*t^3 - s*t^2
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BounceEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Bounce Ease In
                Exponentially decaying parabolic bounce
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BounceEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Bounce Ease In Out
                Exponentially decaying parabolic bounce
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BounceEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Bounce Ease Out
                Exponentially decaying parabolic bounce
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.BounceEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Bounce Ease Out In
                Exponentially decaying parabolic bounce
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.Calculate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CircEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Circular Ease In
                Circular (sqrt(1-t^2))
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CircEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Circular Ease In Out
                Circular (sqrt(1-t^2))
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CircEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Circular Ease Out
                Circular (sqrt(1-t^2))
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CircEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Circular Ease Out In
                Circular (sqrt(1-t^2))
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CubicEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Cubic Ease In
                Cubic (t^3)
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CubicEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Cubic Ease In Out
                Cubic (t^3)
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CubicEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Cubic Ease Out
                Cubic (t^3)
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.CubicEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Cubic Ease Out In
                Cubic (t^3)
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ElasticEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Elastic Ease In
                Exponentially decaying sine wave
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ElasticEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Elastic Ease In Out
                Exponentially decaying sine wave
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ElasticEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Elastic Ease Out
                Exponentially decaying sine wave
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ElasticEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Elastic Ease Out In
                Exponentially decaying sine wave
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ExpoEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Exponential Ease In
                Exponential (2^t)
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ExpoEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Exponential Ease In Out
                Exponential (2^t)
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ExpoEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Exponential Ease Out
                Exponential (2^t)
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.ExpoEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Exponential Ease Out In
                Exponential (2^t)
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuadEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quadratic Ease In
                Quadratic (t^2)
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuadEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quadratic Ease In Out
                Quadratic (t^2)
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuadEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quadratic Ease Out
                Quadratic (t^2)
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuadEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quadratic Ease Out In
                Quadratic (t^2)
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuartEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quartic Ease In
                Quartic (t^4)
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuartEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quartic Ease In Out
                Quartic (t^4)
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuartEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quartic Ease Out
                Quartic (t^4)
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuartEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quartic Ease Out In
                Quartic (t^4)
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuintEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quintic Ease In
                Quintic (t^5)
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuintEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quintic Ease In Out
                Quintic (t^5)
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuintEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quintic Ease Out
                Quintic (t^5)
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.QuintEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Quintic Ease Out In
                Quintic (t^5)
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.SineEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Sinusoidal Ease In
                Sinusoidal (sin(t))
                Accelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.SineEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Sinusoidal Ease In Out
                Sinusoidal (sin(t))
                Accelerating from zero velocity until half then decelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.SineEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Sinusoidal Ease Out
                Sinusoidal (sin(t))
                Decelerating from zero velocity
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationEase.SineEaseOutIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Easing equation: Sinusoidal Ease Out In
                Sinusoidal (sin(t))
                Decelerating from zero velocity until half then accelerating
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.pulsateTimes">
            <summary>
                How many times it should pulsate
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.endValue">
            <summary>
                Final Color of the element which will get pulsated
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.startValue">
            <summary>
                Start Color of the element which will get pulsated
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.#ctor(System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate" /> class.
            </summary>
            <param name="pulsateTimes">Pulsationtimes</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.#ctor(System.Int32,System.Single,SharpDX.ColorBGRA)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate" /> class.
            </summary>
            <param name="pulsateTimes">Pulsationtimes</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultCol">Default Color of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.GetCurrentValue">
            <summary>
                Returns the current color of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.Start(SharpDX.ColorBGRA)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Color of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.Calculate(System.Double,System.Int32,SharpDX.ColorBGRA,System.Double)">
            <summary>
                Calculates the value
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="times">Pulsate times</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationPulsate.Pulsate(System.Double,System.Int32,SharpDX.ColorBGRA,System.Double)">
            <summary>
                Changes the transparency of a color to 100%
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="times">Pulsate times</param>
            <param name="val">Color</param>
            <param name="dur">Duration</param>
            <returns>New calculated color</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationFade">
            <summary>
                A implementation of a <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.mode">
            <summary>
                Defines which Fade method will be used to calculate the new element color
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.endValue">
            <summary>
                Final Color of the element which will get faded
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.startValue">
            <summary>
                Start Color of the element which will get faded
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Mode,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationFade" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.#ctor(LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Mode,System.Single,SharpDX.ColorBGRA)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.AnimationFade" /> class.
            </summary>
            <param name="mode">Selected mode for calculation</param>
            <param name="duration">Selected duration for the defined animation</param>
            <param name="defaultCol">Default Color of the element</param>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Mode">
            <summary>
                Contains 2 Modes
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Mode.FadeIn">
            <summary>
                FadeIn Transparency 100%
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Mode.FadeOut">
            <summary>
                FadeIn Transparency 0%
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.GetCurrentValue">
            <summary>
                Returns the current color of the element
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Start(SharpDX.ColorBGRA)">
            <summary>
                Starts the animation
                After start you can get the current value in <see cref="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.GetCurrentValue" /> method
            </summary>
            <param name="startVal">Starting Color of the element</param>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.Calculate(System.Double,SharpDX.ColorBGRA,System.Double)">
            <summary>
                Calculates the value of the specified mode
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>Returns the calculated value of the specified mode</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.FadeIn(System.Double,SharpDX.ColorBGRA,System.Double)">
            <summary>
                Changes the transparency of a color to 100%
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Color</param>
            <param name="dur">Duration</param>
            <returns>New calculated color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.AnimationFade.FadeOut(System.Double,SharpDX.ColorBGRA,System.Double)">
            <summary>
                Changes the transparency of a color to 0%
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="val">Color</param>
            <param name="dur">Duration</param>
            <returns>New calculated color</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Core.UI.Animations.Animation">
            <summary>
                Animation base
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.Animation.duration">
            <summary>
                Duration which will be used for the specified mode
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Core.UI.Animations.Animation.startTime">
            <summary>
                Start time of a start method
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.Animation.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Core.UI.Animations.Animation" /> class.
            </summary>
            <param name="duration">Selected duration for the defined animation</param>
        </member>
        <member name="P:LeagueSharp.SDK.Core.UI.Animations.Animation.IsWorking">
            <summary>
                Is caluclating a new value
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.Animation.Stop">
            <summary>
                Instant changes the value to the end value
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.Animation.InverseLinear(System.Double,System.Double,System.Double)">
            <summary>
                Calculates in a inverse linear manner
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Core.UI.Animations.Animation.Linear(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Calculates in a linear manner
            </summary>
            <param name="curTime">Current Time (seconds)</param>
            <param name="startVal">Start Value</param>
            <param name="endVal">Final Value</param>
            <param name="dur">Duration of the animation</param>
            <returns>New calculated value</returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.AMenuComponent">
            <summary>
                Abstract build of a menu component.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.AMenuComponent.defaultThemeHandler">
            <summary>
                The default theme handler.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.AMenuComponent.currentTheme">
            <summary>
                The current theme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.AMenuComponent.menuWidthCached">
            <summary>
                Local menu width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.AMenuComponent.resetWidth">
            <summary>
                True if MenuWidth should be recalculated.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.AMenuComponent.themeHandler">
            <summary>
                The theme handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> class.
            </summary>
            <param name="name">
                Menu Name
            </param>
            <param name="displayName">
                Menu Display Name
            </param>
            <param name="uniqueString">
                Unique string (ID)
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.AssemblyName">
            <summary>
                Gets or sets the name of the assembly.
            </summary>
            <value>
                The name of the assembly.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.DisplayName">
            <summary>
                Gets or sets the Menu Component Display Name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.MenuWidth">
            <summary>
                Gets or sets the width of the menu.
            </summary>
            <value>
                The width of the menu.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Name">
            <summary>
                Gets or sets the Menu Component Name
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Parent">
            <summary>
                Gets or sets the Parent Menu Component.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Path">
            <summary>
                Gets the path.
            </summary>
            <value>
                The path.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Position">
            <summary>
                Gets or sets the Component Position
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Root">
            <summary>
                Gets or sets a value indicating whether component is on the uppermost level.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Toggled">
            <summary>
                Gets or sets a value indicating whether the component is toggled.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.UniqueString">
            <summary>
                Gets or sets the unique string.
            </summary>
            <value>
                The unique string.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Visible">
            <summary>
                Gets or sets a value indicating whether the component is visible.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Width">
            <summary>
                Gets the width.
            </summary>
            <value>
                The width.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Handler">
            <summary>
                Gets the current handler for this AMenuComponent. If it is null it will ask the current theme to build a new one.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.AMenuComponent.Item(System.String)">
            <summary>
                Component Sub Object accessibility.
            </summary>
            <param name="name">
                Child Menu Component name
            </param>
            <returns>Child Menu Component of this component.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.op_Implicit(LeagueSharp.SDK.UI.AMenuComponent)~System.Boolean">
            <summary>
                AMenuComponent conversion operator to a <see cref="T:System.Boolean" />.
            </summary>
            <param name="component">
                The component
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.op_Implicit(LeagueSharp.SDK.UI.AMenuComponent)~SharpDX.ColorBGRA">
            <summary>
                AMenuComponent conversion operator to a <see cref="T:SharpDX.ColorBGRA" />.
            </summary>
            <param name="component">
                The component
            </param>
            <returns>
                The <see cref="T:SharpDX.ColorBGRA" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.op_Implicit(LeagueSharp.SDK.UI.AMenuComponent)~System.Drawing.Color">
            <summary>
                AMenuComponent conversion operator to a <see cref="T:SharpDX.Color" />.
            </summary>
            <param name="component">
                The component
            </param>
            <returns>
                The <see cref="T:System.Drawing.Color" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.op_Implicit(LeagueSharp.SDK.UI.AMenuComponent)~System.Int32">
            <summary>
                AMenuComponent conversion operator to a <see cref="T:System.Int32" />.
            </summary>
            <param name="component">
                The component
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.GetValue``1(System.String)">
            <summary>
                Get the value of a child with a certain name.
            </summary>
            <typeparam name="T">
                The type of MenuValue of this child.
            </typeparam>
            <param name="name">The name of the child.</param>
            <returns>The value that is attached to this Child.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.GetValue``1">
            <summary>
                Get the value of this component.
            </summary>
            <typeparam name="T">
                The type of MenuValue of this component.
            </typeparam>
            <returns>The value that is attached to this component.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.Load">
            <summary>
                Loads this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.OnDraw(SharpDX.Vector2)">
            <summary>
                Component Drawing callback.
            </summary>
            <param name="position">
                The position.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.OnUpdate">
            <summary>
                Component Update callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Component Windows Process Messages callback.
            </summary>
            <param name="args"><see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.OnPreReset">
            <summary>
                Component PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.OnPostReset">
            <summary>
                Component PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.ResetWidth">
            <summary>
                Resets the width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.Save">
            <summary>
                Saves this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AMenuComponent.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.ColorBox">
            <summary>
                The ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mHeight">
            <summary>
                Height of the ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mWidth">
            <summary>
                Width of the ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mDisabled">
            <summary>
                Colorbox disabled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mDragging">
            <summary>
                Is User dragging the slider
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mEDrawStyle">
            <summary>
                Defines the Display Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mHsl">
            <summary>
                Hue, Saturation, Lightness
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mMarkerColor">
            <summary>
                Marker Color
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mMarkerX">
            <summary>
                Marker X Position
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mMarkerY">
            <summary>
                Marker Y Position
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mPos">
            <summary>
                Position on the Screen
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.mRgb">
            <summary>
                Reg, Green, Blue
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.#ctor(System.Drawing.Size,System.Boolean)">
            <summary>
                Init the ColorBox
            </summary>
            <param name="size">The size of the new ColorBox</param>
            <param name="disabled"></param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.ColorBox.ColorBoxScrolledEventHandler">
            <summary>
                EventHandler for the event <see cref="E:LeagueSharp.SDK.UI.ColorBox.ColorBoxScrolled" />
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.UI.ColorBox.ColorBoxScrolled">
            <summary>
                The event which gets fired when the color get changed
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.ColorBox.EDrawStyle">
            <summary>
                The DrawStyle enum
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Hue">
            <summary>
                Hue Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Saturation">
            <summary>
                Saturation Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Brightness">
            <summary>
                Brightness Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Red">
            <summary>
                Red Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Green">
            <summary>
                Green Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.EDrawStyle.Blue">
            <summary>
                Blue Style
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.ColorBox.Orientation">
            <summary>
                The Orientation enum for the Gradient to draw
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.Orientation.Horizontal">
            <summary>
                Horizontal Orientation
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.ColorBox.Orientation.Vertical">
            <summary>
                Vertical Orientation
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.ColorBox.DrawStyle">
            <summary>
                The DrawStyle Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.ColorBox.Hsl">
            <summary>
                Hue, Saturation, Lightness Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.ColorBox.MarkerColor">
            <summary>
                The MarkerColor Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.ColorBox.Rgb">
            <summary>
                Red, Green, Blue Property
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.ColorBoxMouseDown(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the left mouse button is pressed
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.ColorBoxMouseMove(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is moved and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.ColorBoxMouseUp(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is released and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawControl(SharpDX.Vector2)">
            <summary>
                Draws the ColorBox
            </summary>
            <param name="newPos">Sets a new Position</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.GradientRect(System.Single,System.Single,System.Single,System.Single,SharpDX.ColorBGRA,SharpDX.ColorBGRA,LeagueSharp.SDK.UI.ColorBox.Orientation)">
            <summary>
                Draws a Gradient.
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="startCol">Starting Color</param>
            <param name="endCol">Ending Color</param>
            <param name="orientation">Orientation</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawBorder">
            <summary>
                Draws the Border around the ColorBox
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawContent">
            <summary>
                Draws in Content of the ColorBox
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawMarker(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Draws the Marker
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleBlue">
            <summary>
                Draws in Blue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleGreen">
            <summary>
                Draws in Green Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleHue">
            <summary>
                Draws in Hue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleLuminance">
            <summary>
                Draws in Luminance Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleRed">
            <summary>
                Draws in Red Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.DrawStyleSaturation">
            <summary>
                Draws in Saturation Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.GetColor(System.Int32,System.Int32)">
            <summary>
                Gets the Color of the given Position
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <returns>HSL Color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.ResetHslrgb">
            <summary>
                Resets the Color
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.ColorBox.ResetMarker(System.Boolean)">
            <summary>
                Resets the Marker
            </summary>
            <param name="redraw">Force Redraw</param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalColorSlider">
            <summary>
                The VerticalColorSlider
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mHeight">
            <summary>
                Height of the ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mWidth">
            <summary>
                Width of the ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mDisabled">
            <summary>
                VerticalColorSlider disabled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mDragging">
            <summary>
                Is User dragging the slider
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mEDrawStyle">
            <summary>
                Defines the Display Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mHsl">
            <summary>
                Hue, Saturation, Lightness
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.mRgb">
            <summary>
                Reg, Green, Blue
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.#ctor(System.Drawing.Size,System.Boolean)">
            <summary>
                Init the VerticalColorSlider
            </summary>
            <param name="size"></param>
            <param name="disabled"></param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalColorSlider.ColorSliderScrollEventHandler">
            <summary>
                EventHandler for the event <see cref="E:LeagueSharp.SDK.UI.VerticalColorSlider.ColorSliderScroll" />
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.UI.VerticalColorSlider.ColorSliderScroll">
            <summary>
                The event which gets fired when the color get changed
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle">
            <summary>
                The DrawStyle enum
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Hue">
            <summary>
                Hue Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Saturation">
            <summary>
                Saturation Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Brightness">
            <summary>
                Brightness Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Red">
            <summary>
                Red Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Green">
            <summary>
                Green Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalColorSlider.EDrawStyle.Blue">
            <summary>
                Blue Style
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalColorSlider.ArrowPos">
            <summary>
                Position of the two Arrows
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalColorSlider.CbHsl">
            <summary>
                Hue, Saturation, Lightness Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyle">
            <summary>
                The DrawStyle Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalColorSlider.Position">
            <summary>
                Position of the ColorSlider
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalColorSlider.Rgb">
            <summary>
                Red, Green, Blue Property
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawControl(SharpDX.Vector2)">
            <summary>
                Draws the ColorSlider
            </summary>
            <param name="newPos">Sets a new Position</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.VerticalColorSliderMouseDown(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the left mouse button is pressed
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.VerticalColorSliderMouseMove(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is moved and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.VerticalColorSliderMouseUp(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is released and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawBorder">
            <summary>
                Draws the Border around the ColorSlider
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawContent">
            <summary>
                Draws in Content of the ColorSlider
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawSlider(System.Int32,System.Boolean)">
            <summary>
                Draws the Arrows
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleBlue">
            <summary>
                Draws in Blue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleGreen">
            <summary>
                Draws in Green Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleHue">
            <summary>
                Draws in Hue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleLuminance">
            <summary>
                Draws in Luminance Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleRed">
            <summary>
                Draws in Red Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.DrawStyleSaturation">
            <summary>
                Draws in Saturation Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.ResetHslrgb">
            <summary>
                Resets the Color
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalColorSlider.ResetSlider(System.Boolean)">
            <summary>
                Resets the Arrows
            </summary>
            <param name="redraw">Force Redraw</param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mBDragging">
            <summary>
                Is User dragging the slider
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mDisabled">
            <summary>
                VerticalAlphaSlider disabled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mEDrawStyle">
            <summary>
                Defines the Display Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mHeight">
            <summary>
                Height of the ColorBox
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mHsl">
            <summary>
                Hue, Saturation, Lightness
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mRgb">
            <summary>
                Reg, Green, Blue
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.mWidth">
            <summary>
                Width of the ColorBox
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.#ctor(System.Drawing.Size,System.Boolean)">
            <summary>
                Init the VerticalAlphaSlider
            </summary>
            <param name="size"></param>
            <param name="disabled"></param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalAlphaSlider.AlphaSliderScrollEventHandler">
            <summary>
                EventHandler for the event <see cref="E:LeagueSharp.SDK.UI.VerticalAlphaSlider.AlphaSliderScroll" />
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.UI.VerticalAlphaSlider.AlphaSliderScroll">
            <summary>
                The event which gets fired when the color get changed
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle">
            <summary>
                The DrawStyle enum
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Hue">
            <summary>
                Hue Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Saturation">
            <summary>
                Saturation Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Brightness">
            <summary>
                Brightness Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Red">
            <summary>
                Red Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Green">
            <summary>
                Green Style
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.VerticalAlphaSlider.EDrawStyle.Blue">
            <summary>
                Blue Style
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalAlphaSlider.ArrowPos">
            <summary>
                Position of the two Arrows
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalAlphaSlider.CbHsl">
            <summary>
                Hue, Saturation, Lightness Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyle">
            <summary>
                The DrawStyle Property
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalAlphaSlider.Position">
            <summary>
                Position of the ColorSlider
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.VerticalAlphaSlider.Rgb">
            <summary>
                Red, Green, Blue Property
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawControl(SharpDX.Vector2)">
            <summary>
                Draws the AlphaSlider
            </summary>
            <param name="newPos">Sets a new Position</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.VerticalAlphaSliderMouseDown(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the left mouse button is pressed
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.VerticalAlphaSliderMouseMove(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is moved and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.VerticalAlphaSliderMouseUp(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Gets fired when the mouse is released and pressed before
            </summary>
            <param name="args">Keys</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawBorder">
            <summary>
                Draws the Border around the AlphaSlider
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawContent">
            <summary>
                Draws in Content of the AlphaSlider
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawSlider(System.Int32,System.Boolean)">
            <summary>
                Draws the Arrows
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleBlue">
            <summary>
                Draws in Blue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleGreen">
            <summary>
                Draws in Green Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleHue">
            <summary>
                Draws in Hue Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleLuminance">
            <summary>
                Draws in Luminance Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleRed">
            <summary>
                Draws in Red Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.DrawStyleSaturation">
            <summary>
                Draws in Saturation Style
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.ResetHslrgb">
            <summary>
                Resets the Color
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.VerticalAlphaSlider.ResetSlider(System.Boolean)">
            <summary>
                Resets the Arrows
            </summary>
            <param name="redraw">Force Redraw</param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.AdobeColors">
            <summary>
                Adobe Color Utitlies for HSL
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.ModifyBrightness(System.Drawing.Color,System.Double)">
            <summary>
                Modifies brightness of c by brightness
            </summary>
            <param name="c"></param>
            <param name="brightness"></param>
            <returns>New color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.ModifyHue(System.Drawing.Color,System.Double)">
            <summary>
                Modifies hue of c by hue
            </summary>
            <param name="c"></param>
            <param name="hue"></param>
            <returns>New color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.ModifySaturation(System.Drawing.Color,System.Double)">
            <summary>
                Modifies saturation of c by saturation
            </summary>
            <param name="c"></param>
            <param name="saturation"></param>
            <returns>New color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.SetBrightness(System.Drawing.Color,System.Double)">
            <summary>
                Sets brightness of c by brightness
            </summary>
            <param name="c"></param>
            <param name="brightness"></param>
            <returns>New color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.SetHue(System.Drawing.Color,System.Double)">
            <summary>
                Sets hue of c by hue
            </summary>
            <param name="c"></param>
            <param name="hue"></param>
            <returns>New color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AdobeColors.SetSaturation(System.Drawing.Color,System.Double)">
            <summary>
                Sets saturation of c by saturation
            </summary>
            <param name="c"></param>
            <param name="saturation"></param>
            <returns>New color</returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Cmyk">
            <summary>
                Color spectrum CMYK
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Cmyk.c">
            <summary>
                Cyan
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Cmyk.k">
            <summary>
                Key plate (black)
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Cmyk.m">
            <summary>
                Magenta
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Cmyk.y">
            <summary>
                Yellow
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Cmyk.C">
            <summary>
                Cyan
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Cmyk.K">
            <summary>
                Key plate (black)
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Cmyk.M">
            <summary>
                Magenta
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Cmyk.Y">
            <summary>
                Yellow
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Hsl">
            <summary>
                Color spectrum HSL
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Hsl.h">
            <summary>
                Hue
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Hsl.l">
            <summary>
                Lightness
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Hsl.s">
            <summary>
                Saturation
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Hsl.H">
            <summary>
                Hue
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Hsl.L">
            <summary>
                Lightness
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Hsl.S">
            <summary>
                Saturation
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Utilities">
            <summary>
                Color Utilities
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utilities.CmykToRgb(LeagueSharp.SDK.UI.Cmyk)">
            <summary>
                Converts the CMYK color format to RGB
            </summary>
            <param name="cmyk"></param>
            <returns>Converted color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utilities.HslToRgb(LeagueSharp.SDK.UI.Hsl)">
            <summary>
                Converts the HSL color format to RGB
            </summary>
            <param name="hsl"></param>
            <returns>Converted color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utilities.RgbToCmyk(System.Drawing.Color)">
            <summary>
                Converts the RGB color format to CMYK
            </summary>
            <param name="c"></param>
            <returns>Converted color</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utilities.RgbToHsl(System.Drawing.Color)">
            <summary>
                Converts the RGB color format to HSL
            </summary>
            <param name="c"></param>
            <returns>Converted color</returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuCustomizer">
            <summary>
                This menu allows the user to modify several properties in <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" />.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuCustomizer.Instance">
            <summary>
                An instance of this MenuCustomizer
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.BackgroundColor">
            <summary>
                Holds the background color
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.ContainerHeight">
            <summary>
                Holds the container height
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.FontHeight">
            <summary>
                Holds the font height
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.LockPosition">
            <summary>
                True if dragging of the menu is enabled.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.PositionX">
            <summary>
                Holds the X position of the menu.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuCustomizer.PositionY">
            <summary>
                Holds the Y position of the menu.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuCustomizer.Initialize(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Creates a new instance of MenuCustomizer
            </summary>
            <param name="menu">The menu that will hold this MenuCustomizer</param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.OnMenuValueChanged">
            <summary>
                Menu Value Changed delegate
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The Menu Value Changed Event Data</param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Menu">
            <summary>
                Menu User Interface.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Menu.Components">
            <summary>
                Menu Component Sub-Components.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Menu.toggled">
            <summary>
                Local toggled indicator.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Menu.visible">
            <summary>
                Local visible value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Menu" /> class.
                Menu Constructor.
            </summary>
            <param name="name">
                Menu Name
            </param>
            <param name="displayName">
                Menu Display Name
            </param>
            <param name="root">
                Root component
            </param>
            <param name="uniqueString">
                Unique string
            </param>
        </member>
        <member name="E:LeagueSharp.SDK.UI.Menu.MenuValueChanged">
            <summary>
                Occurs when a value is changed.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.Path">
            <summary>
                Gets the path.
            </summary>
            <value>
                The path.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.SharedSettings">
            <summary>
                Gets or sets a value indicating whether that the settings are shared.
            </summary>
            <value>
                <c>true</c> if the settings are shared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.Toggled">
            <summary>
                Returns if the menu has been toggled.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.Visible">
            <summary>
                Returns the menu visibility.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.Width">
            <summary>
                Gets the width.
            </summary>
            <value>
                The width.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Menu.Item(System.String)">
            <summary>
                Component Sub Object accessibility.
            </summary>
            <param name="name">Child Menu Component name</param>
            <returns>Child Menu Component of this component.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Add``1(``0)">
            <summary>
                Add a menu component to this menu.
            </summary>
            <typeparam name="T">
                <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> type
            </typeparam>
            <param name="component">
                <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> component
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Attach">
            <summary>
                Attaches the menu towards the main menu.
            </summary>
            <returns>Menu Instance</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.GetValue``1(System.String)">
            <summary>
                Get the value of a child with a certain name.
            </summary>
            <typeparam name="T">The type of MenuValue of this child.</typeparam>
            <param name="name">The name of the child.</param>
            <returns>
                The value that is attached to this Child.
            </returns>
            <exception cref="T:System.Exception">Could not find child with name  + name</exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.GetValue``1">
            <summary>
                Get the value of this component.
            </summary>
            <typeparam name="T">The type of MenuValue of this component.</typeparam>
            <returns>
                The value that is attached to this component.
            </returns>
            <exception cref="T:System.Exception">Cannot get the Value of a Menu</exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Load">
            <summary>
                Loads this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.OnDraw(SharpDX.Vector2)">
            <summary>
                Menu Drawing callback.
            </summary>
            <param name="position">
                The position.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.OnUpdate">
            <summary>
                Menu Update callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Menu Windows Process Messages callback.
            </summary>
            <param name="args"><see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.OnPreReset">
            <summary>
                Menu PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.OnPostReset">
            <summary>
                Menu PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Remove(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Removes a menu component from this menu.
            </summary>
            <param name="component">
                <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> component instance
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.ResetWidth">
            <summary>
                Resets the width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.RestoreDefault">
            <summary>
                Resets the children of this menu back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Save">
            <summary>
                Saves this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.Toggle">
            <summary>
                Toggles this menu component.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.FireEvent(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Fire the Value Changed event.
            </summary>
            <param name="sender">
                The sender object.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Menu.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuItem">
            <summary>
                Menu Item
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuItem" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuItem" /> class.
            </summary>
            <param name="name">
                Item Name
            </param>
            <param name="displayName">
                Item Display Name
            </param>
            <param name="uniqueString">
                Unique string
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuItem.OnValueChanged">
            <summary>
                Delegate for <see cref="E:LeagueSharp.SDK.UI.MenuItem.ValueChanged" />
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="e">The OnValueChangedEventArgs instance containing the event data.</param>
        </member>
        <member name="E:LeagueSharp.SDK.UI.MenuItem.ValueChanged">
            <summary>
                Occurs when a value is changed.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuItem.Path">
            <summary>
                Gets the path.
            </summary>
            <value>
                The path.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuItem.SettingsLoaded">
            <summary>
                Gets or sets a value indicating whether the settings are loaded.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuItem.Toggled">
            <summary>
                Returns if the item is toggled.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuItem.Visible">
            <summary>
                Returns the item visibility.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuItem.Item(System.String)">
            <summary>
                Gets the Component Dynamic Object accessibility.
            </summary>
            <param name="name">
                Child Menu Component name
            </param>
            <returns>Null, a menu item is unable to hold an access-able sub component</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Draw">
            <summary>
                Drawing callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified component.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.FireEvent">
            <summary>
                Event Handler
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.GetValue``1">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T">
                The type of the 1.
            </typeparam>
            <returns>Returns the value as the given type</returns>
            <exception cref="T:System.Exception">Cannot cast value  + Value.GetType() +  to  + typeof(T1)</exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.GetValue``1(System.String)">
            <summary>
                Gets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <returns>An Exception, there is no child for a MenuItem.</returns>
            <exception cref="T:System.Exception">Cannot get child of a MenuItem</exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Load">
            <summary>
                Loads this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.OnDraw(SharpDX.Vector2)">
            <summary>
                Item Draw callback.
            </summary>
            <param name="position">
                The position.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.OnUpdate">
            <summary>
                Item Update callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Item Windows Process Messages callback.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.OnPreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.OnPostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Save">
            <summary>
                Saves this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Windows Process Messages callback.
            </summary>
            <param name="args"><see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Deserialize``1(System.Byte[])">
            <summary>
                Convert a byte array to an Object.
            </summary>
            <param name="arrBytes">
                Byte array
            </param>
            <typeparam name="T3">
                Object casting type
            </typeparam>
            <returns>
                Object from the byte array as given type.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuItem.Serialize(System.Object)">
            <summary>
                Convert an Object to a byte array.
            </summary>
            <param name="obj">
                The Object
            </param>
            <returns>
                Byte array from the given Object.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.AllowAllAssemblyVersionsDeserializationBinder">
            <summary>
                Allow all assembly versions deserialization binder.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.AllowAllAssemblyVersionsDeserializationBinder.BindToType(System.String,System.String)">
            <summary>
                The bind to type.
            </summary>
            <param name="assemblyName">
                The assembly name
            </param>
            <param name="typeName">
                The type name
            </param>
            <returns>
                The type which has been bind.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuManager">
            <summary>
                Menu Interface class, used to control the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.ConfigFolder">
            <summary>
                The configuration folder
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.Instance">
            <summary>
                The Instance.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.menuPressKeybind">
            <summary>
                The show menu hotkey
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.menuToggleKeybind">
            <summary>
                The show menu toggle hotkey
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.delayedDrawActions">
            <summary>
                The delayed draw actions.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.forcedOpen">
            <summary>
                The forced open.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.menuVisible">
            <summary>
                Menu visible <c>bool</c>
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuManager.ppSpriteDrawnProtection">
            <summary>
                The sprite drawn protection.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:LeagueSharp.SDK.UI.MenuManager" /> class from being created.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.UI.MenuManager.OnClose">
            <summary>
                Occurs when the menu is closed.
            </summary>
        </member>
        <member name="E:LeagueSharp.SDK.UI.MenuManager.OnOpen">
            <summary>
                Occurs when the menu is opened.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuManager.ForcedOpen">
            <summary>
                Gets or sets a value indicating whether the menu was forced to open.
            </summary>
            <value>
                <c>true</c> if the menu was forced to open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuManager.Menus">
            <summary>
                Gets the menus.
            </summary>
            <value>
                The menus.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuManager.MenuVisible">
            <summary>
                Gets or sets a value indicating whether the menu is visible.
            </summary>
            <value>
                <c>true</c> if the menu is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuManager.Sprite">
            <summary>
                Gets The Sprite used to draw the components of the menu on.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuManager.Item(System.String)">
            <summary>
                Gets the <see cref="T:LeagueSharp.SDK.UI.Menu" /> with the specified name.
            </summary>
            <value>
                The <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </value>
            <param name="name">The name.</param>
            <returns>The requested menu</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Add(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Adds the specified menu.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.DrawDelayed(System.Action)">
            <summary>
                Draw actions in the specified action will happen after the menu has been drawn.
            </summary>
            <param name="a">The <see cref="T:System.Action" /></param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.ResetWidth">
            <summary>
                Causes the entire Menu tree to recalculate their widths.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.FireOnClose">
            <summary>
                Fires the on close.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.FireOnOpen">
            <summary>
                Fires the on open.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Game_OnUpdate(System.EventArgs)">
            <summary>
                OnUpdate event.
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Drawing_OnDraw(System.EventArgs)">
            <summary>
                On Draw event.
            </summary>
            <param name="args">
                Event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Game_OnWndProc(LeagueSharp.WndEventArgs)">
            <summary>
                On Window Process Message event.
            </summary>
            <param name="args">
                Event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                On PreReset event.
            </summary>
            <param name="args">
                Event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                On PostReset event.
            </summary>
            <param name="args">
                Event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuManager.SaveSettings">
            <summary>
                Save settings method
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuValueChangedEventArgs">
            <summary>
                Arguments for the OnValueChanged event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuValueChangedEventArgs.#ctor(LeagueSharp.SDK.UI.Menu,LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuValueChangedEventArgs" /> class.
            </summary>
            <param name="menu">The menu.</param>
            <param name="menuItem">The MenuItem that changed value</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuValueChangedEventArgs.Menu">
            <summary>
                Gets the menu that contains the changed MenuItem.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuValueChangedEventArgs.MenuItem">
            <summary>
                Gets the MenuItem that changed value.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.RadioMenu">
            <summary>
                RadioMenu Item.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.RadioMenu.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.RadioMenu" /> class.
                Menu Constructor.
            </summary>
            <param name="name">
                Menu Name
            </param>
            <param name="displayName">
                Menu Display Name
            </param>
            <param name="root">
                Root component
            </param>
            <param name="uniqueString">
                Unique string
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.RadioMenu.RadioMenuValueChanged(System.Object,LeagueSharp.SDK.UI.MenuValueChangedEventArgs)">
            <summary>
                Radio Menu when a value is changed.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.ADrawable">
            <summary>
                Defines a handler which is responsible for the drawing and interactions of an <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.Draw">
            <summary>
                Draws the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Handles the window events for this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
            <param name="args">Event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable.Width">
            <summary>
                Calculates the width of this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
            <returns>
                The width of this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.ADrawable`1">
            <summary>
                Defines a handler which is responsible for the drawing and interactions of an <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
            <typeparam name="T"><see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> type</typeparam>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawable`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.ADrawable`1.Component">
            <summary>
                Gets the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" /> where this <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> is responsible for.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.ADrawableAdapter">
            <summary>
                Provides an implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> that does nothing. This is used to prevent exceptions when
                no <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> exists for a given <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.Draw">
            <summary>
                Draws the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Handles the window events for this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
            <param name="args">Event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ADrawableAdapter.Width">
            <summary>
                Calculates the width of this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
            <returns>The width of this <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueBool2">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueBool2.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueButton2">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueButton2.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueButton2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueColorPicker2.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueColorPicker2" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueKeyBind2">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueKeyBind2.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueKeyBind2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueList2.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenu2.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenuSettings2">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenuSettings2.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenuSettings2.ContainerSelectedColor">
            <summary>
                Gets or sets the Global Container Selected Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenuSettings2.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueSeparator2">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSeparator2.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSeparator2.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSliderButton2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueSlider2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueMenuSettings2" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueTheme2.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue2.BlueUtilities2">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueUtilities2.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueUtilities2.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueUtilities2.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue2.BlueUtilities2.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueBool">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.ButtonBoundaries(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Returns the Rectangle that defines the on/off button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueBool.Width">
            <summary>
                Calculates the Width of a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueButton">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.TextGap">
            <summary>
                The text gap.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.buttonColor">
            <summary>
                The button color.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.buttonHoverColor">
            <summary>
                The button hover color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Calculate the Rectangle that defines the Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /></param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueButton.Width">
            <summary>
                Gets the width of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ApplyButtonHeight">
            <summary>
                The ApplyButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ApplyButtonWidth">
            <summary>
                The ApplyButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.CancelButtonHeight">
            <summary>
                The CancelButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.CancelButtonWidth">
            <summary>
                The CancelButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorBoxHeight">
            <summary>
                The ColorBox height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorBoxWidth">
            <summary>
                The ColorBox width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorPickerHeight">
            <summary>
                The ColorPicker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorPickerWidth">
            <summary>
                The ColorPicker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.PreviewHeight">
            <summary>
                The Preview height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.PreviewWidth">
            <summary>
                The Preview width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalAlphaSliderHeight">
            <summary>
                The VerticalAlphaSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalAlphaSliderWidth">
            <summary>
                The VerticalAlphaSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalColorSliderHeight">
            <summary>
                The VerticalColorSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalColorSliderWidth">
            <summary>
                The VerticalColorSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorBox">
            <summary>
                The ColorBox to display the color spectrum.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider to change the opacity.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalColorSlider">
            <summary>
                The VerticalColorSlider to change the color spectrum.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.InteractingColorBox">
            <summary>
                Gets or sets a value indicating whether interacting ColorBox.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.InteractingVerticalAlphaSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalAlphaSlider.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.InteractingVerticalColorSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalColorSlider.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ApplyButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.CancelButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorBoxBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.ColorPickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.PreviewBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalAlphaSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueColorPicker.VerticalColorSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.ButtonBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the On/Off boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.Draw">
            <summary>
                Draws a MenuKeyBind
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.KeyBindBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the <c>keybind</c> boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.Width">
            <summary>
                Gets the width of the MenuKeyBind
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.ChangeKey(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                ChangeKey method.
            </summary>
            <param name="component">menu component</param>
            <param name="newKey">
                The new key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.HandleDown(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleDown method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueKeyBind.HandleUp(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleUp method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueList">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueList.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueList.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueList.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueList.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueList.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenu.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.fontCaption">
            <summary>
                Local Caption Font.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.FontCaption">
            <summary>
                Gets or sets the Global Caption Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.KeyBindColor">
            <summary>
                Gets or sets the Global KeyBind Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.SliderColor">
            <summary>
                Gets or sets the Global Slider Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.TextCaptionColor">
            <summary>
                Gets or sets the Global Text Caption Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSeparator.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the on/off Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.SliderBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the Slider
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSliderButton.CalculateNewValue(LeagueSharp.SDK.UI.MenuSliderButton,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.AdditionalBoundries(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the additional boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Bounding(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueSlider.CalculateNewValue(LeagueSharp.SDK.UI.MenuSlider,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueMenuSettings" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueTheme.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Blue.BlueUtilities">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueUtilities.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueUtilities.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueUtilities.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Blue.BlueUtilities.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the on/off Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.SliderBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the Slider
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSliderButton.CalculateNewValue(LeagueSharp.SDK.UI.MenuSliderButton,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.ButtonBoundaries(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Returns the Rectangle that defines the on/off button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredBool.Width">
            <summary>
                Calculates the Width of a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.TextGap">
            <summary>
                The text gap.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.buttonColor">
            <summary>
                The button color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Calculate the Rectangle that defines the Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /></param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredButton.Width">
            <summary>
                Gets the width of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ApplyButtonHeight">
            <summary>
                The ApplyButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ApplyButtonWidth">
            <summary>
                The ApplyButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.CancelButtonHeight">
            <summary>
                The CancelButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.CancelButtonWidth">
            <summary>
                The CancelButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorBoxHeight">
            <summary>
                The ColorBox height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorBoxWidth">
            <summary>
                The ColorBox width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorPickerHeight">
            <summary>
                The ColorPicker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorPickerWidth">
            <summary>
                The ColorPicker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.PreviewHeight">
            <summary>
                The Preview height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.PreviewWidth">
            <summary>
                The Preview width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalAlphaSliderHeight">
            <summary>
                The VerticalAlphaSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalAlphaSliderWidth">
            <summary>
                The VerticalAlphaSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalColorSliderHeight">
            <summary>
                The VerticalColorSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalColorSliderWidth">
            <summary>
                The VerticalColorSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorBox">
            <summary>
                The ColorBox to display the color spectrum.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider to change the opacity.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalColorSlider">
            <summary>
                The VerticalColorSlider to change the color spectrum.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.InteractingColorBox">
            <summary>
                Gets or sets a value indicating whether interacting ColorBox.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.InteractingVerticalAlphaSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalAlphaSlider.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.InteractingVerticalColorSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalColorSlider.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ApplyButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.CancelButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorBoxBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.ColorPickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.PreviewBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalAlphaSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredColorPicker.VerticalColorSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.ButtonBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the On/Off boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.Draw">
            <summary>
                Draws a MenuKeyBind
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.KeyBindBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the <c>keybind</c> boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.Width">
            <summary>
                Gets the width of the MenuKeyBind
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.ChangeKey(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                ChangeKey method.
            </summary>
            <param name="component">menu component</param>
            <param name="newKey">
                The new key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.HandleDown(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleDown method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredKeyBind.HandleUp(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleUp method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredList">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredList.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenu.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.fontCaption">
            <summary>
                Local Caption Font.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.fontMenuSymbol">
            <summary>
                Local Caption Font.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.FontCaption">
            <summary>
                Gets or sets the Global Caption Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.FontMenuSymbol">
            <summary>
                Gets or sets the Global Symbol Menu Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.KeyBindColor">
            <summary>
                Gets or sets the Global KeyBind Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.SliderColor">
            <summary>
                Gets or sets the Global Slider Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.TextCaptionColor">
            <summary>
                Gets or sets the Global Text Caption Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSeparator.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.AdditionalBoundries(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the additional boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Bounding(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredSlider.CalculateNewValue(LeagueSharp.SDK.UI.MenuSlider,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredMenuSettings" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredTheme.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Colored.ColoredUtilities">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredUtilities.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredUtilities.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredUtilities.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Colored.ColoredUtilities.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the on/off Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.SliderBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the Slider
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSliderButton.CalculateNewValue(LeagueSharp.SDK.UI.MenuSliderButton,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultBool">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.ButtonBoundaries(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Returns the Rectangle that defines the on/off button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultBool.Width">
            <summary>
                Calculates the Width of a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultButton">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.TextGap">
            <summary>
                The text gap.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.buttonColor">
            <summary>
                The button color.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.buttonHoverColor">
            <summary>
                The button hover color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Calculate the Rectangle that defines the Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /></param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultButton.Width">
            <summary>
                Gets the width of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.PickerWidth">
            <summary>
                The picker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.SliderHeight">
            <summary>
                The slider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.SliderOffset">
            <summary>
                The slider offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.TextOffset">
            <summary>
                The text offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.greenWidth">
            <summary>
                The green width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.pickerHeight">
            <summary>
                The picker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.pickerX">
            <summary>
                The picker x axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.pickerY">
            <summary>
                The picker y axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.sliderWidth">
            <summary>
                The slider width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.SliderWidth">
            <summary>
                Gets the width of the slider
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.GetByte(LeagueSharp.SDK.Utils.WindowsKeys,SharpDX.Rectangle)">
            <summary>
                Gets the byte.
            </summary>
            <param name="args">
                The windows keys.
            </param>
            <param name="rect">
                The <see cref="T:SharpDX.Rectangle" />
            </param>
            <returns>
                The byte.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.UpdateAlpha(LeagueSharp.SDK.UI.MenuColor,LeagueSharp.SDK.Utils.WindowsKeys,SharpDX.Rectangle)">
            <summary>
                Updates the alpha value.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                The windows keys.
            </param>
            <param name="rect">
                The <see cref="T:SharpDX.Rectangle" />
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.UpdateBlue(LeagueSharp.SDK.UI.MenuColor,LeagueSharp.SDK.Utils.WindowsKeys,SharpDX.Rectangle)">
            <summary>
                Updates the blue value.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                The windows keys.
            </param>
            <param name="rect">
                The <see cref="T:SharpDX.Rectangle" />
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.UpdateGreen(LeagueSharp.SDK.UI.MenuColor,LeagueSharp.SDK.Utils.WindowsKeys,SharpDX.Rectangle)">
            <summary>
                Updates the green value.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                The windows keys.
            </param>
            <param name="rect">
                The <see cref="T:SharpDX.Rectangle" />
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.UpdateRed(LeagueSharp.SDK.UI.MenuColor,LeagueSharp.SDK.Utils.WindowsKeys,SharpDX.Rectangle)">
            <summary>
                Updates the red value.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                The windows keys.
            </param>
            <param name="rect">
                The <see cref="T:SharpDX.Rectangle" />
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.AlphaPickerBoundaries">
            <summary>
                Get the alpha picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.BluePickerBoundaries">
            <summary>
                Get the blue picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.GreenPickerBoundaries">
            <summary>
                Get the green picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.PickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultColorPicker.RedPickerBoundaries">
            <summary>
                Get the red picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.ButtonBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the On/Off boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.Draw">
            <summary>
                Draws a MenuKeyBind
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.KeyBindBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the <c>keybind</c> boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.Width">
            <summary>
                Gets the width of the MenuKeyBind
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.ChangeKey(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                ChangeKey method.
            </summary>
            <param name="component">menu component</param>
            <param name="newKey">
                The new key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.HandleDown(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleDown method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultKeyBind.HandleUp(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleUp method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultList">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultList.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultList.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultList.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultList.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultList.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultMenu.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSeparator.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.AdditionalBoundries(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the additional boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.Bounding(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultSlider.CalculateNewValue(LeagueSharp.SDK.UI.MenuSlider,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultTexture">
            <summary>
                The Default Texture Types.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultTexture.Dragging">
            <summary>
                The Dragging Type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures">
            <summary>
                The Default Textures.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures.Instance">
            <summary>
                The Instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures.Item(LeagueSharp.SDK.UI.Skins.Default.DefaultTexture)">
            <summary>
                The Indexer.
            </summary>
            <param name="textureType">
                The Texture Type.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTextures.BuildTexture(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
                Builds the texture.
            </summary>
            <param name="bmp">
                The image
            </param>
            <param name="height">
                The height
            </param>
            <param name="width">
                The width
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper" />
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper">
            <summary>
                The Texture Wrapper.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper.#ctor(SharpDX.Direct3D9.Texture,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper" /> class.
            </summary>
            <param name="texture">
                The texture
            </param>
            <param name="width">
                The width
            </param>
            <param name="height">
                The height
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper.Height">
            <summary>
                Gets the Height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper.Texture">
            <summary>
                Gets the Texture.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Default.TextureWrapper.Width">
            <summary>
                Gets the Width.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultTheme.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Default.DefaultUtilities">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultUtilities.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultUtilities.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultUtilities.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Default.DefaultUtilities.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSliderButton2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightBool2">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightBool2.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightButton2">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightButton2.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightButton2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ApplyButtonHeight">
            <summary>
                The ApplyButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ApplyButtonWidth">
            <summary>
                The ApplyButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.CancelButtonHeight">
            <summary>
                The CancelButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.CancelButtonWidth">
            <summary>
                The CancelButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorBoxHeight">
            <summary>
                The ColorBox height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorBoxWidth">
            <summary>
                The ColorBox width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorPickerHeight">
            <summary>
                The ColorPicker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorPickerWidth">
            <summary>
                The ColorPicker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.PreviewHeight">
            <summary>
                The Preview height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.PreviewWidth">
            <summary>
                The Preview width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalAlphaSliderHeight">
            <summary>
                The VerticalAlphaSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalAlphaSliderWidth">
            <summary>
                The VerticalAlphaSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalColorSliderHeight">
            <summary>
                The VerticalColorSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalColorSliderWidth">
            <summary>
                The VerticalColorSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.colorBox">
            <summary>
                The ColorBox to display the color spectrum.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.verticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider to change the opacity.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.verticalColorSlider">
            <summary>
                The VerticalColorSlider to change the color spectrum.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.InteractingColorBox">
            <summary>
                Gets or sets a value indicating whether interacting ColorBox.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.InteractingVerticalAlphaSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalAlphaSlider.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.InteractingVerticalColorSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalColorSlider.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ApplyButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.CancelButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorBoxBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.ColorPickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.PreviewBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalAlphaSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightColorPicker2.VerticalColorSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightKeyBind2">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightKeyBind2.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightKeyBind2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightList2">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightList2.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightList2.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightList2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightList2.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightList2.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenu2.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.FontCaption">
            <summary>
                Gets or sets the Global Caption Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.KeyBindColor">
            <summary>
                Gets or sets the Global KeyBind Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.SliderColor">
            <summary>
                Gets or sets the Global Slider Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.TextCaptionColor">
            <summary>
                Gets or sets the Global Text Caption Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightSeparator2">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSeparator2.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSeparator2.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightSlider2.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightMenuSettings2" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightTheme2.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light2.LightUtilities2">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightUtilities2.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightUtilities2.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightUtilities2.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light2.LightUtilities2.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the on/off Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.SliderBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the Slider
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSliderButton.CalculateNewValue(LeagueSharp.SDK.UI.MenuSliderButton,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightBool">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightBool.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.ButtonBoundaries(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Returns the Rectangle that defines the on/off button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightBool.Width">
            <summary>
                Calculates the Width of a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightButton">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightButton.TextGap">
            <summary>
                The text gap.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightButton.buttonColor">
            <summary>
                The button color.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightButton.buttonHoverColor">
            <summary>
                The button hover color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Calculate the Rectangle that defines the Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /></param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightButton.Width">
            <summary>
                Gets the width of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ApplyButtonHeight">
            <summary>
                The ApplyButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ApplyButtonWidth">
            <summary>
                The ApplyButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.CancelButtonHeight">
            <summary>
                The CancelButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.CancelButtonWidth">
            <summary>
                The CancelButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorBoxHeight">
            <summary>
                The ColorBox height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorBoxWidth">
            <summary>
                The ColorBox width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorPickerHeight">
            <summary>
                The ColorPicker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorPickerWidth">
            <summary>
                The ColorPicker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.PreviewHeight">
            <summary>
                The Preview height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.PreviewWidth">
            <summary>
                The Preview width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalAlphaSliderHeight">
            <summary>
                The VerticalAlphaSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalAlphaSliderWidth">
            <summary>
                The VerticalAlphaSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalColorSliderHeight">
            <summary>
                The VerticalColorSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalColorSliderWidth">
            <summary>
                The VerticalColorSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorBox">
            <summary>
                The ColorBox to display the color spectrum.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider to change the opacity.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalColorSlider">
            <summary>
                The VerticalColorSlider to change the color spectrum.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.InteractingColorBox">
            <summary>
                Gets or sets a value indicating whether interacting ColorBox.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.InteractingVerticalAlphaSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalAlphaSlider.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.InteractingVerticalColorSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalColorSlider.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ApplyButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.CancelButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorBoxBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.ColorPickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.PreviewBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalAlphaSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightColorPicker.VerticalColorSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.ButtonBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the On/Off boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.Draw">
            <summary>
                Draws a MenuKeyBind
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.KeyBindBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the <c>keybind</c> boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.Width">
            <summary>
                Gets the width of the MenuKeyBind
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.ChangeKey(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                ChangeKey method.
            </summary>
            <param name="component">menu component</param>
            <param name="newKey">
                The new key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.HandleDown(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleDown method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightKeyBind.HandleUp(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleUp method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightList">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightList.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightList.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightList.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightList.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightList.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightMenu">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightMenu.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenu.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.FontCaption">
            <summary>
                Gets or sets the Global Caption Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.KeyBindColor">
            <summary>
                Gets or sets the Global KeyBind Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.SliderColor">
            <summary>
                Gets or sets the Global Slider Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.TextCaptionColor">
            <summary>
                Gets or sets the Global Text Caption Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightSeparator">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSeparator.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightSlider">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.AdditionalBoundries(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the additional boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Bounding(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightSlider.CalculateNewValue(LeagueSharp.SDK.UI.MenuSlider,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightTheme">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Light.LightTheme.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightMenuSettings" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Light.LightTheme" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightTheme.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Light.LightUtilities">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightUtilities.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightUtilities.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightUtilities.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Light.LightUtilities.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechBool">
            <summary>
                A blue implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechBool.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.#ctor(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechBool" /> class.
            </summary>
            <param name="component">
                The component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.ButtonBoundaries(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Returns the Rectangle that defines the on/off button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechBool.Width">
            <summary>
                Calculates the Width of a <see cref="T:LeagueSharp.SDK.UI.MenuBool" />
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechButton">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechButton.TextGap">
            <summary>
                The text gap.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechButton.buttonColor">
            <summary>
                The button color.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechButton.buttonHoverColor">
            <summary>
                The button hover color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.#ctor(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Calculate the Rectangle that defines the Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /></param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechButton.Width">
            <summary>
                Gets the width of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" />
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ApplyButtonHeight">
            <summary>
                The ApplyButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ApplyButtonWidth">
            <summary>
                The ApplyButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.BorderOffset">
            <summary>
                The border offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.CancelButtonHeight">
            <summary>
                The CancelButton height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.CancelButtonWidth">
            <summary>
                The CancelButton width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorBoxHeight">
            <summary>
                The ColorBox height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorBoxWidth">
            <summary>
                The ColorBox width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorPickerHeight">
            <summary>
                The ColorPicker height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorPickerWidth">
            <summary>
                The ColorPicker width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.PreviewHeight">
            <summary>
                The Preview height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.PreviewWidth">
            <summary>
                The Preview width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalAlphaSliderHeight">
            <summary>
                The VerticalAlphaSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalAlphaSliderWidth">
            <summary>
                The VerticalAlphaSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalColorSliderHeight">
            <summary>
                The VerticalColorSlider height.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalColorSliderWidth">
            <summary>
                The VerticalColorSlider width.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorBox">
            <summary>
                The ColorBox to display the color spectrum.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalAlphaSlider">
            <summary>
                The VerticalAlphaSlider to change the opacity.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalColorSlider">
            <summary>
                The VerticalColorSlider to change the color spectrum.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.#ctor(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.InteractingColorBox">
            <summary>
                Gets or sets a value indicating whether interacting ColorBox.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.InteractingVerticalAlphaSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalAlphaSlider.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.InteractingVerticalColorSlider">
            <summary>
                Gets or sets a value indicating whether interacting VerticalColorSlider.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.Draw">
            <summary>
                Draws a MenuColor
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows events
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.Width">
            <summary>
                Gets the width of a <see cref="T:LeagueSharp.SDK.UI.MenuColor" />
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.PreviewBoundaries(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Get the preview boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ApplyButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.CancelButtonBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorBoxBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.ColorPickerBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.PreviewBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalAlphaSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechColorPicker.VerticalColorSliderBoundaries">
            <summary>
                Get the picker boundaries
            </summary>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind">
            <summary>
                A default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.#ctor(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.ButtonBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the On/Off boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.Draw">
            <summary>
                Draws a MenuKeyBind
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.KeyBindBoundaries(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Gets the <c>keybind</c> boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.Width">
            <summary>
                Gets the width of the MenuKeyBind
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.ChangeKey(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                ChangeKey method.
            </summary>
            <param name="component">menu component</param>
            <param name="newKey">
                The new key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.HandleDown(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleDown method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechKeyBind.HandleUp(LeagueSharp.SDK.UI.MenuKeyBind,System.Windows.Forms.Keys)">
            <summary>
                HandleUp method.
            </summary>
            <param name="component">menu component</param>
            <param name="expectedKey">
                The expected key
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechList">
            <summary>
                A default implementation of a <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechList.ArrowSpacing">
            <summary>
                The arrow spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechList.TextSpacing">
            <summary>
                The text spacing.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechList.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechList.dropDownButtonWidth">
            <summary>
                The drop down button width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.#ctor(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechList" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuList" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.DropDownBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the dropdown boundaries (preview)
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.DropDownExpandedBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the complete dropdown boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.DropDownListBoundaries(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Gets the list of dropdown item boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /></param>
            <returns>List of <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">The event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechList.Width">
            <summary>
                Gets the width of the MenuList
            </summary>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechMenu">
            <summary>
                Provides a default implementation of <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.dragging">
            <summary>
                Gets or sets a value indicating whether the user is dragging the menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.hasDragged">
            <summary>
                Gets or sets a value indicating whether the user has moved the menu at least 1 pixel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.hovering">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.Menu" /> is hovering.
            </summary>
            <value>
                <c>true</c> if hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.xd">
            <summary>
                The x-axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.yd">
            <summary>
                The y-axis.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechMenu" /> class.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.Draw">
            <summary>
                Draws an Menu
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenu.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.FontCaption">
            <summary>
                Gets or sets the Global Caption Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.FontMenuSymbol">
            <summary>
                Gets or sets the Global Symbol Menu Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.KeyBindColor">
            <summary>
                Gets or sets the Global KeyBind Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.SliderColor">
            <summary>
                Gets or sets the Global Slider Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.TextCaptionColor">
            <summary>
                Gets or sets the Global Text Caption Color.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings.LoadSettings">
            <summary>
                Used to load the menu settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator">
            <summary>
                Implements <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" /> as a default skin.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.#ctor(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.Draw">
            <summary>
                Draw a <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSeparator.Width">
            <summary>
                Calculates the Width of an AMenuComponent
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.#ctor(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.ButtonBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the on/off Button
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.SliderBoundaries(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Returns the Rectangle that defines the Slider
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSliderButton.CalculateNewValue(LeagueSharp.SDK.UI.MenuSliderButton,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechSlider">
            <summary>
                A default implementation of an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable`1" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Offset">
            <summary>
                Offset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.#ctor(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechSlider" /> class.
            </summary>
            <param name="component">
                The menu component
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.AdditionalBoundries(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the additional boundaries.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Bounding(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Gets the boundaries
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /></param>
            <returns>The <see cref="T:SharpDX.Rectangle" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Dispose">
            <summary>
                Disposes any resources used in this handler.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Draw">
            <summary>
                Draws a <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.OnWndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Processes windows messages
            </summary>
            <param name="args">event data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.Width">
            <summary>
                Calculates the width of this component
            </summary>
            <returns>
                The width.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechSlider.CalculateNewValue(LeagueSharp.SDK.UI.MenuSlider,LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Calculate the new value based onto the cursor position.
            </summary>
            <param name="component">menu component</param>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechTheme">
            <summary>
                Implements a default ITheme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechMenuSettings" /> class.
                Use to preload <see cref="T:LeagueSharp.SDK.UI.Skins.Tech.TechTheme" /> visual settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSliderButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.Draw">
            <summary>
                OnDraw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechTheme.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.Tech.TechUtilities">
            <summary>
                Provides a set of functions used in the Default theme.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechUtilities.CalcWidthItem(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Calculate the item's width.
            </summary>
            <param name="menuItem">The <see cref="T:LeagueSharp.SDK.UI.MenuItem" /></param>
            <returns>The width</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechUtilities.CalcWidthText(System.String)">
            <summary>
                Calculates the width of text.
            </summary>
            <param name="text">The text.</param>
            <returns>The <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechUtilities.GetContainerRectangle(LeagueSharp.SDK.UI.AMenuComponent)">
            <summary>
                Gets the container rectangle.
            </summary>
            <param name="component">
                The component.
            </param>
            <returns>
                <see cref="T:SharpDX.Rectangle" /> with information.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.Tech.TechUtilities.MeasureString(System.String)">
            <summary>
                Calculates the string measurements.
            </summary>
            <param name="text">
                The text.
            </param>
            <returns>
                The measured rectangle.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.ITheme">
            <summary>
                Defines a Theme used to draw components of the menu.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildBoolHandler(LeagueSharp.SDK.UI.MenuBool)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuBool" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildButtonHandler(LeagueSharp.SDK.UI.MenuButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuButton" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildColorHandler(LeagueSharp.SDK.UI.MenuColor)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuColor" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildKeyBindHandler(LeagueSharp.SDK.UI.MenuKeyBind)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildListHandler(LeagueSharp.SDK.UI.MenuList)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuList" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuList" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildMenuHandler(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.Menu" />.
            </summary>
            <param name="menu">The <see cref="T:LeagueSharp.SDK.UI.Menu" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildSeparatorHandler(LeagueSharp.SDK.UI.MenuSeparator)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildSliderButtonHandler(LeagueSharp.SDK.UI.MenuSliderButton)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.BuildSliderHandler(LeagueSharp.SDK.UI.MenuSlider)">
            <summary>
                Builds a new handler for the given <see cref="T:LeagueSharp.SDK.UI.MenuSlider" />.
            </summary>
            <param name="component">The <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> where this handler is responsible for.</param>
            <returns>The handler</returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.Draw">
            <summary>
                Draws the list of root menus on the given position.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.OnPreReset">
            <summary>
                PreReset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ITheme.OnPostReset">
            <summary>
                PostReset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.MenuSettings">
            <summary>
                Default Skin Settings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.MenuSettings.font">
            <summary>
                Local Font.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.MenuSettings.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.MenuSettings" /> class.
                Default Settings Static Constructor.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.MenuSettings.Drawing_OnPreReset(System.EventArgs)">
            <summary>
                PreReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.MenuSettings.Drawing_OnPostReset(System.EventArgs)">
            <summary>
                PostReset.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerHeight">
            <summary>
                Gets or sets the Global Container Height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerSelectedColor">
            <summary>
                Gets or sets the Global Container Selected Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerSeparatorColor">
            <summary>
                Gets or sets the Container Line Separator Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerTextMarkOffset">
            <summary>
                Gets or sets the Container Text Marking Offset.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerTextMarkWidth">
            <summary>
                Gets or sets the Global Container Text Mark Width.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerTextOffset">
            <summary>
                Gets or sets the Container Text Addition Offset.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.ContainerWidth">
            <summary>
                Gets or sets the Global Container Width.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.Font">
            <summary>
                Gets or sets the Global Font.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.HoverColor">
            <summary>
                Gets or sets the color of an item when the user is hovering over it.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.Position">
            <summary>
                Gets or sets the default menu zero-position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.RootContainerColor">
            <summary>
                Gets or sets the Root Container Color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.MenuSettings.TextColor">
            <summary>
                Gets or sets the Global Text Color.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Skins.ThemeManager">
            <summary>
                Manages themes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.ThemeManager.current">
            <summary>
                The current theme.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Skins.ThemeManager.default">
            <summary>
                The default theme.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.ThemeManager.Current">
            <summary>
                Gets or sets the current ITheme used by the menu.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.ThemeManager.Default">
            <summary>
                Gets the default theme.
            </summary>
            <value>
                The default theme.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.Skins.ThemeManager.Menu">
            <summary>
                Gets or sets the menu.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Skins.ThemeManager.Initialize(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.UI.Skins.ThemeManager" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuBool">
            <summary>
                Menu boolean.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuBool.original">
            <summary>
                The original value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> class.
            </summary>
            <param name="name">
                Internal name of this component
            </param>
            <param name="displayName">
                Display name of this component
            </param>
            <param name="value">
                Boolean Value
            </param>
            <param name="uniqueString">
                String used when saving settings.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuBool" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuBool.Value">
            <summary>
                Gets or sets a value indicating whether the boolean value is true or false.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuBool.Width">
            <summary>
                Boolean Item Width requirement.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.Draw">
            <summary>
                Boolean Item Draw callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Boolean Item Windows Process Messages callback.
            </summary>
            <param name="args">The <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> instance</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.PreReset">
            <summary>
                Boolean Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.PostReset">
            <summary>
                Boolean Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuBool.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuButton">
            <summary>
                A Button designed to perform an action when clicked
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuButton" /> class, with a specified button text.
            </summary>
            <param name="name">
                The internal name of this component
            </param>
            <param name="displayName">
                The display name of this component
            </param>
            <param name="buttonText">
                The button text
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuButton.ButtonAction">
            <summary>
                The action
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuButton.Action">
            <summary>
                Gets or sets the action to be performed when the button is clicked
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuButton.ButtonText">
            <summary>
                Gets or sets the text on the button
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuButton.Hovering">
            <summary>
                Gets or sets a value indicating whether the item is being hovered on.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuButton.Width">
            <summary>
                Gets the width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.Draw">
            <summary>
                On Draw event.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the component.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                On Windows Process Message event.
            </summary>
            <param name="args">
                The event data.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuButton.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuColor">
            <summary>
                The menu color.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuColor.original">
            <summary>
                The original value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.#ctor(System.String,System.String,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> class.
            </summary>
            <param name="name">
                The internal name of this component
            </param>
            <param name="displayName">
                The display name of this component
            </param>
            <param name="color">
                The color
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuColor" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.Active">
            <summary>
                Gets or sets a value indicating whether active.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.Color">
            <summary>
                Gets or sets the color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.HoveringPreview">
            <summary>
                Gets or sets a value indicating whether hovering preview.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.InteractingAlpha">
            <summary>
                Gets or sets a value indicating whether interacting alpha.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.InteractingBlue">
            <summary>
                Gets or sets a value indicating whether interacting blue.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.InteractingGreen">
            <summary>
                Gets or sets a value indicating whether interacting green.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.InteractingRed">
            <summary>
                Gets or sets a value indicating whether interacting red.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuColor.Width">
            <summary>
                Gets the Value Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.Draw">
            <summary>
                Drawing callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Windows Process Messages callback.
            </summary>
            <param name="args"><see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuKeyBind">
            <summary>
                Menu KeyBind.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuKeyBind.original">
            <summary>
                The original value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuKeyBind.active">
            <summary>
                The local active value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuKeyBind.interacting">
            <summary>
                Local Interacting value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.#ctor(System.String,System.String,System.Windows.Forms.Keys,LeagueSharp.SDK.Enumerations.KeyBindType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> class.
            </summary>
            <param name="name">
                The internal name of the component
            </param>
            <param name="displayName">
                The display name of the component
            </param>
            <param name="key">
                The Key to bind
            </param>
            <param name="type">
                Key bind type
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuKeyBind.Active">
            <summary>
                Gets or sets a value indicating whether the key is active.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuKeyBind.Interacting">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.MenuKeyBind" /> is interacting.
            </summary>
            <value>
                <c>true</c> if interacting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuKeyBind.Key">
            <summary>
                Gets or sets the KeyBind Key Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuKeyBind.Type">
            <summary>
                Gets or sets the KeyBind Type.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuKeyBind.Width">
            <summary>
                KeyBind Item Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.Draw">
            <summary>
                KeyBind Item Draw callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                KeyBind Item Windows Process Messages callback.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuKeyBind.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuList">
            <summary>
                A list of values.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuList.ListIndex">
            <summary>
                The index.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuList" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuList" /> class.
            </summary>
            <param name="name">Internal name of the component</param>
            <param name="displayName">Display name of the component</param>
            <param name="uniqueString">String to make this component unique</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.Active">
            <summary>
                Gets or sets a value indicating whether the dropdown menu is active.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.Count">
            <summary>
                Gets the amount of options available
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.Hovering">
            <summary>
                Gets or sets a value indicating whether if the user is hovering over the dropdown.
            </summary>
            <value>
                <c>true</c> if the user is hovering over the dropdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.HoveringIndex">
            <summary>
                Gets or sets the index of the option that is currently being hovered at by the user.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.Index">
            <summary>
                Gets or sets the index.
            </summary>
            <value>
                The index.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.MaxStringWidth">
            <summary>
                Gets the maximum width of the string.
            </summary>
            <value>
                The maximum width of the string.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.SelectedValueAsObject">
            <summary>
                Gets the selected value as an object.
            </summary>
            <value>
                The selected value as an object.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList.ValuesAsStrings">
            <summary>
                Gets a list of strings that represent the different options
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuList`1">
            <summary>
                A list of values with a specific type.
            </summary>
            <typeparam name="T">
                Type of object in the list
            </typeparam>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuList`1.width">
            <summary>
                Local width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuList`1" /> class.
            </summary>
            <param name="name">
                The internal name of this component
            </param>
            <param name="displayName">
                The display name of this component
            </param>
            <param name="objects">
                The objects.
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuList`1" /> class based upon the given Enumeration type.
            </summary>
            <param name="name">
                The name.
            </param>
            <param name="displayName">
                The display Name.
            </param>
            <param name="uniqueString">
                The unique String.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuList`1" /> class.
            </summary>
            <param name="info">
                The information.
            </param>
            <param name="context">
                The context.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.Count">
            <summary>
                Gets the count.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.MaxStringWidth">
            <summary>
                Gets the maximum width of the string.
            </summary>
            <value>
                The maximum width of the string.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.SelectedValue">
            <summary>
                Gets the selected value.
            </summary>
            <value>
                The selected value.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.SelectedValueAsObject">
            <summary>
                Gets the selected value as an object.
            </summary>
            <value>
                The selected value as an object.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.Values">
            <summary>
                Gets the values.
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.ValuesAsStrings">
            <summary>
                Gets the values as strings.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuList`1.Width">
            <summary>
                Value Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.Draw">
            <summary>
                Drawing callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified component.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Windows Process Messages callback.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.
            </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission. =
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.
            </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission. =
            </exception>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuSeparator">
            <summary>
                A menu separator.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuSeparator" /> class.
            </summary>
            <param name="name">
                The internal name of this menu component
            </param>
            <param name="displayName">
                The display name of this menu component
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSeparator.Width">
            <summary>
                Value Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.Draw">
            <summary>
                Drawing callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified component.
            </summary>
            <param name="component">
                The component.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Windows Process Messages callback.
            </summary>
            <param name="args"><see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSeparator.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> instance.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuSliderButton">
            <summary>
                Menu Slider.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSliderButton.bOriginal">
            <summary>
                The boriginal.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSliderButton.original">
            <summary>
                The original.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSliderButton.bValue">
            <summary>
                The Button value.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSliderButton.value">
            <summary>
                The value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> class.
            </summary>
            <param name="name">
                The internal name of this component
            </param>
            <param name="displayName">
                The display name of this component
            </param>
            <param name="value">
                The Value
            </param>
            <param name="minValue">
                Minimum Value Boundary
            </param>
            <param name="maxValue">
                Maximum Value Boundary
            </param>
            <param name="bValue">
                The Button Value
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.BValue">
            <summary>
                Gets or sets a value indicating whether the boolean value is true or false.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.Interacting">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> is interacting.
            </summary>
            <value>
                <c>true</c> if interacting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.MaxValue">
            <summary>
                Gets or sets the Slider Maximum Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.MinValue">
            <summary>
                Gets or sets the Slider Minimum Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.SValue">
            <summary>
                Gets or sets the Slider Current Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.Value">
            <summary>
                Gets the Slider Value if Button is active.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSliderButton.Width">
            <summary>
                Slider Item Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.Draw">
            <summary>
                Slider Item Draw callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified value.
            </summary>
            <param name="menuValue">The value.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Slider Windows Process Messages callback.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> handle.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSliderButton.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:LeagueSharp.SDK.UI.MenuSlider">
            <summary>
                Menu Slider.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSlider.original">
            <summary>
                The original.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.UI.MenuSlider.value">
            <summary>
                The value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> class.
            </summary>
            <param name="name">
                The internal name of this component
            </param>
            <param name="displayName">
                The display name of this component
            </param>
            <param name="value">
                The Value
            </param>
            <param name="minValue">
                Minimum Value Boundary
            </param>
            <param name="maxValue">
                Maximum Value Boundary
            </param>
            <param name="uniqueString">
                String used in saving settings
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSlider.Interacting">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.UI.MenuSlider" /> is interacting.
            </summary>
            <value>
                <c>true</c> if interacting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSlider.MaxValue">
            <summary>
                Gets or sets the Slider Maximum Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSlider.MinValue">
            <summary>
                Gets or sets the Slider Minimum Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSlider.Value">
            <summary>
                Gets or sets the Slider Current Value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.UI.MenuSlider.Width">
            <summary>
                Slider Item Width.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.Draw">
            <summary>
                Slider Item Draw callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.Extract(LeagueSharp.SDK.UI.MenuItem)">
            <summary>
                Extracts the specified value.
            </summary>
            <param name="menuValue">The value.</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.RestoreDefault">
            <summary>
                Resets the MenuItem back to his default values.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.WndProc(LeagueSharp.SDK.Utils.WindowsKeys)">
            <summary>
                Slider Windows Process Messages callback.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.PreReset">
            <summary>
                Item PreReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.PostReset">
            <summary>
                Item PostReset callback.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.BuildHandler(LeagueSharp.SDK.UI.Skins.ITheme)">
            <summary>
                Builds an <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> for this component.
            </summary>
            <param name="theme">
                The theme.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.UI.Skins.ADrawable" /> handle.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.UI.MenuSlider.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the
                target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="F:LeagueSharp.SDK.UI.Utils.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.UI.Utils.CircleType">
            <summary>
                Circle Type Enum
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.OnPreReset">
            <summary>
                PreReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.OnPostReset">
            <summary>
                PostReset the <see cref="T:LeagueSharp.SDK.UI.AMenuComponent" />.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawBox(System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Color)">
            <summary>
                Draws a Box
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="linewidth">Line Width</param>
            <param name="color">Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawBoxBordered(System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Color,SharpDX.Color)">
            <summary>
                Draws a bordered Box
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="borderWidth">The border width</param>
            <param name="color">Color</param>
            <param name="colorBorder">Border Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawBoxFilled(System.Single,System.Single,System.Single,System.Single,SharpDX.Color)">
            <summary>
                Draws a filled Box
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="color">Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawBoxRounded(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,SharpDX.Color,SharpDX.Color,System.Nullable{SharpDX.Color})">
            <summary>
                Draws a rounded Box. If Smoothing is true it will draw a border too.
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="radius">Radius</param>
            <param name="smoothing">Smoothing</param>
            <param name="color">Color</param>
            <param name="bcolor">Border Color</param>
            <param name="ccolor">Corner Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawCircle(System.Single,System.Single,System.Single,System.Int32,LeagueSharp.SDK.UI.Utils.CircleType,System.Boolean,System.Int32,SharpDX.Color)">
            <summary>
                Draws a Circle (not filled)
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="radius">Radius</param>
            <param name="rotate">Rotation 0 - 360</param>
            <param name="type">Circle Type</param>
            <param name="smoothing">Smooth Antialiasing</param>
            <param name="resolution">Real smooth value</param>
            <param name="color">Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawCircleFilled(System.Single,System.Single,System.Single,System.Single,LeagueSharp.SDK.UI.Utils.CircleType,System.Boolean,System.Int32,SharpDX.Color)">
            <summary>
                Draws a filled Circle
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="rad">Radius</param>
            <param name="rotate">Rotation 0 - 360</param>
            <param name="type">Circle Type</param>
            <param name="smoothing">Smooth Antialiasing</param>
            <param name="resolution">Real smooth value</param>
            <param name="color">Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Color)">
            <summary>
                Draws a line from X to Y with a width and a color
            </summary>
            <param name="xa">Position X1</param>
            <param name="ya">Position Y1</param>
            <param name="xb">Position X2</param>
            <param name="yb">Position Y2</param>
            <param name="dwWidth">Width</param>
            <param name="color">Color</param>
        </member>
        <member name="M:LeagueSharp.SDK.UI.Utils.RoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.Color)">
            <summary>
                Draws a rounded Rectangle
            </summary>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="iSmooth">Smooth</param>
            <param name="color">Color</param>
        </member>
        <member name="T:LeagueSharp.SDK.ANotification">
            <summary>
                Abstract notification class, used as base template.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ANotification.GetReservedHeight">
            <summary>
                Get the notification reserved height.
            </summary>
            <returns>
                The reserved height in float units.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.ANotification.GetReservedWidth">
            <summary>
                Get the notification reserved width.
            </summary>
            <returns>The reserved width in float units.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.ANotification.OnDraw(SharpDX.Vector2)">
            <summary>
                OnDraw event, specifies a drawing callback which is after IDirect3DDevice9::BeginScene and before
                IDirect3DDevice9::EndScene.
            </summary>
            <param name="basePosition">
                The base position
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.ANotification.OnUpdate">
            <summary>
                OnUpdate event, occurring after a game tick.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ANotification.OnWndProc(SharpDX.Vector2,LeagueSharp.SDK.Utils.WindowsKeys,System.Boolean)">
            <summary>
                <c>OnWndProc</c> event, occurs on a windows process message to the thread.
            </summary>
            <param name="basePosition">
                The base position
            </param>
            <param name="windowsKeys">
                The windows keys
            </param>
            <param name="isEdit">
                Indicates whether it's an edit message.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Notification">
            <summary>
                The notification.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.MaximumBodyLineLength">
            <summary>
                The maximum body line length.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.MaximumHeaderLineLength">
            <summary>
                The maximum header line length.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.BodyFont">
            <summary>
                The body font.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.HeaderFont">
            <summary>
                The header font.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.HideTexture">
            <summary>
                The hide icon texture.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.Line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.Sprite">
            <summary>
                The sprite.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.animationTick">
            <summary>
                The animation tick.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.body">
            <summary>
                The body.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.footer">
            <summary>
                The footer.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.header">
            <summary>
                The header.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.hideAnimation">
            <summary>
                The hide animation boolean.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.hideOffsetX">
            <summary>
                The hide offset x axis.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.icon">
            <summary>
                The notification icon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.iconColorTick">
            <summary>
                The icon color tick.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notification.iconFlash">
            <summary>
                The icon flash.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Notification" /> class.
            </summary>
            <param name="header">
                The header
            </param>
            <param name="body">
                The body
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Notification" /> class.
            </summary>
            <param name="header">
                The header
            </param>
            <param name="body">
                The body
            </param>
            <param name="footer">
                The footer
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:LeagueSharp.SDK.Notification" /> class from being created.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.ActiveIconColor">
            <summary>
                Gets or sets the active icon color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.Body">
            <summary>
                Gets or sets the body.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.BodyTextColor">
            <summary>
                Gets or sets the body text color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.ExtraFooterPadding">
            <summary>
                Gets or sets the extra footer padding.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.Footer">
            <summary>
                Gets or sets the footer.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.FooterHeight">
            <summary>
                Gets the footer height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.FooterTextColor">
            <summary>
                Gets or sets the footer text color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.Header">
            <summary>
                Gets or sets the header.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.HeaderHeight">
            <summary>
                Gets the header height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.HeaderTextColor">
            <summary>
                Gets or sets the header text color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.Icon">
            <summary>
                Gets or sets the icon.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IconColor">
            <summary>
                Gets or sets the icon color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IconFlash">
            <summary>
                Gets or sets a value indicating whether icon flash.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IconOffset">
            <summary>
                Gets or sets the icon offset.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IsOpen">
            <summary>
                Gets or sets a value indicating whether the notification is open.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IsVisible">
            <summary>
                Gets or sets a value indicating whether the notification is visible.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.LinesList">
            <summary>
                Gets or sets the string lines list.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.SecondIconColor">
            <summary>
                Gets or sets the second icon color.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.Width">
            <summary>
                Gets the width.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.HideBitmap">
            <summary>
                Gets the hide icon bitmap.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.BodyHeight">
            <summary>
                Gets or sets the body height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.DrawBodyHeight">
            <summary>
                Gets or sets the draw body height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.DrawFooterHeight">
            <summary>
                Gets or sets the draw footer height.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notification.IconTexture">
            <summary>
                Gets or sets the icon texture.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.FormatText(System.String,System.Boolean)">
            <summary>
                Formats the given text into lines.
            </summary>
            <param name="value">
                The value.
            </param>
            <param name="htmlSupport">
                Indicates whether to support HTML tags.
            </param>
            <returns>
                The formatted list.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.GetReservedHeight">
            <summary>
                Gets the notification reserved height.
            </summary>
            <returns>
                The reserved height in float units.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.GetReservedWidth">
            <summary>
                Gets the notification reserved width.
            </summary>
            <returns>
                The reserved width in float units.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.OnDraw(SharpDX.Vector2)">
            <summary>
                OnDraw event, specifies a drawing callback which is after IDirect3DDevice9::BeginScene and before
                IDirect3DDevice9::EndScene.
            </summary>
            <param name="basePosition">
                The base position
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.OnUpdate">
            <summary>
                OnUpdate event, occurring after a game tick.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.OnWndProc(SharpDX.Vector2,LeagueSharp.SDK.Utils.WindowsKeys,System.Boolean)">
            <summary>
                <c>OnWndProc</c> event, occurs on a windows process message to the thread.
            </summary>
            <param name="basePosition">
                The base position
            </param>
            <param name="windowsKeys">
                The windows keys
            </param>
            <param name="isEdit">
                Indicates whether it's an edit message.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.GetBodyRectangle(SharpDX.Vector2)">
            <summary>
                Get body rectangle.
            </summary>
            <param name="basePosition">
                The base Position.
            </param>
            <returns>
                The <see cref="T:SharpDX.Rectangle" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Notification.GetHeaderRectangle(SharpDX.Vector2)">
            <summary>
                Get header rectangle.
            </summary>
            <param name="basePosition">
                The base Position.
            </param>
            <returns>
                The <see cref="T:System.Drawing.Rectangle" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.NotificationIcons">
            <summary>
                The notification icons.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.NotificationIcons.IconBitmaps">
            <summary>
                The icon bitmaps.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.NotificationIcons.IconTextures">
            <summary>
                The icon textures.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.NotificationIcons.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.NotificationIcons" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.NotificationIcons.GetIcon(LeagueSharp.SDK.Enumerations.NotificationIconType)">
            <summary>
                Retrieves the icon texture from the existing notification icons.
            </summary>
            <param name="iconType">
                The icon type
            </param>
            <returns>
                The <see cref="T:SharpDX.Direct3D9.Texture" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Notifications">
            <summary>
                The notifications main handler.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notifications.NotificationsList">
            <summary>
                The notifications.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Notifications.line">
            <summary>
                The line.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.Position">
            <summary>
                Gets or sets the position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.EditButtonDown">
            <summary>
                Gets or sets a value indicating whether edit button down.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.Line">
            <summary>
                Gets the line.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.Menu">
            <summary>
                Gets or sets the menu.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.MouseLocation">
            <summary>
                Gets or sets the mouse location.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.MouseOffsetX">
            <summary>
                Gets or sets the mouse offset x.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Notifications.MouseOffsetY">
            <summary>
                Gets or sets the mouse offset y.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.Add(LeagueSharp.SDK.ANotification)">
            <summary>
                Adds a notification towards the list.
            </summary>
            <param name="notification">
                The notification.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.Initialize(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Notifications" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.Remove(LeagueSharp.SDK.Notification)">
            <summary>
                Removes a notification from the list.
            </summary>
            <param name="notification">
                The notification.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.OnDraw(System.EventArgs)">
            <summary>
                OnDraw event.
            </summary>
            <param name="args">
                The event data.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.OnUpdate(System.EventArgs)">
            <summary>
                OnUpdate event.
            </summary>
            <param name="args">
                The event data.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Notifications.OnWndProc(LeagueSharp.WndEventArgs)">
            <summary>
                <c>OnWndProc</c> event.
            </summary>
            <param name="args">
                The event data.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.ActionQueue">
            <summary>
                Queues actions.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.ActionQueue.#cctor">
            <summary>
                Initializes the <see cref="T:LeagueSharp.SDK.Utils.ActionQueue" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.ActionQueue.Queues">
            <summary>
                Gets or sets the queues.
            </summary>
            <value>
                The queues.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.ActionQueue.Dequeue(System.Guid)">
            <summary>
                Dequeues the specified item.
            </summary>
            <param name="id">The identifier.</param>
            <returns><c>true</c> if the item was successfully dequeued; else <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.ActionQueue.Enqueue(LeagueSharp.SDK.Utils.ActionQueue.Item)">
            <summary>
                Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>A <see cref="T:System.Guid" /> used to dequeue items.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.ActionQueue.GetItems">
            <summary>
                Gets the items.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all of the queued items.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.ActionQueue.Game_OnUpdate(System.EventArgs)">
            <summary>
                Fired when the game updates.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.ActionQueue.Item">
            <summary>
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.ActionQueue.Item.Action">
            <summary>
                Gets or sets the action.
            </summary>
            <value>
                The action.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.ActionQueue.Item.Condition">
            <summary>
                Gets or sets the condition. If this returns <c>true</c>, the <see cref="P:LeagueSharp.SDK.Utils.ActionQueue.Item.Action" /> will be exectued.
            </summary>
            <value>
                The condition.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.ActionQueue.Item.RemoveCondition">
            <summary>
                Gets or sets the remove condition. If this returns <c>true</c>, this item will be removed.
            </summary>
            <value>
                The remove condition.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.ActionQueue.Item.Id">
            <summary>
                Gets or sets the identifier.
            </summary>
            <value>
                The identifier.
            </value>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.AutoAttack">
            <summary>
                AutoAttack utility class.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.AutoAttack.AttackResets">
            <summary>
                Spells which reset the attack timer.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.AutoAttack.Attacks">
            <summary>
                Spells that are attacks even if they don't have the "attack" word in their name.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.AutoAttack.NoAttacks">
            <summary>
                Spells that are not attacks even if they have the "attack" word in their name.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.AutoAttack.NoCancelChamps">
            <summary>
                Champions which can't cancel AA.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.CanCancelAutoAttack(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns if the hero can't cancel an AA
            </summary>
            <param name="hero">The Hero (<see cref="T:LeagueSharp.Obj_AI_Hero" />)</param>
            <returns>Returns if the hero can't cancel his AA</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.GetProjectileSpeed(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns player auto-attack missile speed.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.GetRealAutoAttackRange(LeagueSharp.AttackableUnit)">
            <summary>
                Returns the auto-attack range.
            </summary>
            <param name="target">
                The target.
            </param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.GetRealAutoAttackRange(LeagueSharp.Obj_AI_Base,LeagueSharp.AttackableUnit)">
            <summary>
                Returns the auto-attack range.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="target">
                The target.
            </param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.GetTimeToHit(LeagueSharp.AttackableUnit)">
            <summary>
                Returns the time it takes to hit a target with an auto attack
            </summary>
            <param name="target"><see cref="T:LeagueSharp.AttackableUnit" /> target</param>
            <returns>The <see cref="T:System.Single" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.InAutoAttackRange(LeagueSharp.AttackableUnit)">
            <summary>
                Returns true if the target is in auto-attack range.
            </summary>
            <param name="target">
                The target.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.IsAutoAttack(System.String)">
            <summary>
                Returns if the name is an auto attack
            </summary>
            <param name="name">Name of spell</param>
            <returns>The <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.AutoAttack.IsAutoAttackReset(System.String)">
            <summary>
                Returns true if the SpellName resets the attack timer.
            </summary>
            <param name="name">
                The name.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.BinarySerializer">
            <summary>
                The binary serializer.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
                Deserializes a binary file to the given type as object.
            </summary>
            <param name="data">
                The binary data
            </param>
            <typeparam name="T">
                The type to deserialize the object to
            </typeparam>
            <returns>
                The deserialized object instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.BinarySerializer.Serialize``1(``0)">
            <summary>
                Serializes the object to a binary file.
            </summary>
            <param name="obj">
                The object
            </param>
            <typeparam name="T">
                The type of the object
            </typeparam>
            <returns>
                The serialized object binary data.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Cache">
            <summary>
                Represents the type that implements an in-memory cache.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Cache.DefaultCacheRegionName">
            <summary>
                The default cache region name.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Cache.instance">
            <summary>
                The instance
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cache.Instance">
            <summary>
                Gets the instance.
            </summary>
            <value>
                The instance.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cache.DefaultCacheCapabilities">
            <summary>Gets a description of the features that a cache implementation provides.</summary>
            <returns>A bitwise combination of flags that indicate the default capabilities of a cache implementation.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cache.Name">
            <summary>Gets the name of a specific <see cref="T:System.Runtime.Caching.ObjectCache" /> instance. </summary>
            <returns>The name of a specific cache instance.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cache.InternalCache">
            <summary>
                Gets or sets the internal cache.
            </summary>
            <value>
                The internal cache.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cache.Item(System.String)">
            <summary>Gets or sets the default indexer for the <see cref="T:System.Runtime.Caching.ObjectCache" /> class.</summary>
            <returns>A key that serves as an indexer into the cache instance.</returns>
            <param name="key">A unique identifier for a cache entry in the cache. </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
                Tries to insert a cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance,
                and adds details about how the entry should be evicted.
            </summary>
            <returns>
                true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as
                <paramref name="item" />.
            </returns>
            <param name="item">The object to add.</param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Add(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>Inserts a cache entry into the cache without overwriting any existing cache entry. </summary>
            <returns>
                true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as
                <paramref name="key" />.
            </returns>
            <param name="key">A unique identifier for the cache entry.</param>
            <param name="value">The object to insert. </param>
            <param name="absoluteExpiration">
                The fixed date and time at which the cache entry will expire. This parameter is
                required when the <see cref="M:System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)" /> method is called.
            </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. Because regions are not implemented in .NET Framework 4, the default value is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>Inserts a cache entry into the cache, specifying information about how the entry will be evicted.</summary>
            <returns>
                true if the insertion try succeeds, or false if there is an already an entry in the cache with the same key as
                <paramref name="key" />.
            </returns>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="value">The object to insert. </param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
                Inserts a cache entry into the cache, by using a key, an object for the
                cache entry, an absolute expiration value, and an optional region to add the cache into.
            </summary>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="value">The object to insert. </param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
                Inserts the specified <see cref="T:System.Runtime.Caching.CacheItem" />
                object into the cache, specifying information about how the entry will be evicted.
            </summary>
            <returns>If a cache entry with the same key exists, the specified cache entry; otherwise, null.</returns>
            <param name="value">The object to insert. </param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
                Inserts a cache entry into the cache, specifying a key and a value for the
                cache entry, and information about how the entry will be evicted.
            </summary>
            <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="value">The object to insert.</param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Contains(System.String,System.String)">
            <summary>Checks whether the cache entry already exists in the cache.</summary>
            <returns>true if the cache contains a cache entry with the same key value as <paramref name="key" />; otherwise, false. </returns>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="regionName">
                Optional. A named region in the cache where the cache can be found, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" />
                object that can trigger events in response to changes to specified cache entries.
            </summary>
            <returns>A change monitor that monitors cache entries in the cache. </returns>
            <param name="keys">The unique identifiers for cache entries to monitor. </param>
            <param name="regionName">
                Optional. A named region in the cache where the cache keys in the <paramref name="keys" />
                parameter exist, if regions are implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Get(System.String,System.String)">
            <summary>Gets the specified cache entry from the cache as an object.</summary>
            <returns>The cache entry that is identified by <paramref name="key" />. </returns>
            <param name="key">A unique identifier for the cache entry to get. </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry was added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.GetCacheItem(System.String,System.String)">
            <summary>
                Gets the specified cache entry from the cache as a
                <see cref="T:System.Runtime.Caching.CacheItem" /> instance.
            </summary>
            <returns>The cache entry that is identified by <paramref name="key" />.</returns>
            <param name="key">A unique identifier for the cache entry to get. </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache was added, if regions are
                implemented. Because regions are not implemented in .NET Framework 4, the default is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.GetCount(System.String)">
            <summary>Gets the total number of cache entries in the cache. </summary>
            <returns>
                The number of cache entries in the cache. If <paramref name="regionName" /> is not null, the count indicates
                the number of entries that are in the specified cache region.
            </returns>
            <param name="regionName">
                Optional. A named region in the cache for which the cache entry count should be computed, if
                regions are implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Gets a set of cache entries that correspond to the specified keys.</summary>
            <returns>A dictionary of key/value pairs that represent cache entries. </returns>
            <param name="keys">A collection of unique identifiers for the cache entries to get. </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry or entries were added, if
                regions are implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.GetValues(System.String,System.String[])">
            <summary>Gets a set of cache entries that correspond to the specified keys.</summary>
            <returns>A dictionary of key/value pairs that represent cache entries. </returns>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry or entries were added, if
                regions are implemented. Because regions are not implemented in .NET Framework 4, the default is null.
            </param>
            <param name="keys">A collection of unique identifiers for the cache entries to get. </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Remove(System.String,System.String)">
            <summary>Removes the cache entry from the cache.</summary>
            <returns>
                An object that represents the value of the removed cache entry that was specified by the key, or null if the
                specified entry was not found.
            </returns>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry was added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
                Inserts a cache entry into the cache, specifying time-based expiration
                details.
            </summary>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="value">The object to insert.</param>
            <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
                Inserts the cache entry into the cache as a
                <see cref="T:System.Runtime.Caching.CacheItem" /> instance, specifying information about how the entry will be
                evicted.
            </summary>
            <param name="item">The cache item to add.</param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>Inserts a cache entry into the cache. </summary>
            <param name="key">A unique identifier for the cache entry. </param>
            <param name="value">The object to insert.</param>
            <param name="policy">
                An object that contains eviction details for the cache entry. This object provides more options
                for eviction than a simple absolute expiration.
            </param>
            <param name="regionName">
                Optional. A named region in the cache to which the cache entry can be added, if regions are
                implemented. The default value for the optional parameter is null.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.GetEnumerator">
            <summary>
                Creates an enumerator that can be used to iterate through a collection of
                cache entries.
            </summary>
            <returns>The enumerator object that provides access to the cache entries in the cache.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.AddOrGetExistingCacheRegion(System.Runtime.Caching.CacheItem)">
            <summary>
                Adds or gets an existing cache region.
            </summary>
            <param name="item">The cache item.</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.AddOrGetExistingCacheRegion(System.String)">
            <summary>
                Adds or gets an existing cache region.
            </summary>
            <param name="regionName">Name of the region.</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cache.ValidatePolicy(LeagueSharp.SDK.Utils.CacheEntryItem)">
            <summary>
                Validates the policy.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.CacheEntryItem">
            <summary>
                An entry in the cache.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.ChangeMonitors">
            <summary>
                Gets or sets the change monitors.
            </summary>
            <value>
                The change monitors.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.EntryRemovedCallback">
            <summary>
                Gets or sets the entry removed callback.
            </summary>
            <value>
                The entry removed callback.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.EntryUpdateCallback">
            <summary>
                Gets or sets the entry update callback.
            </summary>
            <value>
                The entry update callback.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.Expiration">
            <summary>
                Gets or sets the expiration.
            </summary>
            <value>
                The expiration.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.Key">
            <summary>
                Gets or sets the key.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.LastAccessed">
            <summary>
                Gets or sets the last accessed.
            </summary>
            <value>
                The last accessed.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.RegionName">
            <summary>
                Gets or sets the name of the region.
            </summary>
            <value>
                The name of the region.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.SlidingExpiration">
            <summary>
                Gets or sets the sliding expiration.
            </summary>
            <value>
                The sliding expiration.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryItem.Value">
            <summary>
                Gets or sets the value.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CacheEntryItem.ToCacheItem">
            <summary>
                Converts this instance into a <see cref="T:System.Runtime.Caching.CacheItem" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl">
            <summary>
                The <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> implemenation for the <see cref="T:LeagueSharp.SDK.Utils.Cache" /> class.
            </summary>
            <seealso cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" />
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.DateTimeOffset,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl" /> class.
            </summary>
            <param name="uniqueId">The unique identifier.</param>
            <param name="cacheKeys">The cache keys.</param>
            <param name="lastModified">The last modified.</param>
            <param name="regionName">Name of the region.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.CacheKeys">
            <summary>Gets a collection of cache keys that are monitored for changes. </summary>
            <returns>A collection of cache keys.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.LastModified">
            <summary>Gets a value that indicates the latest time (in UTC time) that the monitored cache entry was changed.</summary>
            <returns>The elapsed time.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.RegionName">
            <summary>Gets the name of a region of the cache.</summary>
            <returns>The name of a region in the cache. </returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.UniqueId">
            <summary>Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</summary>
            <returns>The identifier for a change-monitor instance.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CacheEntryChangeMonitorImpl.Dispose(System.Boolean)">
            <summary>
                Releases all managed and unmanaged resources and any references to the
                <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. This overload must be implemented by derived
                change-monitor classes.
            </summary>
            <param name="disposing">
                true to release managed and unmanaged resources and any references to a
                <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; false to release only unmanaged resources. When
                false is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called
                by a finalizer thread and any external managed references are likely no longer valid because they have already been
                garbage collected.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.CallbackPerformance">
            <summary>
                Performance class, measures how much time does a function takes to execute.
            </summary>
            <example>
                Performance.MeasureMilliseconds(() => Console.WriteLine("Measure Milliseconds!"));
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CallbackPerformance.MeasureMilliseconds(System.Action,System.Int32,System.String)">
            <summary>
                Measures and returns the elapsed milliseconds the function takes.
                (Caution: This will execute the function in real-time)
            </summary>
            <param name="funcCallback">Function to be executed and measured</param>
            <param name="iterations">Number of Times to run the callback</param>
            <param name="memberName">Member name of the function that called the measurement request.</param>
            <returns>Elapsed Milliseconds the function took (long-units)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CallbackPerformance.MeasureTicks(System.Action,System.Int32,System.String)">
            <summary>
                Measures and returns the elapsed ticks the function takes.
                (Caution: This will execute the function in real-time)
            </summary>
            <param name="funcCallback">Function to be executed and measured</param>
            <param name="iterations">Number of Times to run the callback</param>
            <param name="memberName">Member name of the function that called the measurement request.</param>
            <returns>Elapsed Ticks the function took (long-units)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.CallbackPerformance.MeasureTimeSpan(System.Action,System.Int32,System.String)">
            <summary>
                Measures and returns the elapsed time span the function takes.
                (Caution: This will execute the function in real-time)
            </summary>
            <param name="funcCallback">Function to be executed and measured</param>
            <param name="iterations">Number of Times to run the callback</param>
            <param name="memberName">Member name of the function that called the measurement request.</param>
            <returns>Elapsed Time Span the function took (long-units)</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Cursor">
            <summary>
                Cursor utility, tracks after cursor actions.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Cursor.posX">
            <summary>
                Saved Cursor X-axis position on the screen
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Cursor.posY">
            <summary>
                Saved Cursor Y-axis position on the screen
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cursor.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Utils.Cursor" /> class.
                Static Constructor
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cursor.GameScreenPosition">
            <summary>
                Gets the current Cursor Game position as a Screen Vector2.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cursor.IsOverHUD">
            <summary>
                Returns if the cursor is over a HUD item.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Cursor.Position">
            <summary>
                Gets the current Cursor position in a Vector2.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Cursor.Game_OnWndProc(LeagueSharp.WndEventArgs)">
            <summary>
                Windows Process Message subscribed event function.
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.WndEventArgs" /> data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.DelayAction">
            <summary>
                Delays actions by a set time.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayAction.Add(System.Int32,System.Action)">
            <summary>
                Adds a new delayed action.
            </summary>
            <param name="time">Delayed Time</param>
            <param name="func">Callback Function</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayAction.Add(System.Single,System.Action)">
            <summary>
                Adds a new delayed action, casting the time to an integer.
            </summary>
            <param name="time">The time(in milliseconds) to call the function.</param>
            <param name="func">The function to call once the <paramref name="time" /> has expired.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayAction.Add(System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>
                Adds a new delayed action with a cancelation token. Use the <see cref="T:System.Threading.CancellationTokenSource" /> class for
                tokens.
            </summary>
            <param name="time">The time(in milliseconds) to call the function.</param>
            <param name="func">The function to call once the <paramref name="time" /> has expired.</param>
            <param name="token">The cancelation token.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayAction.Add(System.Single,System.Action,System.Threading.CancellationToken)">
            <summary>
                Adds a new delayed action with a cancelation token. Use the <see cref="T:System.Threading.CancellationTokenSource" /> class for
                tokens.
            </summary>
            <param name="time">The time(in milliseconds) to call the function. (Gets casted into an integer)</param>
            <param name="func">The function to call once the <paramref name="time" /> has expired.</param>
            <param name="token">The cancelation token.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayAction.Add(LeagueSharp.SDK.Utils.DelayActionItem)">
            <summary>
                Adds a new delayed action.
            </summary>
            <param name="item">The <see cref="T:LeagueSharp.SDK.Utils.DelayActionItem" /> to add.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.DelayActionItem">
            <summary>
                Class that contains all of the needed information for delaying an action.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DelayActionItem.#ctor(System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.DelayActionItem" /> class.
            </summary>
            <param name="time">The time(in milliseconds) to call the function..</param>
            <param name="func">The function to call once the <paramref name="time" /> has expired.</param>
            <param name="token">The cancelation token.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.DelayActionItem.Function">
            <summary>
                Gets or sets the function.
            </summary>
            <value>
                The function.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.DelayActionItem.Time">
            <summary>
                Gets or sets the time the function will be executed at.
            </summary>
            <value>
                The time the function will be executed at.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.DelayActionItem.Token">
            <summary>
                Gets or sets the cancelation token.
            </summary>
            <value>
                The cancelation token.
            </value>
            <example>
                <see cref="T:System.Threading.CancellationTokenSource" />
            </example>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.DynamicInitializer">
            <summary>
                Dynamic instantiation from classes
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DynamicInitializer.NewInstance``1">
            <summary>
                The new instance.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DynamicInitializer.NewInstance(System.Type)">
            <summary>
                The new instance.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.DynamicInitializer.ObjectGenerator(System.Type)">
            <summary>
                Objects the generator.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Invulnerable">
            <summary>
                Invulnerable utility class
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Invulnerable.PEntries">
            <summary>
                The invulnerable entries
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.#cctor">
            <summary>
                Initializes the <see cref="T:LeagueSharp.SDK.Utils.Invulnerable" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Invulnerable.Entries">
            <summary>
                The invulnerable entries
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.Check(LeagueSharp.Obj_AI_Hero,LeagueSharp.DamageType,System.Boolean,System.Single)">
            <summary>
                Checks if the specified target is invulnerable.
            </summary>
            <param name="hero">The target.</param>
            <param name="damageType">Type of the damage.</param>
            <param name="ignoreShields">if set to <c>true</c> [ignore shields].</param>
            <param name="damage">The damage.</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.Deregister(LeagueSharp.SDK.Utils.InvulnerableEntry)">
            <summary>
                Deregisters the specified entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.GetItem(System.String,System.StringComparison)">
            <summary>
                Gets the item.
            </summary>
            <param name="buffName">Name of the buff.</param>
            <param name="stringComparison">The string comparison.</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.Register(LeagueSharp.SDK.Utils.InvulnerableEntry)">
            <summary>
                Registers the specified entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Invulnerable.ExecuteCheckFunction(LeagueSharp.SDK.Utils.InvulnerableEntry,LeagueSharp.Obj_AI_Hero,LeagueSharp.DamageType)">
            <summary>
                Executes the check function.
            </summary>
            <param name="entry">The entry.</param>
            <param name="hero">The target.</param>
            <param name="damageType">Type of the damage.</param>
            <returns></returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.InvulnerableEntry">
            <summary>
                Entry for <see cref="T:LeagueSharp.SDK.Utils.Invulnerable" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.InvulnerableEntry.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.InvulnerableEntry" /> class.
            </summary>
            <param name="buffName">Name of the buff.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.BuffName">
            <summary>
                Gets the name of the buff.
            </summary>
            <value>
                The name of the buff.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.ChampionName">
            <summary>
                Gets or sets the champion name.
            </summary>
            <value>
                The champion name.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.CheckFunction">
            <summary>
                Gets or sets the check function.
            </summary>
            <value>
                The check function.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.DamageType">
            <summary>
                Gets or sets the type of the damage.
            </summary>
            <value>
                The type of the damage.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.IsShield">
            <summary>
                Gets or sets a value indicating whether this is a shield.
            </summary>
            <value>
                <c>true</c> if this is a shield; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.InvulnerableEntry.MinHealthPercent">
            <summary>
                Gets or sets the minimum health percent.
            </summary>
            <value>
                The minimum health percent.
            </value>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.JsonFactory">
            <summary>
                JSON.NET "secure" :roto: Wrapper
            </summary>
            <remarks>
                Default Settings
                Formatting = Formatting.Indented
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                DefaultValueHandling = DefaultValueHandling.Ignore
                NullValueHandling = NullValueHandling.Ignore
                Converters = StringEnumConverter
            </remarks>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.JsonFactory.DefaultSettings">
            <summary>
                Default JsonSerializerSettings
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonFile``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from File
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonFile(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from File
            </summary>
            <param name="file"></param>
            <param name="type"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonResource``1(System.String,System.Reflection.Assembly,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from Resource
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="assembly"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonResource(System.String,System.Type,System.Reflection.Assembly,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from Resource
            </summary>
            <param name="file"></param>
            <param name="type"></param>
            <param name="assembly"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonString``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from String
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.JsonString(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserialize Object from String
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.ToFile(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Serialize Object to File
            </summary>
            <param name="file"></param>
            <param name="obj"></param>
            <param name="settings"></param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.JsonFactory.ToString(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Serialize Object to String
            </summary>
            <param name="obj"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Jungle">
            <summary>
                The jungle utility class, provides utils for jungle related items.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Jungle.LargeNameRegex">
            <summary>
                The large name regex list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Jungle.LegendaryNameRegex">
            <summary>
                The legendary name regex list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Jungle.SmallNameRegex">
            <summary>
                The small name regex list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Jungle.GetJungleType(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Get the minion jungle type.
            </summary>
            <param name="minion">
                The minion
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Enumerations.JungleType" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Jungle.IsJungleBuff(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Indicates whether the object is a jungle buff carrier.
            </summary>
            <param name="minion">
                The minion.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.MathUtils">
            <summary>
                Provides helpful extension and methods concerning Geometry.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.ClipPolygons(System.Collections.Generic.List{LeagueSharp.SDK.Polygons.Polygon})">
            <summary>
                Creates a double list of the list of <see cref="T:LeagueSharp.SDK.Polygons.Polygon" /> broken up into <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" />'s.
            </summary>
            <param name="polygons">List of <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />s</param>
            <returns>Double list of <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" />, each list clipping a polygon that was broken up.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.CutPath(System.Collections.Generic.List{SharpDX.Vector2},System.Single)">
            <summary>
                Removes vectors past a distance from a list.
            </summary>
            <param name="path">The Path</param>
            <param name="distance">The Distance</param>
            <returns>The paths in range</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.GetWaypoints(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns the path of the unit appending the ServerPosition at the start, works even if the unit just entered fog of
                war.
            </summary>
            <param name="unit">Unit to get the waypoints for</param>
            <returns>List of waypoints(<see cref="T:SharpDX.Vector2" />)</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.PositionAfter(System.Collections.Generic.List{SharpDX.Vector2},System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets the position after a set time, speed, and delay.
            </summary>
            <param name="self">List of <see cref="T:SharpDX.Vector2" />'s.</param>
            <param name="time">The Time</param>
            <param name="speed">The Speed</param>
            <param name="delay">The Delay</param>
            <returns>The position after calculations</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.ToPolygon(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint})">
            <summary>
                Converts a list of <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" />s to a <see cref="T:LeagueSharp.SDK.Polygons.Polygon" />
            </summary>
            <param name="list">List of <see cref="T:LeagueSharp.SDK.Polygons.Polygon" /></param>
            <returns>Polygon made up of <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" />s</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MathUtils.ToPolygons(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                Converts a list of lists of <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" /> to a polygon.
            </summary>
            <param name="v">List of <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" />.</param>
            <returns>List of polygons.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.MathUtils.WaypointTracker">
            <summary>
                Waypoint Tracker data container.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.MathUtils.WaypointTracker.StoredPaths">
            <summary>
                Stored Paths.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.MathUtils.WaypointTracker.StoredTick">
            <summary>
                Stored Ticks.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Minion">
            <summary>
                The minion utils, contains a set of functions to quickly operate around minions.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Minion.NormalMinionList">
            <summary>
                The normal minion list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Minion.SiegeMinionList">
            <summary>
                The siege minion list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Minion.SuperMinionList">
            <summary>
                The super minion list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.GetBestCircularFarmLocation(System.Collections.Generic.List{SharpDX.Vector2},System.Single,System.Single,System.Int32)">
            <summary>
                Returns the point where, when casted, the circular spell with hit the maximum amount of minions.
            </summary>
            <param name="minionPositions">
                List of minion positions
            </param>
            <param name="width">
                Width of the circle
            </param>
            <param name="range">
                Minions in the range of the circle.
            </param>
            <param name="useMecMax">
                ConvexHull maximum. <see cref="T:LeagueSharp.SDK.ConvexHull" />
            </param>
            <returns>
                The best <see cref="T:LeagueSharp.SDK.Utils.FarmLocation" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.GetBestLineFarmLocation(System.Collections.Generic.List{SharpDX.Vector2},System.Single,System.Single)">
            <summary>
                Returns the point where, when casted, the lineal spell with hit the maximum amount of minions.
            </summary>
            <param name="minions">
                The Minions
            </param>
            <param name="width">
                Width of the line
            </param>
            <param name="range">
                Range of the line
            </param>
            <returns>
                Best <see cref="T:LeagueSharp.SDK.Utils.FarmLocation" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.GetMinionsPredictedPositions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Minion},System.Single,System.Single,System.Single,SharpDX.Vector3,System.Single,System.Boolean,LeagueSharp.SDK.Enumerations.SkillshotType,SharpDX.Vector3)">
            <summary>
                Returns a list of predicted minion positions.
            </summary>
            <param name="minions">
                Given Minion List
            </param>
            <param name="delay">
                Skill-shot Delay
            </param>
            <param name="width">
                Skill-shot Width
            </param>
            <param name="speed">
                Skill-shot Speed
            </param>
            <param name="from">
                The From
            </param>
            <param name="range">
                Skill-shot Range
            </param>
            <param name="collision">
                Has Collision Flag
            </param>
            <param name="stype">
                Skill-shot Type
            </param>
            <param name="rangeCheckFrom">
                Range check from Vector3 source
            </param>
            <returns>
                List of Points in <see cref="T:SharpDX.Vector2" /> type
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.GetMinionType(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Gets the minion type.
            </summary>
            <param name="minion">
                The minion.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Enumerations.MinionTypes" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.IsMinion(LeagueSharp.Obj_AI_Minion)">
            <summary>
                Tells whether the <see cref="T:LeagueSharp.Obj_AI_Minion" /> is an actual minion.
            </summary>
            <param name="minion">The Minion</param>
            <returns>Whether the <see cref="T:LeagueSharp.Obj_AI_Minion" /> is an actual minion.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Minion.IsPet(LeagueSharp.Obj_AI_Minion,System.Boolean)">
            <summary>
                Tells whether the <see cref="T:LeagueSharp.Obj_AI_Minion" /> is an actual minion.
            </summary>
            <param name="minion">The Minion</param>
            <param name="includeClones">Whether to include clones.</param>
            <returns>Whether the <see cref="T:LeagueSharp.Obj_AI_Minion" /> is an actual pet.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.FarmLocation">
            <summary>
                The farm location.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.FarmLocation.MinionsHit">
            <summary>
                The minions hit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.FarmLocation.Position">
            <summary>
                The position.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.FarmLocation.#ctor(SharpDX.Vector2,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.FarmLocation" /> struct.
            </summary>
            <param name="position">
                The position.
            </param>
            <param name="minionsHit">
                The minions hit.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.MultiLanguage">
            <summary>
                Provides multi-lingual strings.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.MultiLanguage.translations">
            <summary>
                The translations
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MultiLanguage.LoadLanguage(System.String)">
            <summary>
                Loads the translation.
            </summary>
            <param name="languageName">Name of the language.</param>
            <returns><c>true</c> if the operation succeeded, <c>false</c> otherwise false.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MultiLanguage.LoadTranslation">
            <summary>
                judge the select language
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.MultiLanguage.Translation(System.String)">
            <summary>
                Translates the text into the loaded language.
            </summary>
            <param name="textToTranslate">The text to translate.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Performance">
            <summary>
                Performance block class, for block method performance logging.
            </summary>
            <example>
                using(<c>var</c> performance = new Performance())
                {
                Game.PrintChat("Test");
                <c>var</c> elapsedTicks = performance.GetTickCount();
                Logging.Write()("Game.PrintChat took {0} ticks!", elapsedTicks);
                }
            </example>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Performance.memberName">
            <summary>
                Private, string contains the calling member name.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Performance.performanceType">
            <summary>
                Private, final performance type to print once block ends.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Performance.printDispose">
            <summary>
                Indicates whether to print on dispose operation.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Performance.stopwatch">
            <summary>
                Private, Stopwatch instance, this will track the time it takes to execute functions inside the block.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.#ctor(LeagueSharp.SDK.Enumerations.PerformanceType,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Performance" /> class.
            </summary>
            <param name="performanceType">
                The performance Type.
            </param>
            <param name="printDispose">
                The print on dispose operation.
            </param>
            <param name="memberName">
                The member Name.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:LeagueSharp.SDK.Utils.Performance" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.Dispose">
            <summary>
                Disposable requirement, redirects to a safe disposable function.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.GetMilliseconds">
            <summary>
                Returns the milliseconds count from the start of the block.
            </summary>
            <returns>Milliseconds count from the start of the block.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.GetTickCount">
            <summary>
                Returns the tick count from the start of the block.
            </summary>
            <returns>Tick count from the start of the block.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.GetTimeSpan">
            <summary>
                Returns the TimeSpan count data from the start of the block.
            </summary>
            <returns>TimeSpan count data from the start of the block.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Performance.Dispose(System.Boolean)">
            <summary>
                Safe Dispose method.
            </summary>
            <param name="safe">Is Safe (Is not finalized by GC).</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render">
            <summary>
                The render class allows you to draw stuff using SharpDX easier.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Device">
            <summary>
                Gets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Add(LeagueSharp.SDK.Utils.Render.RenderObject,System.Single)">
            <summary>
                Adds the specified layer.
            </summary>
            <param name="renderObject">The render object.</param>
            <param name="layer">The layer.</param>
            <returns>RenderObject.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.OnScreen(SharpDX.Vector2)">
            <summary>
                Determines if the point is on the screen.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if the point is on the screen, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Remove(LeagueSharp.SDK.Utils.Render.RenderObject)">
            <summary>
                Removes the specified render object.
            </summary>
            <param name="renderObject">The render object.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Circle">
            <summary>
                Draws circles.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.#ctor(LeagueSharp.GameObject,System.Single,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Circle" /> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="zDeep">if set to <c>true</c> [z deep].</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.#ctor(LeagueSharp.GameObject,SharpDX.Vector3,System.Single,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Circle" /> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="offset">The offset.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="zDeep">if set to <c>true</c> [z deep].</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Circle" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="offset">The offset.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="zDeep">if set to <c>true</c> [z deep].</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.#ctor(SharpDX.Vector3,System.Single,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Circle" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="zDeep">if set to <c>true</c> [z deep].</param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Color">
            <summary>
                Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Offset">
            <summary>
                Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Position">
            <summary>
                Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Radius">
            <summary>
                Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Unit">
            <summary>
                Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.Width">
            <summary>
                Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Circle.ZDeep">
            <summary>
                Gets or sets a value indicating whether to enable depth buffering.
            </summary>
            <value><c>true</c> if depth buffering enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.CreateVertexes">
            <summary>
                Creates the vertexes.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.DrawCircle(SharpDX.Vector3,System.Single,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
                Draws the circle.
            </summary>
            <param name="position">The position.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="zDeep">if set to <c>true</c> the circle will be drawn with depth buffering.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Circle.OnDraw">
            <summary>
                Called when the circle is drawn.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Line">
            <summary>
                Draws lines.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Line.Color">
            <summary>
                The color
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Line.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Int32,SharpDX.ColorBGRA)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Line" /> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Line.PositionDelegate">
            <summary>
                Delegate to get the position of the line.
            </summary>
            <returns>Vector2.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Line.End">
            <summary>
                Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Line.EndPositionUpdate">
            <summary>
                Gets or sets the delegate that gets the end position.
            </summary>
            <value>The end position update.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Line.Start">
            <summary>
                Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Line.StartPositionUpdate">
            <summary>
                Gets or sets the delegate that sets the start position.
            </summary>
            <value>The start position update.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Line.Width">
            <summary>
                Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Line.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Line.OnEndScene">
            <summary>
                Called when the scene has ended.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Line.OnPostReset">
            <summary>
                Called after the DirectX is reset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Line.OnPreReset">
            <summary>
                Called before the DirectX device is reset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Rectangle">
            <summary>
                Draws a Rectangle.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Rectangle.Color">
            <summary>
                The color of the rectangle
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SharpDX.ColorBGRA)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Rectangle" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Rectangle.PositionDelegate">
            <summary>
                Delegate to get the position of the rectangle.
            </summary>
            <returns>Vector2.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Rectangle.Height">
            <summary>
                Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Rectangle.PositionUpdate">
            <summary>
                Gets or sets the delegate that gets the position.
            </summary>
            <value>The position update.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Rectangle.Width">
            <summary>
                Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Rectangle.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Rectangle.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Rectangle.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Rectangle.OnEndScene">
            <summary>
                Called when [end scene].
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Rectangle.OnPostReset">
            <summary>
                Called after the DirectX device is reset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Rectangle.OnPreReset">
            <summary>
                Called before the DirectX device is reset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.RenderObject">
            <summary>
                A base class that renders objects.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.RenderObject.Layer">
            <summary>
                The layer
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.RenderObject.VisibleCondition">
            <summary>
                The visible condition delegate.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.RenderObject.VisibleConditionDelegate">
            <summary>
                Delegate that gets if the object is visible.
            </summary>
            <param name="sender">The sender.</param>
            <returns><c>true</c> if the object is visible, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.RenderObject.HasValidLayer">
            <summary>
                Determines whether this instace has a valid layer.
            </summary>
            <returns><c>true</c> if has a valid layer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.RenderObject.Visible">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.Utils.Render.RenderObject" /> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.RenderObject.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.RenderObject.OnDraw">
            <summary>
                Called when the render object is drawn.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.RenderObject.OnEndScene">
            <summary>
                Called when the scene has ended..
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.RenderObject.OnPostReset">
            <summary>
                Called after the DirectX device is reset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.RenderObject.OnPreReset">
            <summary>
                Called before the DirectX device is reset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Sprite">
            <summary>
                Draws a sprite image.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.#ctor(System.Drawing.Bitmap,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Sprite" /> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.#ctor(SharpDX.Direct3D9.BaseTexture,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Sprite" /> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.#ctor(System.IO.Stream,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Sprite" /> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.#ctor(System.Byte[],SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Sprite" /> class.
            </summary>
            <param name="bytesArray">The bytes array.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.#ctor(System.String,SharpDX.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Sprite" /> class.
            </summary>
            <param name="fileLocation">The file location.</param>
            <param name="position">The position.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Sprite.OnResetting">
            <summary>
                Delegate for when the sprite is reset.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Sprite.PositionDelegate">
            <summary>
                Delegate that gets the position of the sprite.
            </summary>
            <returns>Vector2.</returns>
        </member>
        <member name="E:LeagueSharp.SDK.Utils.Render.Sprite.OnReset">
            <summary>
                Occurs when the sprite is reset.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Bitmap">
            <summary>
                Gets or sets the bitmap.
            </summary>
            <value>The bitmap.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Color">
            <summary>
                Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Height">
            <summary>
                Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Position">
            <summary>
                Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.PositionUpdate">
            <summary>
                Gets or sets the delegate that gets the position.
            </summary>
            <value>The position update.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Rotation">
            <summary>
                Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Scale">
            <summary>
                Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Size">
            <summary>
                Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Width">
            <summary>
                Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Sprite.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Complement">
            <summary>
                Complements this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Crop(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Crops the sprite.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
            <param name="scale">if set to <c>true</c>, crops with the scale.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Crop(SharpDX.Rectangle,System.Boolean)">
            <summary>
                Crops the sprite.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">if set to <c>true</c>, crops with the scale.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Dispose">
            <summary>
                Disposes this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Fade">
            <summary>
                Fades this instance. (Saturation is 1/2)
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.GrayScale">
            <summary>
                Makes the sprite black and white.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Hide">
            <summary>
                Hides this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.OnEndScene">
            <summary>
                Called when the scene has ended.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.OnPostReset">
            <summary>
                Called after the DirectX device is reset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.OnPreReset">
            <summary>
                Called before the DirectX device is reset..
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.SetSaturation(System.Single)">
            <summary>
                Sets the saturation.
            </summary>
            <param name="saturiation">The saturiation.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.Show">
            <summary>
                Shows this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Sprite.UpdateTextureBitmap(System.Drawing.Bitmap,SharpDX.Vector2)">
            <summary>
                Updates the texture bitmap.
            </summary>
            <param name="newBitmap">The new bitmap.</param>
            <param name="position">The position.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Text">
            <summary>
                Object used to draw text on the screen.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.Centered">
            <summary>
                <c>true</c> if the text should be centered at the position.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.Offset">
            <summary>
                The offset
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.OutLined">
            <summary>
                <c>true</c> if the text should have an outline.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.PositionUpdate">
            <summary>
                The delegate that updates the position of the text.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.TextUpdate">
            <summary>
                The delegate that updates the text.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Render.Text.Unit">
            <summary>
                The unit
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.#ctor(System.String,System.Int32,System.Int32,System.Int32,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Text" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="size">The size.</param>
            <param name="color">The color.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.#ctor(System.String,SharpDX.Vector2,System.Int32,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Text" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <param name="color">The color.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.#ctor(System.String,LeagueSharp.Obj_AI_Base,SharpDX.Vector2,System.Int32,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Text" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="unit">The unit.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="color">The color.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.#ctor(System.Int32,System.Int32,System.String,System.Int32,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Text" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <param name="color">The color.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.#ctor(SharpDX.Vector2,System.String,System.Int32,SharpDX.ColorBGRA,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Render.Text" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="text">The text.</param>
            <param name="size">The size.</param>
            <param name="color">The color.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Text.PositionDelegate">
            <summary>
                Delegate that gets the position of the text.
            </summary>
            <returns>Vector2.</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Render.Text.TextDelegate">
            <summary>
                Delegate that gets the text.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.Color">
            <summary>
                Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.Height">
            <summary>
                Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.TextFontDescription">
            <summary>
                Gets or sets the text font description.
            </summary>
            <value>The text font description.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.TextString">
            <summary>
                Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.Width">
            <summary>
                Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Render.Text.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.Dispose">
            <summary>
                Disposes this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.OnEndScene">
            <summary>
                Called when the scene has ended.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.OnPostReset">
            <summary>
                Called after the DirectX device has been reset.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Render.Text.OnPreReset">
            <summary>
                Called before the DirectX device is reset.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.Storage">
            <summary>
                The storage, main purpose is to save share-able settings between assemblies.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Storage.StorageList">
            <summary>
                The storage list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Storage.contents">
            <summary>
                The storage contents.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.Storage.storageName">
            <summary>
                The storage name.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.Utils.Storage" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.#ctor(System.String,System.Collections.Generic.List{System.Type})">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Storage" /> class.
            </summary>
            <param name="storageName">
                The storage name
            </param>
            <param name="types">
                The types.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Storage" /> class.
            </summary>
            <param name="storageName">
                The storage name.
            </param>
            <param name="isAttribute">
                Indicates whether the storage is placed as an attribute.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.#ctor(System.String,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.Storage" /> class.
            </summary>
            <param name="storageName">
                The storage name.
            </param>
            <param name="type">
                The parent type which is currently holding the field or property.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Storage.Contents">
            <summary>
                Gets the contents.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Storage.StorageName">
            <summary>
                Gets or sets the storage name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Storage.StorageTypes">
            <summary>
                Gets or sets the storage types.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.Storage.StoragePath">
            <summary>
                Gets or sets the storage path.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Exists(System.String)">
            <summary>
                Checks if a certain storage exists.
            </summary>
            <param name="storageName">
                The storage name.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Load(System.String,System.Collections.Generic.List{System.Type})">
            <summary>
                Loads a saved storage.
            </summary>
            <param name="storageName">
                Storage name
            </param>
            <param name="types">
                The types.
            </param>
            <returns>
                The storage instance.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Add(System.String,System.Object)">
            <summary>
                Add a content to the storage.
            </summary>
            <param name="key">
                The key
            </param>
            <param name="value">
                The value
            </param>
            <returns>
                Whether the content was added towards the storage.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Get``1(System.String)">
            <summary>
                Get a content from the storage.
            </summary>
            <param name="key">
                The key
            </param>
            <typeparam name="T">
                The value type
            </typeparam>
            <returns>
                The value with the requested value type.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Remove(System.String)">
            <summary>
                Remove a content from the storage.
            </summary>
            <param name="key">
                The key
            </param>
            <returns>
                Whether the value was removed the storage.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Save">
            <summary>
                Saves all of the current storage contents.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.Storage.Update(System.String,System.Object)">
            <summary>
                Updates a content based on the given key.
            </summary>
            <param name="key">
                The key
            </param>
            <param name="value">
                The value
            </param>
            <returns>
                Whether the operation was successful and the value was updated.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.TickOperation">
            <summary>
                Executes an operation each set amount of ticks.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.TickOperation.nextTick">
            <summary>
                Contains the next tick value that Action should be executed.
                <seealso cref="P:LeagueSharp.SDK.Utils.TickOperation.Action" />
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.TickOperation.#ctor(System.Int32,System.Action,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.TickOperation" /> class.
                Constructor for a new Tick Operation instance, auto-starts by default.
            </summary>
            <param name="tickDelay">
                A set delay between ticks the action should be executed.
            </param>
            <param name="action">
                The executed action.
            </param>
            <param name="runOnce">
                Should executed action be ran(executed) at least once.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.TickOperation.Action">
            <summary>
                Gets or sets the Executed Action.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.TickOperation.IsRunning">
            <summary>
                Gets or sets a value indicating whether is the Tick Operation is currently running
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.TickOperation.TickDelay">
            <summary>
                Gets or sets a delay between ticks that action should be executed.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.TickOperation.Dispose">
            <summary>
                Disposal of the Tick Operation.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.TickOperation.Start(System.Boolean)">
            <summary>
                Starts the tick operation.
            </summary>
            <param name="runOnce">Should executed action be ran(executed) at least once.</param>
            <returns>Tick Operation instance.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.TickOperation.Stop">
            <summary>
                Stops the tick operation.
            </summary>
            <returns>Tick Operation instance.</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.TickOperation.OnTick(System.EventArgs)">
            <summary>
                Notified function per game tick by Game.OnGameUpdate event.
                Executes the action if met tick requirements.
            </summary>
            <param name="args"><see cref="T:System.EventArgs" /> event data</param>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.WeightedRandom">
            <summary>
                Weighted Random, contains useful extensions for randomizer.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WeightedRandom.Random">
            <summary>
                Gets or sets the random that is being used by WeightedRandom.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.WeightedRandom.Next(System.Int32,System.Int32)">
            <summary>
                Returns a random integer
            </summary>
            <param name="min">Minimum range</param>
            <param name="max">Maximum range</param>
            <returns>Random Integer</returns>
        </member>
        <member name="T:LeagueSharp.SDK.Utils.WindowsKeys">
            <summary>
                Utility class to translate Windows Messages into keys or into <see cref="T:LeagueSharp.SDK.Enumerations.WindowsMessages" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Utils.WindowsKeys.args">
            <summary>
                The arguments
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Utils.WindowsKeys.#ctor(LeagueSharp.WndEventArgs)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Utils.WindowsKeys" /> class.
                WindowsKeys constructor
            </summary>
            <param name="args">
                <see cref="T:LeagueSharp.WndEventArgs" /> event data
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.Cursor">
            <summary>
                Gets the Cursor Position
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.Char">
            <summary>
                Gets the textual representation of the input.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.Key">
            <summary>
                Gets the full name of the mapped key.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.Msg">
            <summary>
                Gets the message of the key.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.Process">
            <summary>
                Gets or sets a value indicating whether to process the command.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.SideButton">
            <summary>
                Gets the side button.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.SingleKey">
            <summary>
                Gets the single name of the mapped key.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Utils.WindowsKeys.WParam">
            <summary>
                Gets the <c>WParam</c>
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Variables">
            <summary>
                Variables of the LeagueSharp development kit.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Variables.KitVersion">
            <summary>
                The kit version.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Variables.Orbwalker">
            <summary>
                Gets the Orbwalker instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Variables.TargetSelector">
            <summary>
                Gets the TargetSelector instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Variables.TickCount">
            <summary>
                Gets the TickCount based on the game runtime clock.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Variables.LeagueSharpMenu">
            <summary>
                Gets or sets the LeagueSharp menu.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Damage">
            <summary>
                Damage wrapper class, contains functions to calculate estimated damage to a unit and also provides damage details.
            </summary>
            <summary>
                Damage wrapper class, contains functions to calculate estimated damage to a unit and also provides damage details.
            </summary>
            <summary>
                Damage wrapper class, contains functions to calculate estimated damage to a unit and also provides damage details.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.CalculateDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,LeagueSharp.DamageType,System.Double)">
            <summary>
                Gets the calculated damage based on the given damage type onto the target from source.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="damageType">
                The damage type
            </param>
            <param name="amount">
                The amount
            </param>
            <returns>
                The estimated damage from calculations.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.CalculateMixedDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double,System.Double)">
            <summary>
                Gets the calculated mixed damage onto the target from source.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="physicalAmount">
                The physical amount
            </param>
            <param name="magicalAmount">
                The magical amount
            </param>
            <returns>
                The estimated damage from calculations.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.GetAutoAttackDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the source auto attack damage on the target.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <returns>
                The estimated auto attack damage.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.GetSpellDamage(LeagueSharp.Obj_AI_Hero,LeagueSharp.Obj_AI_Base,LeagueSharp.SpellSlot,LeagueSharp.Data.Enumerations.DamageStage)">
            <summary>
                Get the spell damage value.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="spellSlot">
                The spell slot
            </param>
            <param name="stage">
                The stage
            </param>
            <returns>
                The <see cref="T:System.Double" /> value of damage.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.CalculatePhysicalDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double,System.Double)">
            <summary>
                Calculates the physical damage the source would deal towards the target on a specific given amount, taking in
                consideration all of the damage modifiers.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="amount">
                The amount of damage
            </param>
            <param name="ignoreArmorPercent">
                The amount of armor to ignore.
            </param>
            <returns>
                The amount of estimated damage dealt to target from source.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.CalculateMagicDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double)">
            <summary>
                Calculates the magic damage the source would deal towards the target on a specific given amount, taking in
                consideration all of the damage modifiers.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="amount">
                The amount
            </param>
            <returns>
                The amount of estimated damage dealt to target from source.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.CalculatePhysicalDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double)">
            <summary>
                Calculates the physical damage the source would deal towards the target on a specific given amount, taking in
                consideration all of the damage modifiers.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="amount">
                The amount of damage
            </param>
            <returns>
                The amount of estimated damage dealt to target from source.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.DamageReductionMod(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double,LeagueSharp.DamageType)">
            <summary>
                Applies damage reduction mod calculations towards the given amount of damage, a modifier onto the amount based on
                damage reduction passives.
            </summary>
            <param name="source">
                The source.
            </param>
            <param name="target">
                The target.
            </param>
            <param name="amount">
                The amount.
            </param>
            <param name="damageType">
                The damage Type.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.PassiveFlatMod(LeagueSharp.GameObject,LeagueSharp.Obj_AI_Base)">
            <summary>
                Apples passive percent mod calculations towards the given amount of damage, a modifier onto the amount based on
                passive flat effects.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <returns>
                The damage after passive flat modifier calculations.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.PassivePercentMod(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,System.Double,LeagueSharp.DamageType)">
            <summary>
                Apples passive percent mod calculations towards the given amount of damage, a modifier onto the amount based on
                passive percent effects.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="amount">
                The amount
            </param>
            <param name="damageType">
                The damage Type.
            </param>
            <returns>
                The damage after passive percent modifier calculations.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.Damage.DamageCollection">
            <summary>
                Gets the Damage Collection.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.Initialize">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Damage" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.ResolveBonusSpellDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base,LeagueSharp.Data.DataTypes.ChampionDamageSpellBonus,System.Int32)">
            <summary>
                Resolves the spell bonus damage.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target
            </param>
            <param name="spellBonus">
                The spell bonus collection
            </param>
            <param name="index">
                The index (spell level - 1)
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Damage.GetPassiveDamageInfo(LeagueSharp.Obj_AI_Hero,LeagueSharp.Obj_AI_Base,System.Boolean)">
            <summary>
                Gets the passive raw damage summary.
            </summary>
            <param name="source">
                The source
            </param>
            <param name="target">
                The target.
            </param>
            <param name="getOverride">
                Get override damage.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Items">
            <summary>
                Item class used to easily manage items.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Items.CanUseItem(System.String)">
            <summary>
                Returns true if the player has the item and its not on cool-down.
            </summary>
            <param name="name">
                Name of the Item.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.CanUseItem(System.Int32)">
            <summary>
                Returns true if the player has the item and its not on cool-down.
            </summary>
            <param name="id">
                Id of the Item.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.GetWardSlot">
            <summary>
                Returns the ward slot.
            </summary>
            <returns>
                The <see cref="T:LeagueSharp.InventorySlot" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.HasItem(System.String,LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns true if the hero has the item.
            </summary>
            <param name="name">
                Name of the Item.
            </param>
            <param name="hero">
                Hero to be checked.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.HasItem(System.Int32,LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns true if the hero has the item.
            </summary>
            <param name="id">
                Id of the Item.
            </param>
            <param name="hero">
                Hero to be checked.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.UseItem(System.String,LeagueSharp.Obj_AI_Base)">
            <summary>
                Casts the item on the target.
            </summary>
            <param name="name">
                Name of the Item.
            </param>
            <param name="target">
                Target to be hit.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.UseItem(System.Int32,LeagueSharp.Obj_AI_Base)">
            <summary>
                Casts the item on the target.
            </summary>
            <param name="id">
                Id of the Item.
            </param>
            <param name="target">
                Target to be hit.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.UseItem(System.Int32,SharpDX.Vector2)">
            <summary>
                Casts the item on a Vector2 position.
            </summary>
            <param name="id">
                Id of the Item.
            </param>
            <param name="position">
                Position of the Item cast.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.UseItem(System.Int32,SharpDX.Vector3)">
            <summary>
                Casts the item on a Vector3 position.
            </summary>
            <param name="id">
                Id of the Item.
            </param>
            <param name="position">
                Position of the Item cast.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Items.Item">
            <summary>
                Item class.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Items.Item.range">
            <summary>
                Range of the Item
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.#ctor(System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Items.Item" /> class.
            </summary>
            <param name="id">
                The Id
            </param>
            <param name="range">
                The Range
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.#ctor(LeagueSharp.ItemId,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Items.Item" /> class.
            </summary>
            <param name="id">The item identifier.</param>
            <param name="range">The range.</param>
            <exception cref="T:System.MissingMemberException">Thrown when we were unable to find the item with same id.</exception>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.BasePrice">
            <summary>
                Gets the base price.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.HideFromAll">
            <summary>
                Gets a value indicating whether hide from all.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Id">
            <summary>
                Gets the Id of the Item.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.IsReady">
            <summary>
                Gets a value indicating whether is ready.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Name">
            <summary>
                Gets the Name of the Item
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Purchaseable">
            <summary>
                Gets a value indicating whether purchase-able.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Range">
            <summary>
                Gets or sets the range.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.RangeSqr">
            <summary>
                Gets the range squared.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.SellPrice">
            <summary>
                Gets the sell price.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Slot">
            <summary>
                Gets the Slot of the Item
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Items.Item.Stacks">
            <summary>
                Gets the maximum stacks.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.Buy">
            <summary>
                Buys the Items.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.Cast">
            <summary>
                Casts the Item.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.Cast(LeagueSharp.Obj_AI_Base)">
            <summary>
                Casts the Item on a Target.
            </summary>
            <param name="target">
                Target as <c>Obj_AI_Base</c>.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.Cast(SharpDX.Vector2)">
            <summary>
                Casts the Item on a Position.
            </summary>
            <param name="position">
                Position as Vector2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.Cast(SharpDX.Vector3)">
            <summary>
                Casts the Item on a Position.
            </summary>
            <param name="position">
                Position as Vector3.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.IsInRange(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns if the target is in the range of the Item.
            </summary>
            <param name="target">
                Target to be checked.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.IsInRange(SharpDX.Vector2)">
            <summary>
                Returns if the position is in the range of the Item.
            </summary>
            <param name="position">
                Position to be checked.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.IsInRange(SharpDX.Vector3)">
            <summary>
                Returns if the position is in the range of the Item.
            </summary>
            <param name="position">
                Position to be checked.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Items.Item.IsOwned(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Returns if the Item is owned.
            </summary>
            <param name="target">
                Target as <c>Obj_AI_Hero</c>.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.OrbwalkingActionArgs">
            <summary>
                The orbwalking action event data.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.OrbwalkingActionArgs.Position">
            <summary>
                Gets or sets the position.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.OrbwalkingActionArgs.Process">
            <summary>
                Gets or sets a value indicating whether process.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.OrbwalkingActionArgs.Target">
            <summary>
                Gets the target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.OrbwalkingActionArgs.Type">
            <summary>
                Gets the type.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Orbwalker">
            <summary>
                The <c>Orbwalk</c> system.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="M:LeagueSharp.SDK.Orbwalker.Orbwalk(LeagueSharp.AttackableUnit,System.Nullable{SharpDX.Vector3})" /> class.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Orbwalker.OnActionDelegate">
            <summary>
                The<see cref="E:LeagueSharp.SDK.Orbwalker.OnAction" /> event delegate.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="e">
                The event data
            </param>
        </member>
        <member name="E:LeagueSharp.SDK.Orbwalker.OnAction">
            <summary>
                The OnAction event.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.ActiveMode">
            <summary>
                Gets or sets value indication in which mode Orbwalk should run.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.AttackState">
            <summary>
                Gets or sets a value indicating whether movement.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.CanAttack">
            <summary>
                Indicates whether the orbwalker can issue attacking.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.CanMove">
            <summary>
                Indicates whether the orbwalker can issue moving.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.Enabled">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.Orbwalker" /> is enabled.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.ForceOrbwalkPoint">
            <summary>
                Force orbwalker to orbwalk to a point. Set to null to stop forcing.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.ForceTarget">
            <summary>
                Gets or sets the orbwalker's forced target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.LastAutoAttackTick">
            <summary>
                Gets the last auto attack tick.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.LastTarget">
            <summary>
                Gets the last target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Orbwalker.MovementState">
            <summary>
                Gets or sets a value indicating whether attack.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.Attack(LeagueSharp.AttackableUnit)">
            <summary>
                Use orbwalker to attack
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.GetTarget">
            <summary>
                Get target for orbwalker
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.Move(SharpDX.Vector3)">
            <summary>
                Use orbwalker to move
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.Orbwalk(LeagueSharp.AttackableUnit,System.Nullable{SharpDX.Vector3})">
            <summary>
                <c>Orbwalk</c> command, attempting to attack or move.
            </summary>
            <param name="target">
                The target of choice
            </param>
            <param name="position">
                The position of choice
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.ResetSwingTimer">
            <summary>
                Resets the swing timer.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.OrbwalkerSelector.#ctor(LeagueSharp.SDK.Orbwalker)">
            <summary>
                Initializes a new instance of the <see cref="F:LeagueSharp.SDK.Orbwalker.selector" /> class.
            </summary>
            <param name="orbwalk">
                The orbwalker.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.OrbwalkerSelector.GetEnemyMinions(System.Single)">
            <summary>
                Gets the enemy minions.
            </summary>
            <param name="range">
                The range.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:LeagueSharp.Obj_AI_Minion" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Orbwalker.OrbwalkerSelector.GetTarget(LeagueSharp.SDK.Enumerations.OrbwalkingMode)">
            <summary>
                Gets the target.
            </summary>
            <param name="mode">
                The mode.
            </param>
            <returns>
                Returns the filtered target.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.LastCast">
            <summary>
                Extension for getting the last casted spell of an <see cref="T:LeagueSharp.Obj_AI_Hero" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.LastCast.CastedSpells">
            <summary>
                Casted Spells of the champions
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.LastCast.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.LastCast" /> class.
                Static constructor
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCast.LastCastPacketSent">
            <summary>
                Gets the last cast packet sent.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.LastCast.GetLastCastedSpell(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the <see cref="T:LeagueSharp.SDK.LastCastedSpellEntry" /> of the unit.
            </summary>
            <param name="target">The Target</param>
            <returns>
                <see cref="T:LeagueSharp.SDK.LastCastedSpellEntry" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.LastCast.Obj_AI_Hero_OnProcessSpellCast(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                Function that is called by the OnProcessSpellCast event.
            </summary>
            <param name="sender">
                The Sender
            </param>
            <param name="args">
                Processed Spell Cast Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.LastCast.OnCastSpell(LeagueSharp.Spellbook,LeagueSharp.SpellbookCastSpellEventArgs)">
            <summary>
                OnCastSpell event.
            </summary>
            <param name="sender">
                The sender
            </param>
            <param name="args">
                The event data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Map">
            <summary>
                Utility for the Maps in League of Legends.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Map.Maps">
            <summary>
                Map by ID list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Map.GetMap">
            <summary>
                Gets the current game map.
            </summary>
            <returns>
                The current map information.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.LastCastedSpellEntry">
            <summary>
                Holds information about the last casted spell a unit did.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.LastCastedSpellEntry.#ctor(LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.LastCastedSpellEntry" /> class.
            </summary>
            <param name="args">
                Processed Casted Spell Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.LastCastedSpellEntry.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.LastCastedSpellEntry" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.EndTime">
            <summary>
                Gets or sets the end time of the cast.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.IsValid">
            <summary>
                Gets or sets a value indicating whether is the spell is valid and not empty.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.Name">
            <summary>
                Gets or sets the name of the spell last casted.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.SpellData">
            <summary>
                Gets or sets the <see cref="P:LeagueSharp.SDK.LastCastedSpellEntry.SpellData" /> of the spell casted.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.StartTime">
            <summary>
                Gets or sets the Start time of the cast.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastedSpellEntry.Target">
            <summary>
                Gets or sets the Target
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.LastCastPacketSentEntry">
            <summary>
                The last cast packet sent entry.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.LastCastPacketSentEntry.#ctor(LeagueSharp.SpellSlot,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.LastCastPacketSentEntry" /> class.
            </summary>
            <param name="slot">
                The slot
            </param>
            <param name="tick">
                The tick
            </param>
            <param name="targetNetworkId">
                The target network id
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastPacketSentEntry.Slot">
            <summary>
                Gets the slot.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastPacketSentEntry.TargetNetworkId">
            <summary>
                Gets the target network id.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.LastCastPacketSentEntry.Tick">
            <summary>
                Gets the tick.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Spell">
            <summary>
                Spell Container
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.chargedCastedT">
            <summary>
                Charged Cast Tick
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.chargedReqSentT">
            <summary>
                Charged Request Sent Tick
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.from">
            <summary>
                From Vector3 Source
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.minManaPercent">
            <summary>
                The Minimum Mana Percentage
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.range">
            <summary>
                The Range
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.rangeCheckFrom">
            <summary>
                Range Check From Vector3 Source
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Spell.width">
            <summary>
                The Width
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Spell" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.#ctor(LeagueSharp.SpellSlot)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Spell" /> class using SpellDatabase values!
            </summary>
            <param name="slot">The SpellSlot</param>
            <param name="championName">The Champion Name</param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.#ctor(LeagueSharp.SpellSlot,System.Boolean,LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Spell" /> class.
            </summary>
            <param name="slot">
                The SpellSlot
            </param>
            <param name="loadFromGame">
                Load SpellData From Game
            </param>
            <param name="hitChance">
                Minimum Hit Chance
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.#ctor(LeagueSharp.SpellSlot,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Spell" /> class.
            </summary>
            <param name="slot">
                The Slot
            </param>
            <param name="range">
                Spell Range
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Spell.CastConditionDelegate">
            <summary>
                Cast Condition Delegate
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.CastCondition">
            <summary>
                Condition to Cast Spell
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Collision">
            <summary>
                Gets or sets a value indicating whether collision.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.ChargedBuffName">
            <summary>
                Gets or sets the charged buff name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.ChargedMaxRange">
            <summary>
                Gets or sets the charged max range.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.ChargedMinRange">
            <summary>
                Gets or sets the charged min range.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.ChargedSpellName">
            <summary>
                Gets or sets the charged spell name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.ChargeDuration">
            <summary>
                Gets or sets the charge duration.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.DamageType">
            <summary>
                Gets or sets the damage type.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Delay">
            <summary>
                Gets or sets the delay.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.From">
            <summary>
                Gets or sets the from.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Instance">
            <summary>
                Gets the instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.IsChargedSpell">
            <summary>
                Gets or sets a value indicating whether is charged spell.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.IsCharging">
            <summary>
                Gets a value indicating whether is charging.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.IsSkillshot">
            <summary>
                Gets or sets a value indicating whether is skill-shot.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.LastCastAttemptT">
            <summary>
                Gets or sets the last cast attempt t.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Level">
            <summary>
                Gets the level.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.MinHitChance">
            <summary>
                Gets or sets the min hit chance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Range">
            <summary>
                Gets or sets the range.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.RangeCheckFrom">
            <summary>
                Gets or sets the range check from.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.RangeSqr">
            <summary>
                Gets the range squared.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Slot">
            <summary>
                Gets or sets the slot.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Speed">
            <summary>
                Gets or sets the speed.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Type">
            <summary>
                Gets or sets the type.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.Width">
            <summary>
                Gets or sets the width.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Spell.WidthSqr">
            <summary>
                Gets the width squared.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CanCast(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns if a spell can be cast and the target is in range.
            </summary>
            <param name="unit">
                The Target
            </param>
            <returns>
                Can spell be casted and target is in range
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CanKill(LeagueSharp.Obj_AI_Base,LeagueSharp.Data.Enumerations.DamageStage)">
            <summary>
                Returns if a spell can kill a target.
            </summary>
            <param name="unit">The Target</param>
            <param name="stage">
                The <see cref="T:LeagueSharp.Data.Enumerations.DamageStage" /> of the spell.
            </param>
            <returns>Can spell kill target</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast(LeagueSharp.Obj_AI_Base,System.Boolean,System.Boolean,System.Int32,LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Casts the spell.
            </summary>
            <param name="unit">Unit to cast on</param>
            <param name="exactHitChance">
                Is exact hit chance
            </param>
            <param name="areaOfEffect">
                Is Area of Effect
            </param>
            <param name="minTargets">
                Minimum of Targets
            </param>
            <param name="tempHitChance">
                Temporary HitChance Override
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Enumerations.CastStates" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast">
            <summary>
                Cast Spell onto self
            </summary>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast(SharpDX.Vector2,SharpDX.Vector2)">
            <summary>
                Cast Spell from a Vector2 to another Vector2 boundaries
            </summary>
            <param name="fromPosition">
                From Position
            </param>
            <param name="toPosition">
                To Position
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Cast Spell from a Vector3 to another Vector3 boundaries
            </summary>
            <param name="fromPosition">
                From Position
            </param>
            <param name="toPosition">
                To Position
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast(SharpDX.Vector2)">
            <summary>
                Cast Spell to a Vector2
            </summary>
            <param name="position">
                The Position
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Cast(SharpDX.Vector3)">
            <summary>
                Cast Spell to a Vector3
            </summary>
            <param name="position">
                The Position
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CastIfHitchanceEquals(LeagueSharp.Obj_AI_Base,LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Cast Spell if HitChance equals to input HitChance
            </summary>
            <param name="unit">
                The Target
            </param>
            <param name="hitChance">
                The HitChance
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CastIfHitchanceMinimum(LeagueSharp.Obj_AI_Base,LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Cast Spell if HitChance is more than the minimum to input HitChance
            </summary>
            <param name="unit">
                The Target
            </param>
            <param name="hitChance">
                The HitChance
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CastIfWillHit(LeagueSharp.Obj_AI_Base,System.Int32)">
            <summary>
                Cast Spell if will hit Minimum input targets counts.
            </summary>
            <param name="unit">
                Main Target
            </param>
            <param name="minTargets">
                Minimum Targets
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CastOnBestTarget(System.Single,System.Boolean,System.Int32)">
            <summary>
                Cast Spell on best Target.
            </summary>
            <param name="extraRange">
                Extra Range
            </param>
            <param name="areaOfEffect">
                Area of Effect
            </param>
            <param name="minTargets">
                Minimum Area-of-Effect targets
            </param>
            <returns>
                CastState. <seealso cref="T:LeagueSharp.SDK.Enumerations.CastStates" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CastOnUnit(LeagueSharp.Obj_AI_Base)">
            <summary>
                Cast Spell directly onto a unit
            </summary>
            <param name="unit">
                The Target
            </param>
            <returns>
                Was Spell Casted
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CountHits(System.Collections.Generic.List{LeagueSharp.Obj_AI_Base},SharpDX.Vector3)">
            <summary>
                Returns the spell counted hits.
            </summary>
            <param name="units">
                The Minions
            </param>
            <param name="castPosition">
                Cast Position Vector3 Source
            </param>
            <returns>
                The hits
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.CountHits(System.Collections.Generic.List{SharpDX.Vector3},SharpDX.Vector3)">
            <summary>
                Returns the spell counted hits.
            </summary>
            <param name="points">
                Minion Positions
            </param>
            <param name="castPosition">
                Cast Position Vector3 Source
            </param>
            <returns>
                The hits
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetCircularFarmLocation(System.Collections.Generic.List{LeagueSharp.Obj_AI_Minion},System.Single)">
            <summary>
                Get Circular Farm Location
            </summary>
            <param name="minions">
                The Minions
            </param>
            <param name="overrideWidth">
                Override Width
            </param>
            <returns>
                Farm Location. <seealso cref="T:LeagueSharp.SDK.Utils.FarmLocation" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetCircularFarmLocation(System.Collections.Generic.List{SharpDX.Vector2},System.Single)">
            <summary>
                Get Circular Farm Location
            </summary>
            <param name="minionPositions">
                Minion Positions
            </param>
            <param name="overrideWidth">
                Override Width
            </param>
            <returns>
                Farm Location. <seealso cref="T:LeagueSharp.SDK.Utils.FarmLocation" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetCollision(SharpDX.Vector2,System.Collections.Generic.List{SharpDX.Vector2},System.Single)">
            <summary>
                Returns Collision List
            </summary>
            <param name="fromVector2">
                From Vector3 Source
            </param>
            <param name="to">
                To Vector3 Source
            </param>
            <param name="delayOverride">
                Delay Override
            </param>
            <returns>
                Collision List
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetDamage(LeagueSharp.Obj_AI_Base,LeagueSharp.Data.Enumerations.DamageStage)">
            <summary>
                Returns the damage a spell will deal to target.
            </summary>
            <param name="target">
                The <see cref="T:LeagueSharp.Obj_AI_Hero" /> target.
            </param>
            <param name="stage">
                The <see cref="T:LeagueSharp.Data.Enumerations.DamageStage" /> of the spell.
            </param>
            <returns>
                The damage value to target unit.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetHealthPrediction(LeagueSharp.Obj_AI_Base)">
            <summary>
                Returns health prediction on a unit.
            </summary>
            <param name="unit">
                The Unit
            </param>
            <returns>
                Unit's predicted health
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetHitCount(LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Returns Hit Count
            </summary>
            <param name="hitChance">
                The HitChance
            </param>
            <returns>
                Hit Count
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetLineFarmLocation(System.Collections.Generic.List{LeagueSharp.Obj_AI_Minion},System.Single)">
            <summary>
                Get Line Farm Location
            </summary>
            <param name="minionPositions">
                The Minions
            </param>
            <param name="overrideWidth">
                Override Width
            </param>
            <returns>
                Farm Location. <seealso cref="T:LeagueSharp.SDK.Utils.FarmLocation" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetLineFarmLocation(System.Collections.Generic.List{SharpDX.Vector2},System.Single)">
            <summary>
                Get Line Farm Location
            </summary>
            <param name="minionPositions">
                Minion Positions
            </param>
            <param name="overrideWidth">
                Override Width
            </param>
            <returns>
                Farm Location. <seealso cref="T:LeagueSharp.SDK.Utils.FarmLocation" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetPrediction(LeagueSharp.Obj_AI_Base,System.Boolean,System.Single,LeagueSharp.Data.Enumerations.CollisionableObjects)">
            <summary>
                Returns Spell Prediction
            </summary>
            <param name="unit">
                Predicted Unit
            </param>
            <param name="aoe">
                Is Area of effect
            </param>
            <param name="overrideRange">
                Override Range
            </param>
            <param name="collisionable">
                Collision-able Flags
            </param>
            <returns>
                <see cref="T:LeagueSharp.SDK.PredictionOutput" /> output
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetTarget(System.Single,System.Boolean,System.Collections.Generic.IEnumerable{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Returns the best target found using the current TargetSelector Mode.
                Please make sure to set the Spell.DamageType Property to the type of damage this spell does (if not done on
                initialization).
            </summary>
            <param name="extraRange">
                Extra Range
            </param>
            <param name="accountForCollision">
                If true, will get a target that can be hit by the spell.
            </param>
            <param name="champsToIgnore">
                Champions to Ignore
            </param>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" /> target.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.GetUnitsByHitChance(LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Gets all of the units that this spell can hit that is greater then or equal to the <see cref="T:LeagueSharp.SDK.Enumerations.HitChance" />
                provided.
            </summary>
            <param name="minimumHitChance">Minimum HitChance</param>
            <returns>
                All of the units that this spell can hit that is greater then or equal to the <see cref="T:LeagueSharp.SDK.Enumerations.HitChance" />
                provided.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.IsInRange(LeagueSharp.GameObject,System.Single)">
            <summary>
                Returns if the GameObject is in range of the spell.
            </summary>
            <param name="obj">
                The <see cref="T:LeagueSharp.GameObject" />
            </param>
            <param name="otherRange">The Range</param>
            <returns>
                Is GameObject in range of spell
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.IsInRange(SharpDX.Vector3,System.Single)">
            <summary>
                Returns if the Vector3 is in range of the spell.
            </summary>
            <param name="point">
                Vector3 point
            </param>
            <param name="otherRange">
                The Range
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.IsInRange(SharpDX.Vector2,System.Single)">
            <summary>
                Returns if the Vector2 is in range of the spell.
            </summary>
            <param name="point">
                Vector2 point
            </param>
            <param name="otherRange">
                The Range
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.IsReady(System.Int32)">
            <summary>
                Returns if the Spell is ready to use.
            </summary>
            <param name="t">Time Left</param>
            <returns>Is Spell Ready to use</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetCharged(System.String,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
                Sets the Spell Data to Charged data.
            </summary>
            <param name="spellName">
                Spell Name
            </param>
            <param name="buffName">
                Spell Buff Name
            </param>
            <param name="minRange">
                Spell Minimum Range
            </param>
            <param name="maxRange">
                Spell Maximum Range
            </param>
            <param name="deltaT">
                Charge Duration
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Spell" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetMinimumManaPercentage(System.Single)">
            <summary>
                Sets the minimum mana percentage to cast the spell.
            </summary>
            <param name="percentage">
                Mana Percentage
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetSkillshot(System.Single,System.Single,System.Single,System.Boolean,LeagueSharp.SDK.Enumerations.SkillshotType,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Sets the Spell Data to Skill-shot data.
            </summary>
            <param name="delay">
                Spell Delay
            </param>
            <param name="skillWidth">
                Spell Width
            </param>
            <param name="speed">
                Spell Speed
            </param>
            <param name="collision">
                Spell Collision Flag
            </param>
            <param name="type">
                Skill-shot Type
            </param>
            <param name="fromVector3">
                From Vector3 Source
            </param>
            <param name="rangeCheckFromVector3">
                Range Check From Vector3 Source
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Spell" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetSkillshot(System.Boolean,LeagueSharp.SDK.Enumerations.SkillshotType,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Sets the Spell Data to Skill-shot data.
            </summary>
            <param name="collision">
                Spell Collision Flag
            </param>
            <param name="type">
                Skill-shot Type
            </param>
            <param name="fromVector3">
                From Vector3 Source
            </param>
            <param name="rangeCheckFromVector3">
                Range Check From Vector3 Source
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Spell" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetTargetted(System.Single,System.Single,SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Sets the Spell Data to targeted data.
            </summary>
            <param name="delay">
                Spell Delay
            </param>
            <param name="speed">
                Spell Speed
            </param>
            <param name="fromVector3">
                From Vector3 Source
            </param>
            <param name="rangeCheckFromVector3">
                Range Check From Vector3 Source
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Spell" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SetTargetted(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Sets the Spell Data to targeted data.
            </summary>
            <param name="fromVector3">
                From Vector3 Source
            </param>
            <param name="rangeCheckFromVector3">
                Range Check From Vector3 Source
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Spell" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.StartCharging">
            <summary>
                Start charging the spell if its not charging.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.StartCharging(SharpDX.Vector3)">
            <summary>
                Start charging the spell if its not charging.
            </summary>
            <param name="position">
                The position.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.UpdateSourcePosition(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
                Update Source Position
            </summary>
            <param name="fromVector3">
                From Vector3 Source
            </param>
            <param name="rangeCheckFromVector3">
                Range Check From Vector3 Source
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.WillHit(LeagueSharp.Obj_AI_Base,SharpDX.Vector3,System.Int32,LeagueSharp.SDK.Enumerations.HitChance)">
            <summary>
                Returns if the spell will hit the unit when casted.
            </summary>
            <param name="unit">
                The Target
            </param>
            <param name="castPosition">
                Cast Position
            </param>
            <param name="extraWidth">
                Extra Width
            </param>
            <param name="minHitChance">
                Minimum Hit Chance
            </param>
            <returns>
                Will Spell Hit
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.WillHit(SharpDX.Vector3,SharpDX.Vector3,System.Int32)">
            <summary>
                Returns if the spell will hit the point when casted
            </summary>
            <param name="point">
                Vector3 Target
            </param>
            <param name="castPosition">
                Cast Position
            </param>
            <param name="extraWidth">
                Extra Width
            </param>
            <returns>
                Will Spell Hit
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.ShootChargedSpell(LeagueSharp.SpellSlot,SharpDX.Vector3,System.Boolean)">
            <summary>
                Shoot Charged Spell
            </summary>
            <param name="slot">
                The SpellSlot
            </param>
            <param name="position">
                Vector3 Position
            </param>
            <param name="releaseCast">
                Release Cast
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.OnProcessSpellCast(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectProcessSpellCastEventArgs)">
            <summary>
                On Process Spell Cast event catch.
            </summary>
            <param name="sender">
                <see cref="T:LeagueSharp.Obj_AI_Base" /> sender
            </param>
            <param name="args">
                Process Spell Cast Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.Spellbook_OnUpdateChargedSpell(LeagueSharp.Spellbook,LeagueSharp.SpellbookUpdateChargedSpellEventArgs)">
            <summary>
                On Charged Spell Update subscribed event function.
            </summary>
            <param name="sender">
                <see cref="T:LeagueSharp.Spellbook" /> sender
            </param>
            <param name="args">
                Spell-book Update Charged Spell Data
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Spell.SpellbookOnCastSpell(LeagueSharp.Spellbook,LeagueSharp.SpellbookCastSpellEventArgs)">
            <summary>
                Spell-book On Cast Spell subscribed event function.
            </summary>
            <param name="spellbook">
                <see cref="T:LeagueSharp.Spellbook" /> sender
            </param>
            <param name="args">
                Spell-book Cast Spell Data
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.SpellDatabase">
            <summary>
                The spell database.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.SpellDatabase.Spells">
            <summary>
                A list of all the entries in the SpellDatabase.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.Get(System.Func{LeagueSharp.Data.DataTypes.SpellDatabaseEntry,System.Boolean})">
            <summary>
                Queries a search through the spell collection, collecting the values with the predicate function.
            </summary>
            <param name="predicate">
                The predicate function.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:LeagueSharp.Data.DataTypes.SpellDatabaseEntry" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetByMissileName(System.String)">
            <summary>
                Queries a search through the spell collection by missile name.
            </summary>
            <param name="missileSpellName">The missile spell name.</param>
            <returns>
                The <see cref="T:LeagueSharp.Data.DataTypes.SpellDatabaseEntry" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetByName(System.String)">
            <summary>
                Queries a search through the spell collection by spell name.
            </summary>
            <param name="spellName">The spell name.</param>
            <returns>
                The <see cref="T:LeagueSharp.Data.DataTypes.SpellDatabaseEntry" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetBySourceObjectName(System.String)">
            <summary>
                Queries a search through the spell collection by object name.
            </summary>
            <param name="objectName">The object name.</param>
            <returns>
                The <see cref="T:LeagueSharp.Data.DataTypes.SpellDatabaseEntry" />
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetBySpellSlot(LeagueSharp.SpellSlot,System.String)">
            <summary>
                Get the first spell on a spellslot (for champions with more than 1 spellslot use method GetAllSpellsOnSpellSlot)
            </summary>
            <param name="slot">The SpellSlot</param>
            <param name="championName">The Champion Name</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetAllSpellsOnSpellSlot(LeagueSharp.SpellSlot,System.String)">
            <summary>
                Get all spells corresponding to a spellslot (useful for nidalee, jayce, elise, leesin)
            </summary>
            <param name="slot">The SpellSlot</param>
            <param name="championName">The Champion Name</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.MakeSpell(LeagueSharp.SpellSlot,System.String)">
            <summary>
                Creates a spell from target spellslot
            </summary>
            <param name="slot">The SpellSlot</param>
            <param name="championName">The Champion Name</param>
            <returns></returns>
        </member>
        <member name="M:LeagueSharp.SDK.SpellDatabase.GetSkillshotTypeFromSpellType(LeagueSharp.Data.Enumerations.SpellType)">
            <summary>
            Returns the SDK alternative to the LeagueSharp.Data SpellType.
            </summary>
            <param name="spellType">The LeagueSharp.Data SpellType</param>
            <returns>The SDK SpellType</returns>
        </member>
        <member name="M:LeagueSharp.SDK.Detector.TriggerOnDetectSkillshot(LeagueSharp.SDK.Skillshot)">
            <summary>
                Gets called when a skillshot is detected, take into account that it can trigger twice for the same skillshot, one
                when OnProcessSpellCast is called and another when OnMissileCreate is called.
            </summary>
            <param name="skillshot">The detected skillshot</param>
        </member>
        <member name="M:LeagueSharp.SDK.Tracker.Detector_OnDetectSkillshot(LeagueSharp.SDK.Skillshot)">
            <summary>
                Gets called when a new skillshot gets detected. It only gets called once per skillshot.
            </summary>
            <param name="skillshot"></param>
        </member>
        <member name="T:LeagueSharp.SDK.HeroVisibleEntry">
            <summary>
                The hero visible entry container.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.HeroVisibleEntry.#ctor(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.HeroVisibleEntry" /> class.
            </summary>
            <param name="hero">
                The hero.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.HeroVisibleEntry.Hero">
            <summary>
                Gets the hero.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.HeroVisibleEntry.LastVisibleChangeTick">
            <summary>
                Gets or sets the last visible change tick.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.HeroVisibleEntry.Visible">
            <summary>
                Gets or sets a value indicating whether this hero is visible.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.ITargetSelectorMode">
            <summary>
                Interface for modes.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ITargetSelectorMode.DisplayName">
            <summary>
                Gets the display name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.ITargetSelectorMode.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.ITargetSelectorMode.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Adds to menu.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.ITargetSelectorMode.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Orders the champions.
            </summary>
            <param name="heroes">
                The heroes.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorLockTarget">
            <summary>
                The lock target option.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.ClearTime">
            <summary>
                Use this to clear any timer in this class
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.MaxRange">
            <summary>
                The max range allowed to lock targets
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.lockedTarget">
            <summary>
                Internal field that represents the targeted champion
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.lockedTil">
            <summary>
                Internal field to control when the must be released
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.menuItemEnabled">
            <summary>
                Internal field that represents the menu:
                Target Selector >> Lock target >> Enabled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.menuItemNotifications">
            <summary>
                Internal field that represents the menu:
                Target Selector >> Lock target >> Show notification
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.menuItemShowCountdown">
            <summary>
                Internal field that represents the menu:
                Target Selector >> Lock target >> Show countdown
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorLockTarget.menuItemTime">
            <summary>
                Internal field that represents the menu:
                Target Selector >> Lock target >> Lock target on MIA (ms)
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelectorLockTarget" /> class.
            </summary>
            <param name="menu">
                The root menu.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorLockTarget.Enabled">
            <summary>
                Gets the value setted on menu:
                Target Selector >> Lock target >> Enabled
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorLockTarget.LockedTarget">
            <summary>
                Gets or sets the targeted champion.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorLockTarget.ShowCountdown">
            <summary>
                Gets the value setted on menu:
                Target Selector >> Lock target >> Show countdown
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorLockTarget.ShowNotification">
            <summary>
                Gets the value setted on menu:
                Target Selector >> Lock target >> Show notification
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorLockTarget.Time">
            <summary>
                Gets the value setted on menu:
                Target Selector >> Lock target >> Lock target on MIA (ms)
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.LockTarget(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Lock an especific champion.
            </summary>
            <param name="target">
                The targeted champion.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Drawing_OnDraw_Countdown(System.EventArgs)">
            <summary>
                Draws the countdown animation
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Drawing_OnDraw_Target(System.EventArgs)">
            <summary>
                Draws the red and white target under the locked champion.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Game_OnUpdate_CheckTargeted(System.EventArgs)">
            <summary>
                Checks if the targeted champion is MIA or out of range.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Game_OnUpdate_DeadTarget(System.EventArgs)">
            <summary>
                Remove the red and white target under the dead champion.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Game_OnUpdate_Trigger(System.EventArgs)">
            <summary>
                Triggers the lock event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Game_OnWndProc_SetTarget(LeagueSharp.WndEventArgs)">
            <summary>
                Gets the double clicked champion and Locks him.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.LoadMenu(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Load the Lock target menu.
            </summary>
            <param name="menu">
                The root menu.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.LockTarget(LeagueSharp.Obj_AI_Hero,System.Boolean)">
            <summary>
                Private method to lock targets and notify.
            </summary>
            <param name="target">
                The targeted champion.
            </param>
            <param name="notify">
                Indicates if the event must be notified.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorLockTarget.Notify(System.String,System.String)">
            <summary>
                Notify an event.
            </summary>
            <param name="header">
                The header text.
            </param>
            <param name="body">
                The body text.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.IWeightItem">
            <summary>
                Interface for weight item
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.IWeightItem.DefaultWeight">
            <summary>
                Gets the default weight.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.IWeightItem.DisplayName">
            <summary>
                Gets the display name.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.IWeightItem.Inverted">
            <summary>
                Gets a value indicating whether this <see cref="T:LeagueSharp.SDK.TSModes.IWeightItem" /> is inverted.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.IWeightItem.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.IWeightItem.GetValue(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the value.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Single" /> value.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.WeightItemWrapper">
            <summary>
                Wrapper for IWeightItem.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.WeightItemWrapper.#ctor(LeagueSharp.SDK.TSModes.IWeightItem)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TSModes.WeightItemWrapper" /> class.
            </summary>
            <param name="item">
                The item.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.DefaultWeight">
            <summary>
                Gets the default weight
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.DisplayName">
            <summary>
                Gets the display name
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.Inverted">
            <summary>
                Gets a value indicating whether the item is inverted.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.Item">
            <summary>
                Gets the item.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.MaxValue">
            <summary>
                Gets the maximum value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.MinValue">
            <summary>
                Gets the minimum value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.Name">
            <summary>
                Gets the name
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.SimulationMaxValue">
            <summary>
                Gets the simulation maximum value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.SimulationMinValue">
            <summary>
                Gets the simulation minimum value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.WeightItemWrapper.Weight">
            <summary>
                Gets the weight.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.WeightItemWrapper.GetValue(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the value.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Single" /> value.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Closest">
            <summary>
                The closest Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Closest.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Closest.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Closest.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Closest.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.LeastHealth">
            <summary>
                The least health Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LeastHealth.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LeastHealth.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LeastHealth.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LeastHealth.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.LessAttacksToKill">
            <summary>
                The less attacks to kill Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LessAttacksToKill.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LessAttacksToKill.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LessAttacksToKill.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LessAttacksToKill.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.LessCastsToKill">
            <summary>
                The less casts to kill Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LessCastsToKill.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.LessCastsToKill.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LessCastsToKill.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.LessCastsToKill.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.MostAbilityPower">
            <summary>
                The most ability power Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.MostAbilityPower.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.MostAbilityPower.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.MostAbilityPower.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.MostAbilityPower.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.MostAttackDamage">
            <summary>
                The most attack damage Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.MostAttackDamage.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.MostAttackDamage.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.MostAttackDamage.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.MostAttackDamage.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.NearMouse">
            <summary>
                The near mouse Mode.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.NearMouse.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.NearMouse.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.NearMouse.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.NearMouse.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Priority">
            <summary>
                The priority Mode.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Priority.MaxPriority">
            <summary>
                The maximum priority
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Priority.MinPriority">
            <summary>
                The minimum priority
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Priority.PriorityCategories">
            <summary>
                The priority categories
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Priority.menu">
            <summary>
                The menu.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Priority.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Priority.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Priority.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Priority.GetDefaultPriority(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the default priority.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Priority.GetPriority(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the priority.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Priority.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Priority.SetPriority(LeagueSharp.Obj_AI_Hero,System.Int32)">
            <summary>
                Sets the priority.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weight">
            <summary>
                The weight Mode.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.DefaultPercentage">
            <summary>
                The default percentage const.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.MaxPercentage">
            <summary>
                The max percentage const.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.MaxWeight">
            <summary>
                The max weight const.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.MinPercentage">
            <summary>
                THe min percentage const.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.MinWeight">
            <summary>
                The min weight const.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.pItems">
            <summary>
                The weight items.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.menu">
            <summary>
                The menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weight.weightsMenu">
            <summary>
                The weights menu.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TSModes.Weight" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weight.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weight.Items">
            <summary>
                Gets the items.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weight.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.AddToMenu(LeagueSharp.SDK.UI.Menu)">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.Calculate(LeagueSharp.SDK.TSModes.WeightItemWrapper,LeagueSharp.Obj_AI_Hero,System.Boolean)">
            <summary>
                Calculates the weight.
            </summary>
            <param name="item">
                The item.
            </param>
            <param name="hero">
                The hero.
            </param>
            <param name="simulation">Indicates whether to enable simulation.</param>
            <returns>
                The <see cref="T:System.Single" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.Deregister(LeagueSharp.SDK.TSModes.IWeightItem)">
            <summary>
                Deregisters the specified weight.
            </summary>
            <param name="weight">
                The weight.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.GetHeroPercent(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Gets the hero percent.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.Overwrite(LeagueSharp.SDK.TSModes.IWeightItem,LeagueSharp.SDK.TSModes.IWeightItem)">
            <summary>
                Overwrites the specified old weight.
            </summary>
            <param name="oldWeight">
                The old weight.
            </param>
            <param name="newWeight">
                The new weight.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.Register(LeagueSharp.SDK.TSModes.IWeightItem)">
            <summary>
                Registers the specified weight.
            </summary>
            <param name="weight">
                The weight.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.SetHeroPercent(LeagueSharp.Obj_AI_Hero,System.Int32)">
            <summary>
                Sets the hero percent.
            </summary>
            <param name="hero">
                The hero.
            </param>
            <param name="percent">
                The percent.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.SetMenuWeight(LeagueSharp.SDK.TSModes.WeightItemWrapper,System.Int32)">
            <summary>
                Sets the weight.
            </summary>
            <param name="weightItem">
                The weight item.
            </param>
            <param name="weight">
                The weight.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.UpdateMaxMinValue(LeagueSharp.SDK.TSModes.WeightItemWrapper,System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero},System.Boolean)">
            <summary>
                Updates the maximum minimum value.
            </summary>
            <param name="item">
                The item.
            </param>
            <param name="heroes">
                The heroes.
            </param>
            <param name="simulation">
                Indicates whether to use simluation.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.ExportSettings">
            <summary>
                Exports the settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.ImportSettings">
            <summary>
                Imports the settings.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weight.ResetSettings">
            <summary>
                Resets the settings.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.AbilityPower">
            <summary>
                Ability Power
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AbilityPower.averageMr">
            <summary>
                The average mr
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AbilityPower.lastUpdate">
            <summary>
                The last update
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AbilityPower.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AbilityPower.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AbilityPower.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AbilityPower.Name">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AbilityPower.UpdateInterval">
            <summary>
                Gets or sets the update interval.
            </summary>
            <value>
                The update interval.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.AbilityPower.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.Aggro">
            <summary>
                Aggro tracking
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Aggro.#cctor">
            <summary>
                Initializes static members of the <see cref="T:LeagueSharp.SDK.TSModes.Weights.Aggro" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Aggro.Entries">
            <summary>
                Gets the entries
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Aggro.GetSenderItems(LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the sender items.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:LeagueSharp.SDK.TSModes.Weights.AggroEntry" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Aggro.GetSenderTargetItem(LeagueSharp.Obj_AI_Base,LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the sender target item.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="target">
                The target.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.TSModes.Weights.AggroEntry" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Aggro.GetTargetItems(LeagueSharp.Obj_AI_Base)">
            <summary>
                Gets the target items.
            </summary>
            <param name="target">
                The target.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:LeagueSharp.SDK.TSModes.Weights.AggroEntry" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Aggro.OnObjAiBaseAggro(LeagueSharp.Obj_AI_Base,LeagueSharp.GameObjectAggroEventArgs)">
            <summary>
                Called when aggro is changed.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="args">
                The <see cref="T:LeagueSharp.GameObjectAggroEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.AggroEntry">
            <summary>
                Entry for the class Aggro
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AggroEntry.sender">
            <summary>
                The sender.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AggroEntry.target">
            <summary>
                The target.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.AggroEntry.#ctor(LeagueSharp.Obj_AI_Hero,LeagueSharp.Obj_AI_Hero)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TSModes.Weights.AggroEntry" /> class.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="hero">
                The hero.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AggroEntry.Sender">
            <summary>
                Gets or sets the sender.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AggroEntry.Target">
            <summary>
                Gets or sets the target.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AggroEntry.TickCount">
            <summary>
                Gets the tick count.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.AttackDamage">
            <summary>
                Attack Damage
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AttackDamage.averageArmor">
            <summary>
                The average armor
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TSModes.Weights.AttackDamage.lastUpdate">
            <summary>
                The last update
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AttackDamage.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AttackDamage.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AttackDamage.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AttackDamage.Name">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.AttackDamage.UpdateInterval">
            <summary>
                Gets or sets the update interval.
            </summary>
            <value>
                The update interval.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.AttackDamage.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.CrowdControl">
            <summary>
                Crowd Control
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.CrowdControl.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TSModes.Weights.CrowdControl" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.CrowdControl.BuffTypes">
            <summary>
                Gets or sets the buff types.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.CrowdControl.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.CrowdControl.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.CrowdControl.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.CrowdControl.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.CrowdControl.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.FocusMe">
            <summary>
                Focus Me
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.FocusMe.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.FocusMe.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.FocusMe.FadeTime">
            <summary>
                Gets or sets the fade time.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.FocusMe.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.FocusMe.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.FocusMe.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.Gold">
            <summary>
                Acquired Gold
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.Assist">
            <summary>
                Gets or sets the assist gold value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.Champion">
            <summary>
                Gets or sets the champion gold value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.Minion">
            <summary>
                Gets or sets the minion gold value.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.Name">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Gold.NeutralMinion">
            <summary>
                Gets or sets the neutral minion gold value.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Gold.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.Killable">
            <summary>
                AA Killable
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Killable.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Killable.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Killable.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.Killable.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.Killable.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.LowHealth">
            <summary>
                Low Health
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowHealth.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowHealth.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowHealth.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowHealth.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.LowHealth.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.LowResists">
            <summary>
                Low Resists
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowResists.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowResists.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowResists.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.LowResists.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.LowResists.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor">
            <summary>
                Short Distance to Cursor
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.ShortDistanceCursor.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer">
            <summary>
                Short Distance to Player
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.ShortDistancePlayer.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TSModes.Weights.TeamFocus">
            <summary>
                Team Focus
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.TeamFocus.DefaultWeight">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.TeamFocus.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.TeamFocus.FadeTime">
            <summary>
                Gets or sets the fade time.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.TeamFocus.Inverted">
            <inheritdoc />
        </member>
        <member name="P:LeagueSharp.SDK.TSModes.Weights.TeamFocus.Name">
            <inheritdoc />
        </member>
        <member name="M:LeagueSharp.SDK.TSModes.Weights.TeamFocus.GetValue(LeagueSharp.Obj_AI_Hero)">
            <inheritdoc />
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorDrawing">
            <summary>
                Drawings for TargetSelector
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.menu">
            <summary>
                The menu
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.mode">
            <summary>
                The mode instance.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.selected">
            <summary>
                The selected instance.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.weight">
            <summary>
                The weight
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.weightBestTarget">
            <summary>
                The weight best target
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.weightBestTargetLastTickCount">
            <summary>
                The weight best target last tick count
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorDrawing.weightTargets">
            <summary>
                The weight targets
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorDrawing.#ctor(LeagueSharp.SDK.UI.Menu,LeagueSharp.SDK.TargetSelectorSelected,LeagueSharp.SDK.TargetSelectorMode)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelectorDrawing" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
            <param name="selected">
                The selected.
            </param>
            <param name="mode">
                The mode.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorDrawing.OnDrawingDraw(System.EventArgs)">
            <summary>
                Raises the <see cref="E:DrawingDraw" /> event.
            </summary>
            <param name="args">
                The <see cref="T:System.EventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorDrawing.OnGameUpdate(System.EventArgs)">
            <summary>
                Raises the <see cref="E:GameUpdate" /> event.
            </summary>
            <param name="args">
                The <see cref="T:System.EventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorHumanizer">
            <summary>
                Humanize the target selector process
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorHumanizer.MaxDelay">
            <summary>
                The maximum delay
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorHumanizer.MinDelay">
            <summary>
                The minimum delay
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorHumanizer.entries">
            <summary>
                The hero visible informations
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorHumanizer.menu">
            <summary>
                The menu
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorHumanizer.fowDelay">
            <summary>
                The fow delay
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorHumanizer.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelectorHumanizer" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorHumanizer.FowDelay">
            <summary>
                Gets or sets the fow delay.
            </summary>
            <value>
                The fow delay.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorHumanizer.FilterTargets(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Filters the targets.
            </summary>
            <param name="heroes">
                The heroes.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorHumanizer.OnGameUpdate(System.EventArgs)">
            <summary>
                Raises the <see cref="E:GameUpdate" /> event.
            </summary>
            <param name="args">
                The <see cref="T:System.EventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorMode">
            <summary>
                The mode menu for the TargetSelector
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelectorMode" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorMode.OnChangeDelegate">
            <summary>
                The<see cref="E:LeagueSharp.SDK.TargetSelectorMode.OnChange" /> event delegate.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="e">
                The e.
            </param>
        </member>
        <member name="E:LeagueSharp.SDK.TargetSelectorMode.OnChange">
            <summary>
                Occurs when the mode is changed.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorMode.Current">
            <summary>
                Gets or sets the current.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorMode.Entries">
            <summary>
                Gets the entries.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.Deregister(LeagueSharp.SDK.ITargetSelectorMode)">
            <summary>
                Deregisters the specified Mode.
            </summary>
            <param name="mode">
                The Mode.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.OrderChampions(System.Collections.Generic.List{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Orders the champions.
            </summary>
            <param name="heroes">
                The heroes.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.Overwrite(LeagueSharp.SDK.ITargetSelectorMode,LeagueSharp.SDK.ITargetSelectorMode)">
            <summary>
                Overwrites the specified old Mode.
            </summary>
            <param name="oldMode">
                The old Mode.
            </param>
            <param name="newMode">
                The new Mode.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.Register(LeagueSharp.SDK.ITargetSelectorMode)">
            <summary>
                Registers the specified Mode.
            </summary>
            <param name="mode">
                The Mode.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.GeModeBySelectedIndex(System.Int32)">
            <summary>
                Ges the index of the mode by selected.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.ITargetSelectorMode" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorMode.UpdateMenu">
            <summary>
                Updates the menu.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelectorSelected">
            <summary>
                Manages the selection of targets
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorSelected.menu">
            <summary>
                The menu.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorSelected.focus">
            <summary>
                The focus.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelectorSelected.force">
            <summary>
                The force.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorSelected.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelectorSelected" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorSelected.ClickBuffer">
            <summary>
                Gets or sets the click buffer.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorSelected.Focus">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.TargetSelectorSelected" /> is focus.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorSelected.Force">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:LeagueSharp.SDK.TargetSelectorSelected" /> is force.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelectorSelected.Target">
            <summary>
                Gets or sets the target.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelectorSelected.OnGameWndProc(LeagueSharp.WndEventArgs)">
            <summary>
                Raises the <see cref="E:GameWndProc" /> event.
            </summary>
            <param name="args">
                The <see cref="T:LeagueSharp.WndEventArgs" /> instance containing the event data.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.TargetSelector">
            <summary>
                The TargetSelector system.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelector.initialized">
            <summary>
                Initialized flag.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.TargetSelector.menu">
            <summary>
                The menu.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.#ctor(LeagueSharp.SDK.UI.Menu)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.TargetSelector" /> class.
            </summary>
            <param name="menu">
                The menu.
            </param>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelector.Humanizer">
            <summary>
                Gets the humanizer instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelector.Locked">
            <summary>
                Gets the locked instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelector.Mode">
            <summary>
                Gets the mode instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelector.Selected">
            <summary>
                Gets the selected instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.TargetSelector.Drawing">
            <summary>
                Gets the drawing instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.GetSelectedTarget">
            <summary>
                Gets the Selected target.
            </summary>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.GetTarget(LeagueSharp.SDK.Spell,System.Boolean,System.Collections.Generic.IEnumerable{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Gets the target.
            </summary>
            <param name="spell">
                The spell.
            </param>
            <param name="ignoreShields">
                Indicates whether to ignore shields.
            </param>
            <param name="ignoreChampions">
                Indicates whether to ignore champions.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.GetTarget(System.Single,LeagueSharp.DamageType,System.Boolean,SharpDX.Vector3,System.Collections.Generic.IEnumerable{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Gets the target.
            </summary>
            <param name="range">
                The range.
            </param>
            <param name="damageType">
                Type of the damage.
            </param>
            <param name="ignoreShields">
                Indicates whether to ignore shields.
            </param>
            <param name="from">
                The from location.
            </param>
            <param name="ignoreChampions">
                Indicates whether to ignore champions.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.GetTargetNoCollision(LeagueSharp.SDK.Spell,System.Boolean,System.Collections.Generic.IEnumerable{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Gets the target without collision checking.
            </summary>
            <param name="spell">
                The spell.
            </param>
            <param name="ignoreShields">
                Indicates whether to ignore shields.
            </param>
            <param name="ignoreChampions">
                Indicates whether to ignore champions.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.GetTargets(System.Single,LeagueSharp.DamageType,System.Boolean,SharpDX.Vector3,System.Collections.Generic.IEnumerable{LeagueSharp.Obj_AI_Hero})">
            <summary>
                Gets the targets.
            </summary>
            <param name="range">
                The range.
            </param>
            <param name="damageType">
                Type of the damage.
            </param>
            <param name="ignoreShields">
                Indicates whether to ignore shields.
            </param>
            <param name="from">
                The from location.
            </param>
            <param name="ignoreChampions">
                Indicates whether to ignore champions.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.Obj_AI_Hero" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.SetTarget(LeagueSharp.Obj_AI_Hero)">
            <summary>
                Sets the target.
            </summary>
            <param name="target">
                The target to set.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.TargetSelector.IsValidTarget(LeagueSharp.Obj_AI_Hero,System.Single,LeagueSharp.DamageType,System.Boolean,SharpDX.Vector3)">
            <summary>
                Determines whether [is valid target] [the specified hero].
            </summary>
            <param name="hero">
                The hero.
            </param>
            <param name="range">
                The range.
            </param>
            <param name="damageType">
                Type of the damage.
            </param>
            <param name="ignoreShields">
                Indicates whether to ignore shields.
            </param>
            <param name="from">The from location.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.cursor_drag">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_arrow">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_check">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_error">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_select">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_star">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Resources.notifications_warning">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Properties.Translations">
            <summary>
              一個強類型的資源類，用於查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Translations.ResourceManager">
            <summary>
              返回此類使用的緩存的 ResourceManager 實例。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Translations.Culture">
            <summary>
              使用此強類型資源類，為所有資源查找
              重寫當前線程的 CurrentUICulture 屬性。
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Translations.ChineseJson">
             <summary>
               查找類似 
            {
                &quot;Aatrox&quot;: &quot;暗裔剑魔-亚托克斯&quot;,
                &quot;Ahri&quot;: &quot;九尾妖狐-阿狸&quot;,
                &quot;Akali&quot;: &quot;暗影之拳-阿卡丽&quot;,
                &quot;Alistar&quot;: &quot;牛头酋长-阿利斯塔&quot;,
                &quot;Amumu&quot;: &quot;殇之木乃伊-阿木木&quot;,
                &quot;Anivia&quot;: &quot;冰晶凤凰-艾尼维亚&quot;,
                &quot;Annie&quot;: &quot;黑暗之女-安妮&quot;,
                &quot;Ashe&quot;: &quot;寒冰射手-艾希&quot;,
                &quot;Azir&quot;: &quot;沙漠皇帝-阿兹尔&quot;,
                &quot;Bard&quot;: &quot;星界游神-巴德&quot;,
                &quot;Blitzcrank&quot;: &quot;蒸汽机器人-布里茨&quot;,
                &quot;Brand&quot;: &quot;复仇焰魂-布兰德&quot;,
                &quot;Braum&quot;: &quot;弗雷尔卓德之心-布隆&quot;,
                &quot;Caitlyn&quot;: &quot;皮城女警-凯特琳&quot;,
                &quot;Cassiopeia&quot;: &quot;魔蛇之拥—卡西奥佩娅&quot;,
                &quot;Chogath&quot;: &quot;虚空恐惧-科加斯&quot;,
                &quot;Corki&quot;: &quot;英勇投弹手-库奇&quot;,
                &quot;Darius&quot;: &quot;诺克萨斯之手-德莱厄斯&quot;,
                &quot;Diana&quot;: &quot;皎月 [字符串的其餘部分被截斷]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Properties.Translations.TraditionalChineseJson">
             <summary>
               查找類似 
            {
                &quot;Aatrox&quot;: &quot;\u51a5\u8840\u90aa\u528d-\u5384\u85a9\u65af&quot;,
                &quot;Ahri&quot;: &quot;\u4e5d\u5c3e\u5996\u72d0-\u963f\u7483&quot;,
                &quot;Akali&quot;: &quot;\u6697\u5f71\u4e4b\u62f3-\u963f\u5361\u8389&quot;,
                &quot;Alistar&quot;: &quot;\u725b\u982d\u914b\u9577-\u4e9e\u6b77\u65af\u5854&quot;,
                &quot;Amumu&quot;: &quot;\u6ba4\u4e4b\u6728\u4e43\u4f0a-\u963f\u59c6\u59c6&quot;,
                &quot;Anivia&quot;: &quot;\u51b0\u6676\u9cf3\u51f0-\u827e\u59ae\u7dad\u4e9e&quot;,
                &quot;Annie&quot;: &quot;\u9ed1\u6697\u4e4b\u5973-\u5b89\u59ae&quot;,
                &quot;Ashe&quot;: &quot;\u51b0\u971c\u5c04\u624b-\u827e\u5e0c&quot;,
                &quot;Azir&quot;: &quot;\u86 [字符串的其餘部分被截斷]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.DoublePoint">
            <summary>
                Points that are made out of doubles.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.DoublePoint.X">
            <summary>
                The x
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.DoublePoint.Y">
            <summary>
                The y
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.DoublePoint.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.DoublePoint" /> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.DoublePoint.#ctor(LeagueSharp.SDK.Clipper.DoublePoint)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.DoublePoint" /> struct.
            </summary>
            <param name="dp">The <c>doublepoint</c>.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.DoublePoint.#ctor(LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.DoublePoint" /> struct.
            </summary>
            <param name="ip">The <c>intpoint</c>.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.PolyTree">
            <summary>
                Tree of PolyNodes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyTree.MAllPolys">
            <summary>
                List contains all of the merged polygons.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyTree.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:LeagueSharp.SDK.Clipper.PolyTree" /> class.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyTree.Total">
            <summary>
                Gets the total.
            </summary>
            <value>
                The total.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyTree.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyTree.GetFirst">
            <summary>
                Gets the first.
            </summary>
            <returns>
                The first <see cref="T:LeagueSharp.SDK.Clipper.PolyNode" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.PolyNode">
            <summary>
                A point at which lines or pathways intersect or branch, a central or connecting point.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MChilds">
            <summary>
                List contains all of the merged childs of the polygon node.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MEndtype">
            <summary>
                The endtype.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MIndex">
            <summary>
                The index.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MJointype">
            <summary>
                The jointype.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MParent">
            <summary>
                The parent.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyNode.MPolygon">
            <summary>
                The polygon.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.ChildCount">
            <summary>
                Gets the child count.
            </summary>
            <value>
                The child count.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.Childs">
            <summary>
                Gets the childs.
            </summary>
            <value>
                The childs.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.Contour">
            <summary>
                Gets the contour.
            </summary>
            <value>
                The contour.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.IsHole">
            <summary>
                Gets a value indicating whether this instance is hole.
            </summary>
            <value>
                <c>true</c> if this instance is hole; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.IsOpen">
            <summary>
                Gets or sets a value indicating whether this instance is open.
            </summary>
            <value>
                <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.PolyNode.Parent">
            <summary>
                Gets the parent.
            </summary>
            <value>
                The parent.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyNode.GetNext">
            <summary>
                Gets the next.
            </summary>
            <returns>
                The next <see cref="T:LeagueSharp.SDK.Clipper.PolyNode" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyNode.AddChild(LeagueSharp.SDK.Clipper.PolyNode)">
            <summary>
                The add child.
            </summary>
            <param name="child">
                The child.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyNode.GetNextSiblingUp">
            <summary>
                The get next sibling up.
            </summary>
            <returns>
                The next <see cref="T:LeagueSharp.SDK.Clipper.PolyNode" /> sibling.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.PolyNode.IsHoleNode">
            <summary>
                Indiciates whether the node is hole.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Int128">
            <summary>
                The int 128.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Int128.hi">
            <summary>
                The _hi.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Int128.lo">
            <summary>
                The _lo.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.#ctor(System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.Int128" /> struct.
            </summary>
            <param name="lo">
                The lo.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.#ctor(System.Int64,System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.Int128" /> struct.
            </summary>
            <param name="hi">
                The hi.
            </param>
            <param name="lo">
                The lo.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.#ctor(LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.Int128" /> struct.
            </summary>
            <param name="val">
                The val.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.Int128Mul(System.Int64,System.Int64)">
            <summary>
                The int 128 mul.
            </summary>
            <param name="lhs">
                The lhs.
            </param>
            <param name="rhs">
                The rhs.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Int128" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_Addition(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The +.
            </summary>
            <param name="lhs">
                The lhs.
            </param>
            <param name="rhs">
                The rhs.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Int128" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_Equality(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The ==.
            </summary>
            <param name="val1">
                The val 1.
            </param>
            <param name="val2">
                The val 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_Explicit(LeagueSharp.SDK.Clipper.Int128)~System.Double">
            <summary>
                The op_ explicit.
            </summary>
            <param name="val">
                The val.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_GreaterThan(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The &gt;.
            </summary>
            <param name="val1">
                The val 1.
            </param>
            <param name="val2">
                The val 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_Inequality(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The !=.
            </summary>
            <param name="val1">
                The val 1.
            </param>
            <param name="val2">
                The val 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_LessThan(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The &lt;.
            </summary>
            <param name="val1">
                The val 1.
            </param>
            <param name="val2">
                The val 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_Subtraction(LeagueSharp.SDK.Clipper.Int128,LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The -.
            </summary>
            <param name="lhs">
                The lhs.
            </param>
            <param name="rhs">
                The rhs.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Int128" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.op_UnaryNegation(LeagueSharp.SDK.Clipper.Int128)">
            <summary>
                The -.
            </summary>
            <param name="val">
                The val.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Int128" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.Equals(System.Object)">
            <summary>
                The equals.
            </summary>
            <param name="obj">
                The obj.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.GetHashCode">
            <summary>
                The get hash code.
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Int128.IsNegative">
            <summary>
                The is negative.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.IntPoint">
            <summary>
                A point whose values are Integers.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntPoint.X">
            <summary>
                The X
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntPoint.Y">
            <summary>
                The Y
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.#ctor(System.Int64,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" /> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" /> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.#ctor(LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.IntPoint" /> struct.
            </summary>
            <param name="pt">
                The point.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.op_Equality(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.op_Inequality(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntPoint.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.IntRect">
            <summary>
                A rectangle whose points are integers.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntRect.Bottom">
            <summary>
                The bottom
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntRect.Left">
            <summary>
                The left
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntRect.Right">
            <summary>
                The right
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntRect.Top">
            <summary>
                The top
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntRect.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.IntRect" /> struct.
            </summary>
            <param name="l">The left.</param>
            <param name="t">The top.</param>
            <param name="r">The righ.</param>
            <param name="b">The bottom.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.IntRect.#ctor(LeagueSharp.SDK.Clipper.IntRect)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.IntRect" /> struct.
            </summary>
            <param name="ir">The <see cref="T:LeagueSharp.SDK.Clipper.IntRect" />.</param>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.ClipType">
            <summary>
                The type of clipping.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipType.CtIntersection">
            <summary>
                Create regions where both subject and clip polygons are filled.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipType.CtUnion">
            <summary>
                Create regions where either subject or clip polygons (or both) are filled.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipType.CtDifference">
            <summary>
                Create regions where subject polygons are filled except where clip polygons are filled
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipType.CtXor">
            <summary>
                Create regions where either subject or clip polygons are filled but not where both are filled
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.PolyType">
            <summary>
                The type of polygon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyType.PtSubject">
            <summary>
                Subject
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyType.PtClip">
            <summary>
                Clip
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.PolyFillType">
            <summary>
                The type of winding rules for polygon filling.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyFillType.PftEvenOdd">
            <summary>
                Also known as Alternate Filling. Odd numbered sub-regions are filled, while even numbered sub-regions are not.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyFillType.PftNonZero">
            <summary>
                All non-zero sub-regions are filled.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyFillType.PftPositive">
            <summary>
                All sub-regions with winding counts > 0 are filled.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.PolyFillType.PftNegative">
            <summary>
                All sub-regions with winding counts &lt; 0 are filled
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.JoinType">
            <summary>
                Type of joining.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.JoinType.JtSquare">
            <summary>
                Squaring is applied uniformally at all convex edge joins at 1 x delta.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.JoinType.JtRound">
            <summary>
                While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords.
                <see cref="P:LeagueSharp.SDK.Clipper.ClipperOffset.ArcTolerance" />
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.JoinType.JtMiter">
            <summary>
                There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce
                excessively long and narrow 'spikes'. To contain these potential spikes, the
                <see cref="P:LeagueSharp.SDK.Clipper.ClipperOffset.MiterLimit" />
                property specifies a maximum distance that vertices will be offset (in multiples of delta). For any given edge
                join, when miter offsetting would exceed that maximum distance, 'square' joining is applied.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.EndType">
            <summary>
                Type of end.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EndType.EtClosedPolygon">
            <summary>
                Ends are joined using the JoinType value and the path filled as a polygon.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EndType.EtClosedLine">
            <summary>
                Ends are joined using the JoinType value and the path filled as a polyline.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EndType.EtOpenButt">
            <summary>
                Ends are squared off with no extension.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EndType.EtOpenSquare">
            <summary>
                Ends are squared off and extended delta units.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EndType.EtOpenRound">
            <summary>
                Ends are rounded off and extended delta units.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.EdgeSide">
            <summary>
                The edge side.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EdgeSide.EsLeft">
            <summary>
                The es left.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.EdgeSide.EsRight">
            <summary>
                The es right.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Direction">
            <summary>
                The direction.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Direction.DRightToLeft">
            <summary>
                The d right to left.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Direction.DLeftToRight">
            <summary>
                The d left to right.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Edge">
            <summary>
                The edge.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Bot">
            <summary>
                The bot.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Curr">
            <summary>
                The curr.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Delta">
            <summary>
                The delta.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Dx">
            <summary>
                The dx.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Next">
            <summary>
                The next.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.NextInAel">
            <summary>
                The next in ael.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.NextInLml">
            <summary>
                The next in lml.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.NextInSel">
            <summary>
                The next in sel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.OutIdx">
            <summary>
                The out idx.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.PolyTyp">
            <summary>
                The poly typ.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Prev">
            <summary>
                The prev.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.PrevInAel">
            <summary>
                The prev in ael.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.PrevInSel">
            <summary>
                The prev in sel.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Side">
            <summary>
                The side.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.Top">
            <summary>
                The top.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.WindCnt">
            <summary>
                The wind cnt.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.WindCnt2">
            <summary>
                The wind cnt 2.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Edge.WindDelta">
            <summary>
                The wind delta.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.IntersectNode">
            <summary>
                A point at which lines intersect.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntersectNode.Edge1">
            <summary>
                The edge 1.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntersectNode.Edge2">
            <summary>
                The edge 2.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.IntersectNode.Pt">
            <summary>
                The point.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.MyIntersectNodeSort">
            <summary>
                Compares <see cref="T:LeagueSharp.SDK.Clipper.IntersectNode" />s for the .Sort method.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.MyIntersectNodeSort.Compare(LeagueSharp.SDK.Clipper.IntersectNode,LeagueSharp.SDK.Clipper.IntersectNode)">
            <summary>
                Compares the specified nodes.
            </summary>
            <param name="node1">
                The node1.
            </param>
            <param name="node2">
                The node2.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.LocalMinima">
            <summary>
                The local minima.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.LocalMinima.LeftBound">
            <summary>
                The left bound.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.LocalMinima.Next">
            <summary>
                The next.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.LocalMinima.RightBound">
            <summary>
                The right bound.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.LocalMinima.Y">
            <summary>
                The y.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Scanbeam">
            <summary>
                The scanbeam.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Scanbeam.Next">
            <summary>
                The next.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Scanbeam.Y">
            <summary>
                The y.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.OutRec">
            <summary>
                The out rec.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.BottomPt">
            <summary>
                The bottom pt.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.FirstLeft">
            <summary>
                The first left.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.Idx">
            <summary>
                The idx.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.IsHole">
            <summary>
                The is hole.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.IsOpen">
            <summary>
                The is open.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.PolyNode">
            <summary>
                The poly node.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutRec.Pts">
            <summary>
                The pts.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.OutPt">
            <summary>
                The out pt.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutPt.Idx">
            <summary>
                The idx.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutPt.Next">
            <summary>
                The next.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutPt.Prev">
            <summary>
                The prev.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.OutPt.Pt">
            <summary>
                The point.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Join">
            <summary>
                The join.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Join.OffPt">
            <summary>
                The off pt.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Join.OutPt1">
            <summary>
                The out first point.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Join.OutPt2">
            <summary>
                The out second point.
            </summary>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.ClipperBase">
            <summary>
                Base clipper.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.Horizontal">
            <summary>
                The horizontal
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.Skip">
            <summary>
                The skip
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.Unassigned">
            <summary>
                The unassigned
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.Tolerance">
            <summary>
                The tolerance
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.NearZero(System.Double)">
            <summary>
                The near zero.
            </summary>
            <param name="val">
                The val.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.LoRange">
            <summary>
                The low range
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.HiRange">
            <summary>
                The high range
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.MMinimaList">
            <summary>
                The minima list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.MCurrentLm">
            <summary>
                The current lm.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.MEdges">
            <summary>
                The edges.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.MUseFullRange">
            <summary>
                The use full range.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperBase.MHasOpenPaths">
            <summary>
                The has open paths.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.ClipperBase.PreserveCollinear">
            <summary>
                Gets or sets a value indicating whether to preserve the collinear.
            </summary>
            <value>
                <c>true</c> if preserve the collinear; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.Swap(System.Int64@,System.Int64@)">
            <summary>
                Swaps the specified value.
            </summary>
            <param name="val1">Value 1.</param>
            <param name="val2">Value 2.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.IsHorizontal(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The is horizontal.
            </summary>
            <param name="e">
                The edge.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.PointIsVertex(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The point is vertex.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="pp">
                The pp.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.PointOnLineSegment(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,System.Boolean)">
            <summary>
                The point on line segment.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="linePt1">
                The line first point.
            </param>
            <param name="linePt2">
                The line second point.
            </param>
            <param name="useFullRange">
                The use full range.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.PointOnPolygon(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.OutPt,System.Boolean)">
            <summary>
                The point on polygon.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="pp">
                The pp.
            </param>
            <param name="useFullRange">
                The use full range.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.SlopesEqual(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,System.Boolean)">
            <summary>
                The slopes equal.
            </summary>
            <param name="e1">
                The e 1.
            </param>
            <param name="e2">
                The e 2.
            </param>
            <param name="useFullRange">
                The use full range.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.SlopesEqual(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,System.Boolean)">
            <summary>
                Checks if the slope is equal.
            </summary>
            <param name="pt1">
                The PT1.
            </param>
            <param name="pt2">
                The PT2.
            </param>
            <param name="pt3">
                The PT3.
            </param>
            <param name="useFullRange">
                if set to <c>true</c>, will use the full range.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.SlopesEqual(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,System.Boolean)">
            <summary>
                Checks if the slopes are equaal.
            </summary>
            <param name="pt1">
                The PT1.
            </param>
            <param name="pt2">
                The PT2.
            </param>
            <param name="pt3">
                The PT3.
            </param>
            <param name="pt4">
                The PT4.
            </param>
            <param name="useFullRange">
                if set to <c>true</c>, will use full range.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.ClipperBase" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.DisposeLocalMinimaList">
            <summary>
                The dispose local minima list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.RangeTest(LeagueSharp.SDK.Clipper.IntPoint,System.Boolean@)">
            <summary>
                The range test.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="useFullRange">
                The use full range.
            </param>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.InitEdge(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The init edge.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="eNext">
                The e next.
            </param>
            <param name="ePrev">
                The e prev.
            </param>
            <param name="pt">
                The point.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.InitEdge2(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.PolyType)">
            <summary>
                The init edge 2.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="polyType">
                The poly type.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.FindNextLocMin(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The find next loc min.
            </summary>
            <param name="e">
                The edge.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Edge" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.ProcessBound(LeagueSharp.SDK.Clipper.Edge,System.Boolean)">
            <summary>
                The process bound.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="leftBoundIsForward">
                The left bound is forward.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Edge" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.AddPath(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},LeagueSharp.SDK.Clipper.PolyType,System.Boolean)">
            <summary>
                Adds the path.
            </summary>
            <param name="pg">
                The path.
            </param>
            <param name="polyType">
                Type of the polygpm.
            </param>
            <param name="closed">
                Gets of the path is closed or not.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
                Open paths have been disabled.
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.AddPaths(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},LeagueSharp.SDK.Clipper.PolyType,System.Boolean)">
            <summary>
                Adds the paths.
            </summary>
            <param name="ppg">
                The paths.
            </param>
            <param name="polyType">
                Type of the poly.
            </param>
            <param name="closed">
                if set to <c>true</c>, closes the path.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.Pt2IsBetweenPt1AndPt3(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The second point is between first point and third point.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
            <param name="pt3">
                The third point.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.RemoveEdge(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                Removes an edge.
            </summary>
            <param name="e">
                The edge.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Edge" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.SetDx(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                Sets the delta x.
            </summary>
            <param name="e">
                The edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.InsertLocalMinima(LeagueSharp.SDK.Clipper.LocalMinima)">
            <summary>
                The insert local minima.
            </summary>
            <param name="newLm">
                The new lm.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.PopLocalMinima">
            <summary>
                Pops the local minima.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.ReverseHorizontal(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                Reverse Horizontal on an edge.
            </summary>
            <param name="e">
                The edge
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperBase.GetBounds(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                Gets the bounds.
            </summary>
            <param name="paths">
                The paths.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.IntRect" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Clipper">
            <summary>
                Clips polygons.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.IoReverseSolution">
            <summary>
                Reverses the solution
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.IoStrictlySimple">
            <summary>
                Makes the clipping scrictly simple.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.IoPreserveCollinear">
            <summary>
                Perserves the collinear.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mPolyOuts">
            <summary>
                The _m poly outs.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mClipType">
            <summary>
                The _m clip type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mScanbeam">
            <summary>
                The _m scanbeam.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mActiveEdges">
            <summary>
                The _m active edges.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mSortedEdges">
            <summary>
                The _m sorted edges.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mIntersectList">
            <summary>
                The _m intersect list.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mIntersectNodeComparer">
            <summary>
                The _m intersect node comparer.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mExecuteLocked">
            <summary>
                The _m execute locked.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mClipFillType">
            <summary>
                The _m clip fill type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mSubjFillType">
            <summary>
                The _m subj fill type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mJoins">
            <summary>
                The _m joins.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mGhostJoins">
            <summary>
                The _m ghost joins.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.mUsingPolyTree">
            <summary>
                The _m using poly tree.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.Clipper" /> class.
            </summary>
            <param name="initOptions">The initialize options.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Reset">
            <summary>
                Resets this instance.
            </summary>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.Clipper.ReverseSolution">
            <summary>
                Gets or sets a value indicating whether to reverse the solution.
            </summary>
            <value>
                <c>true</c> if reversing the solution; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.Clipper.StrictlySimple">
            <summary>
                Gets or sets a value indicating whether clipping is strictly simple.
            </summary>
            <value>
                <c>true</c> if clipping is strictly simple; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.InsertScanbeam(System.Int64)">
            <summary>
                The insert scanbeam.
            </summary>
            <param name="y">
                The y.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Execute(LeagueSharp.SDK.Clipper.ClipType,System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},LeagueSharp.SDK.Clipper.PolyFillType,LeagueSharp.SDK.Clipper.PolyFillType)">
            <summary>
                Executes the specified clipping.
            </summary>
            <param name="clipType">
                Type of the clip.
            </param>
            <param name="solution">
                The solution.
            </param>
            <param name="subjFillType">
                Type of the subject fill.
            </param>
            <param name="clipFillType">
                Type of the clip fill.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
                Error: PolyTree struct is need for open path clipping.
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Execute(LeagueSharp.SDK.Clipper.ClipType,LeagueSharp.SDK.Clipper.PolyTree,LeagueSharp.SDK.Clipper.PolyFillType,LeagueSharp.SDK.Clipper.PolyFillType)">
            <summary>
                Executes the specified clipping.
            </summary>
            <param name="clipType">
                Type of the clip.
            </param>
            <param name="polytree">
                The polytree.
            </param>
            <param name="subjFillType">
                Type of the subject fill.
            </param>
            <param name="clipFillType">
                Type of the clip fill.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Execute(LeagueSharp.SDK.Clipper.ClipType,System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                Executes the specified clip type.
            </summary>
            <param name="clipType">
                Type of the clip.
            </param>
            <param name="solution">
                The solution.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Execute(LeagueSharp.SDK.Clipper.ClipType,LeagueSharp.SDK.Clipper.PolyTree)">
            <summary>
                Executes the specified clip type.
            </summary>
            <param name="clipType">
                Type of the clip.
            </param>
            <param name="polytree">
                The polytree.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FixHoleLinkage(LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The fix hole linkage.
            </summary>
            <param name="outRec">
                The out rec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ExecuteInternal">
            <summary>
                The execute internal.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PopScanbeam">
            <summary>
                The pop scanbeam.
            </summary>
            <returns>
                The <see cref="T:System.Int64" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DisposeAllPolyPts">
            <summary>
                The dispose all poly pts.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DisposeOutRec(System.Int32)">
            <summary>
                The dispose out rec.
            </summary>
            <param name="index">
                The index.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddJoin(LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The add join.
            </summary>
            <param name="op1">
                The op 1.
            </param>
            <param name="op2">
                The op 2.
            </param>
            <param name="offPt">
                The off pt.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddGhostJoin(LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The add ghost join.
            </summary>
            <param name="op">
                The op.
            </param>
            <param name="offPt">
                The off pt.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.InsertLocalMinimaIntoAel(System.Int64)">
            <summary>
                The insert local minima into ael.
            </summary>
            <param name="botY">
                The bot y.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.InsertEdgeIntoAel(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The insert edge into ael.
            </summary>
            <param name="edge">
                The edge.
            </param>
            <param name="startEdge">
                The start edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.E2InsertsBeforeE1(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                Inserts the second edge before the first edge.
            </summary>
            <param name="e1">
                The first edge.
            </param>
            <param name="e2">
                The second edge.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IsEvenOddFillType(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The is even odd fill type.
            </summary>
            <param name="edge">
                The edge.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IsEvenOddAltFillType(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The is even odd alt fill type.
            </summary>
            <param name="edge">
                The edge.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IsContributing(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The is contributing.
            </summary>
            <param name="edge">
                The edge.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SetWindingCount(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The set winding count.
            </summary>
            <param name="edge">
                The edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddEdgeToSel(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The add edge to sel.
            </summary>
            <param name="edge">
                The edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.CopyAeltoSel">
            <summary>
                The copy aelto sel.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SwapPositionsInAel(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The swap positions in ael.
            </summary>
            <param name="edge1">
                The edge 1.
            </param>
            <param name="edge2">
                The edge 2.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SwapPositionsInSel(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The swap positions in sel.
            </summary>
            <param name="edge1">
                The edge 1.
            </param>
            <param name="edge2">
                The edge 2.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddLocalMaxPoly(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The add local max poly.
            </summary>
            <param name="e1">
                The e 1.
            </param>
            <param name="e2">
                The e 2.
            </param>
            <param name="pt">
                The point.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddLocalMinPoly(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The add local min poly.
            </summary>
            <param name="e1">
                The first edge.
            </param>
            <param name="e2">
                The second edge.
            </param>
            <param name="pt">
                The point.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutPt" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.CreateOutRec">
            <summary>
                The create out rec.
            </summary>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutRec" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddOutPt(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The add out pt.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="pt">
                The point.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutPt" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SwapPoints(LeagueSharp.SDK.Clipper.IntPoint@,LeagueSharp.SDK.Clipper.IntPoint@)">
            <summary>
                The swap points.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.HorzSegmentsOverlap(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
                The horz segments overlap.
            </summary>
            <param name="seg1A">
                The A of the first segment.
            </param>
            <param name="seg1B">
                The B of the first segment.
            </param>
            <param name="seg2A">
                The A of the second segment.
            </param>
            <param name="seg2B">
                The B of the second segment.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SetHoleState(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The set hole state.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="outRec">
                The out rec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetDx(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The get dx.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FirstIsBottomPt(LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The first is bottom pt.
            </summary>
            <param name="btmPt1">
                The btm first point.
            </param>
            <param name="btmPt2">
                The btm second point.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetBottomPt(LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The get bottom pt.
            </summary>
            <param name="pp">
                The pp.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutPt" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetLowermostRec(LeagueSharp.SDK.Clipper.OutRec,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The get lowermost rec.
            </summary>
            <param name="outRec1">
                The out rec 1.
            </param>
            <param name="outRec2">
                The out rec 2.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutRec" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Param1RightOfParam2(LeagueSharp.SDK.Clipper.OutRec,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The param 1 right of param 2.
            </summary>
            <param name="outRec1">
                The out rec 1.
            </param>
            <param name="outRec2">
                The out rec 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetOutRec(System.Int32)">
            <summary>
                The get out rec.
            </summary>
            <param name="idx">
                The idx.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutRec" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AppendPolygon(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The append polygon.
            </summary>
            <param name="e1">
                The e 1.
            </param>
            <param name="e2">
                The e 2.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ReversePolyPtLinks(LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The reverse poly pt links.
            </summary>
            <param name="pp">
                The pp.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SwapSides(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The swap sides.
            </summary>
            <param name="edge1">
                The edge 1.
            </param>
            <param name="edge2">
                The edge 2.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SwapPolyIndexes(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The swap poly indexes.
            </summary>
            <param name="edge1">
                The edge 1.
            </param>
            <param name="edge2">
                The edge 2.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IntersectEdges(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The intersect edges.
            </summary>
            <param name="e1">
                The e 1.
            </param>
            <param name="e2">
                The e 2.
            </param>
            <param name="pt">
                The point.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DeleteFromAel(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The delete from ael.
            </summary>
            <param name="e">
                The edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DeleteFromSel(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The delete from sel.
            </summary>
            <param name="e">
                The edge.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.UpdateEdgeIntoAel(LeagueSharp.SDK.Clipper.Edge@)">
            <summary>
                The update edge into ael.
            </summary>
            <param name="e">
                The edge.
            </param>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ProcessHorizontals(System.Boolean)">
            <summary>
                The process horizontals.
            </summary>
            <param name="isTopOfScanbeam">
                The is top of scanbeam.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetHorzDirection(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Direction@,System.Int64@,System.Int64@)">
            <summary>
                The get horz direction.
            </summary>
            <param name="horzEdge">
                The horz edge.
            </param>
            <param name="dir">
                The dir.
            </param>
            <param name="left">
                The left.
            </param>
            <param name="right">
                The right.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ProcessHorizontal(LeagueSharp.SDK.Clipper.Edge,System.Boolean)">
            <summary>
                The process horizontal.
            </summary>
            <param name="horzEdge">
                The horz edge.
            </param>
            <param name="isTopOfScanbeam">
                The is top of scanbeam.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetNextInAel(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Direction)">
            <summary>
                The get next in ael.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="direction">
                The direction.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Edge" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IsMaxima(LeagueSharp.SDK.Clipper.Edge,System.Double)">
            <summary>
                The is maxima.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="y">
                The y.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IsIntermediate(LeagueSharp.SDK.Clipper.Edge,System.Double)">
            <summary>
                The is intermediate.
            </summary>
            <param name="e">
                The edge.
            </param>
            <param name="y">
                The y.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetMaximaPair(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The get maxima pair.
            </summary>
            <param name="e">
                The edge.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.Edge" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ProcessIntersections(System.Int64)">
            <summary>
                The process intersections.
            </summary>
            <param name="topY">
                The top y.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
                Thrown if the clipper was unable to process the intersections.
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.BuildIntersectList(System.Int64)">
            <summary>
                The build intersect list.
            </summary>
            <param name="topY">
                The top y.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.EdgesAdjacent(LeagueSharp.SDK.Clipper.IntersectNode)">
            <summary>
                The edges adjacent.
            </summary>
            <param name="inode">
                The inode.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FixupIntersectionOrder">
            <summary>
                The fixup intersection order.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ProcessIntersectList">
            <summary>
                The process intersect list.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Round(System.Double)">
            <summary>
                The round.
            </summary>
            <param name="value">
                The value.
            </param>
            <returns>
                The <see cref="T:System.Int64" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.TopX(LeagueSharp.SDK.Clipper.Edge,System.Int64)">
            <summary>
                The top x.
            </summary>
            <param name="edge">
                The edge.
            </param>
            <param name="currentY">
                The current y.
            </param>
            <returns>
                The <see cref="T:System.Int64" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.IntersectPoint(LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.Edge,LeagueSharp.SDK.Clipper.IntPoint@)">
            <summary>
                The intersect point.
            </summary>
            <param name="edge1">
                The edge 1.
            </param>
            <param name="edge2">
                The edge 2.
            </param>
            <param name="ip">
                The ip.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ProcessEdgesAtTopOfScanbeam(System.Int64)">
            <summary>
                The process edges at top of scanbeam.
            </summary>
            <param name="topY">
                The top y.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DoMaxima(LeagueSharp.SDK.Clipper.Edge)">
            <summary>
                The do maxima.
            </summary>
            <param name="e">
                The edge.
            </param>
            <exception cref="T:LeagueSharp.SDK.Clipper.ClipperException">
                Thrown if the clipper is unable to process the maximum of the edge.
            </exception>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ReversePaths(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                Reverses the paths.
            </summary>
            <param name="polys">The paths.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Orientation(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint})">
            <summary>
                Orientates the specified path.
            </summary>
            <param name="poly">The path.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PointCount(LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The point count.
            </summary>
            <param name="pts">
                The pts.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.BuildResult(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                The build result.
            </summary>
            <param name="polyg">
                The polyg.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.BuildResult2(LeagueSharp.SDK.Clipper.PolyTree)">
            <summary>
                The build result 2.
            </summary>
            <param name="polytree">
                The polytree.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FixupOutPolygon(LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The fixup out polygon.
            </summary>
            <param name="outRec">
                The out rec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DupOutPt(LeagueSharp.SDK.Clipper.OutPt,System.Boolean)">
            <summary>
                The dup out pt.
            </summary>
            <param name="outPt">
                The out pt.
            </param>
            <param name="insertAfter">
                The insert after.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutPt" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.GetOverlap(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
                The get overlap.
            </summary>
            <param name="a1">
                The a 1.
            </param>
            <param name="a2">
                The a 2.
            </param>
            <param name="b1">
                The b 1.
            </param>
            <param name="b2">
                The b 2.
            </param>
            <param name="left">
                The left.
            </param>
            <param name="right">
                The right.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.JoinHorz(LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.IntPoint,System.Boolean)">
            <summary>
                The join horz.
            </summary>
            <param name="op1">
                The op 1.
            </param>
            <param name="op1B">
                The op 1 b.
            </param>
            <param name="op2">
                The op 2.
            </param>
            <param name="op2B">
                The op 2 b.
            </param>
            <param name="pt">
                The point.
            </param>
            <param name="discardLeft">
                The discard left.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.JoinPoints(LeagueSharp.SDK.Clipper.Join,LeagueSharp.SDK.Clipper.OutRec,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The join points.
            </summary>
            <param name="j">
                The j.
            </param>
            <param name="outRec1">
                The out rec 1.
            </param>
            <param name="outRec2">
                The out rec 2.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PointInPolygon(LeagueSharp.SDK.Clipper.IntPoint,System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint})">
            <summary>
                Checks if a point is in the polygon.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="path">
                The path.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PointInPolygon(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The point in polygon.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="op">
                The op.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Poly2ContainsPoly1(LeagueSharp.SDK.Clipper.OutPt,LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The poly 2 contains poly 1.
            </summary>
            <param name="outPt1">
                The out first point.
            </param>
            <param name="outPt2">
                The out second point.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FixupFirstLefts1(LeagueSharp.SDK.Clipper.OutRec,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The fixup first lefts 1.
            </summary>
            <param name="oldOutRec">
                The old out rec.
            </param>
            <param name="newOutRec">
                The new out rec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.FixupFirstLefts2(LeagueSharp.SDK.Clipper.OutRec,LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The fixup first lefts 2.
            </summary>
            <param name="oldOutRec">
                The old out rec.
            </param>
            <param name="newOutRec">
                The new out rec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ParseFirstLeft(LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The parse first left.
            </summary>
            <param name="firstLeft">
                The first left.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutRec" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.JoinCommonEdges">
            <summary>
                The join common edges.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.UpdateOutPtIdxs(LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The update out pt idxs.
            </summary>
            <param name="outrec">
                The outrec.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DoSimplePolygons">
            <summary>
                The do simple polygons.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Area(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint})">
            <summary>
                Gets the area of the specified polygon.
            </summary>
            <param name="poly">
                The polygon.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Area(LeagueSharp.SDK.Clipper.OutRec)">
            <summary>
                The area.
            </summary>
            <param name="outRec">
                The out rec.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SimplifyPolygon(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},LeagueSharp.SDK.Clipper.PolyFillType)">
            <summary>
                Simplifies the polygon.
            </summary>
            <param name="poly">
                The polygon.
            </param>
            <param name="fillType">
                Type of the fill.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SimplifyPolygons(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},LeagueSharp.SDK.Clipper.PolyFillType)">
            <summary>
                Simplifies the polygons.
            </summary>
            <param name="polys">
                The polygon.
            </param>
            <param name="fillType">
                Type of the fill.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.DistanceFromLineSqrd(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The distance from line sqrd.
            </summary>
            <param name="pt">
                The point.
            </param>
            <param name="ln1">
                The ln 1.
            </param>
            <param name="ln2">
                The ln 2.
            </param>
            <returns>
                The <see cref="T:System.Double" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.SlopesNearCollinear(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,System.Double)">
            <summary>
                The slopes near collinear.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
            <param name="pt3">
                The third point.
            </param>
            <param name="distSqrd">
                The dist sqrd.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PointsAreClose(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint,System.Double)">
            <summary>
                The points are close.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
            <param name="distSqrd">
                The dist sqrd.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ExcludeOp(LeagueSharp.SDK.Clipper.OutPt)">
            <summary>
                The exclude op.
            </summary>
            <param name="op">
                The op.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.OutPt" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.CleanPolygon(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Double)">
            <summary>
                Cleans the polygon.
            </summary>
            <param name="path">
                The path.
            </param>
            <param name="distance">
                The distance.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.CleanPolygons(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},System.Double)">
            <summary>
                Cleans the polygons.
            </summary>
            <param name="polys">
                The polygon.
            </param>
            <param name="distance">
                The distance.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.Minkowski(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Boolean,System.Boolean)">
            <summary>
                The minkowski.
            </summary>
            <param name="pattern">
                The pattern.
            </param>
            <param name="path">
                The path.
            </param>
            <param name="isSum">
                Indicates whether is the sum.
            </param>
            <param name="isClosed">
                Indiciates whether is closed.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.MinkowskiSum(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Boolean)">
            <summary>
                Gets the Minkowskis sum.
            </summary>
            <param name="pattern">
                The pattern.
            </param>
            <param name="path">
                The path.
            </param>
            <param name="pathIsClosed">
                Whether the path is closed or not.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.TranslatePath(System.Collections.Generic.IReadOnlyList{LeagueSharp.SDK.Clipper.IntPoint},LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The translate path.
            </summary>
            <param name="path">
                The path.
            </param>
            <param name="delta">
                The delta.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.MinkowskiSum(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},System.Boolean)">
            <summary>
                Gets the Minkowskis sum.
            </summary>
            <param name="pattern">
                The pattern.
            </param>
            <param name="paths">
                The paths.
            </param>
            <param name="pathIsClosed">
                Whether the path is closed or not.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.MinkowskiDiff(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint})">
            <summary>
                Gets the Minkowskis difference.
            </summary>
            <param name="poly1">
                Polygon 1.
            </param>
            <param name="poly2">
                Polygon 2.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.Clipper.NodeType">
            <summary>
                The node type.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.NodeType.NtAny">
            <summary>
                The nt any.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.NodeType.NtOpen">
            <summary>
                The nt open.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.Clipper.NodeType.NtClosed">
            <summary>
                The nt closed.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.PolyTreeToPaths(LeagueSharp.SDK.Clipper.PolyTree)">
            <summary>
                Converts a <see cref="T:LeagueSharp.SDK.Clipper.PolyTree" /> to a <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <param name="polytree">
                The polytree.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.AddPolyNodeToPaths(LeagueSharp.SDK.Clipper.PolyNode,LeagueSharp.SDK.Clipper.Clipper.NodeType,System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}})">
            <summary>
                The add poly node to paths.
            </summary>
            <param name="polynode">
                The polynode.
            </param>
            <param name="nt">
                The nt.
            </param>
            <param name="paths">
                The paths.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.OpenPathsFromPolyTree(LeagueSharp.SDK.Clipper.PolyTree)">
            <summary>
                Opens the paths from poly tree.
            </summary>
            <param name="polytree">The polytree.</param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.Clipper.ClosedPathsFromPolyTree(LeagueSharp.SDK.Clipper.PolyTree)">
            <summary>
                Gets the closed the paths from poly tree.
            </summary>
            <param name="polytree">
                The <c>polytree</c>.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.List`1" />.
            </returns>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.ClipperOffset">
            <summary>
                Clipping offset.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.DefArcTolerance">
            <summary>
                The def arc tolerance.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.TwoPi">
            <summary>
                The two pi.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mNormals">
            <summary>
                The _m normals.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mPolyNodes">
            <summary>
                The _m poly nodes.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mCos">
            <summary>
                The _m cos.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mDelta">
            <summary>
                The _m delta.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mDestPoly">
            <summary>
                The _m dest poly.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mDestPolys">
            <summary>
                The _m dest polys.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mLowest">
            <summary>
                The _m lowest.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mMiterLim">
            <summary>
                The _m miter lim.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mSin">
            <summary>
                The _m sin.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mSinA">
            <summary>
                The _m sin a.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mSrcPoly">
            <summary>
                The _m src poly.
            </summary>
        </member>
        <member name="F:LeagueSharp.SDK.Clipper.ClipperOffset.mStepsPerRad">
            <summary>
                The _m steps per rad.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.ClipperOffset" /> class.
            </summary>
            <param name="miterLimit">The miter limit.</param>
            <param name="arcTolerance">The arc tolerance.</param>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.ClipperOffset.ArcTolerance">
            <summary>
                Gets or sets the arc tolerance.
            </summary>
            <value>
                The arc tolerance.
            </value>
        </member>
        <member name="P:LeagueSharp.SDK.Clipper.ClipperOffset.MiterLimit">
            <summary>
                Gets or sets the miter limit.
            </summary>
            <value>
                The miter limit.
            </value>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.AddPath(System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint},LeagueSharp.SDK.Clipper.JoinType,LeagueSharp.SDK.Clipper.EndType)">
            <summary>
                Adds the path.
            </summary>
            <param name="path">The path.</param>
            <param name="joinType">Type of the join.</param>
            <param name="endType">The end type.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.AddPaths(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}},LeagueSharp.SDK.Clipper.JoinType,LeagueSharp.SDK.Clipper.EndType)">
            <summary>
                Adds the paths.
            </summary>
            <param name="paths">The paths.</param>
            <param name="joinType">Type of the join.</param>
            <param name="endType">The end type.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.Execute(System.Collections.Generic.List{System.Collections.Generic.List{LeagueSharp.SDK.Clipper.IntPoint}}@,System.Double)">
            <summary>
                Executes the specified solution.
            </summary>
            <param name="solution">The solution.</param>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.Execute(LeagueSharp.SDK.Clipper.PolyTree@,System.Double)">
            <summary>
                Executes the specified solution.
            </summary>
            <param name="solution">The solution.</param>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.GetUnitNormal(LeagueSharp.SDK.Clipper.IntPoint,LeagueSharp.SDK.Clipper.IntPoint)">
            <summary>
                The get unit normal.
            </summary>
            <param name="pt1">
                The first point.
            </param>
            <param name="pt2">
                The second point.
            </param>
            <returns>
                The <see cref="T:LeagueSharp.SDK.Clipper.DoublePoint" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.Round(System.Double)">
            <summary>
                The round.
            </summary>
            <param name="value">
                The value.
            </param>
            <returns>
                The <see cref="T:System.Int64" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.DoMiter(System.Int32,System.Int32,System.Double)">
            <summary>
                The do miter.
            </summary>
            <param name="j">
                The j.
            </param>
            <param name="k">
                The k.
            </param>
            <param name="r">
                The r.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.DoRound(System.Int32,System.Int32)">
            <summary>
                The do round.
            </summary>
            <param name="j">
                The j.
            </param>
            <param name="k">
                The k.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.DoSquare(System.Int32,System.Int32)">
            <summary>
                The do square.
            </summary>
            <param name="j">
                The j.
            </param>
            <param name="k">
                The k.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.DoOffset(System.Double)">
            <summary>
                The do offset.
            </summary>
            <param name="delta">
                The delta.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.FixOrientations">
            <summary>
                The fix orientations.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperOffset.OffsetPoint(System.Int32,System.Int32@,LeagueSharp.SDK.Clipper.JoinType)">
            <summary>
                The offset point.
            </summary>
            <param name="j">
                The j.
            </param>
            <param name="k">
                The k.
            </param>
            <param name="jointype">
                The jointype.
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.Clipper.ClipperException">
            <summary>
                Clipper Exception.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.Clipper.ClipperException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.Clipper.ClipperException" /> class.
                Clipper Exception constructor.
            </summary>
            <param name="description">
                Exception description
            </param>
        </member>
        <member name="T:LeagueSharp.SDK.MoreLinq.MoreEnumerable">
            <summary>
                Provides a set of static methods for querying objects that
                implement <see cref="T:System.Collections.Generic.IEnumerable`1" />. The actual methods
                are implemented in files reflecting the method name.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Acquire``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Ensures that a source sequence of <see cref="T:System.IDisposable" />
                objects are all acquired successfully. If the acquisition of any
                one <see cref="T:System.IDisposable" /> fails then those successfully
                acquired till that point are disposed.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence of <see cref="T:System.IDisposable" /> objects.</param>
            <returns>
                Returns an array of all the acquired <see cref="T:System.IDisposable" />
                object and in source order.
            </returns>
            <remarks>
                This operator executes immediately.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Batches the source sequence into sized buckets.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <returns>A sequence of equally sized buckets containing elements of the source collection.</returns>
            <remarks> This operator uses deferred execution and streams its results (buckets and bucket content).</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Batches the source sequence into sized buckets and applies a projection to each bucket.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <typeparam name="TResult">Type of result returned by <paramref name="resultSelector" />.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <param name="resultSelector">The projection to apply to each bucket.</param>
            <returns>A sequence of projections on equally sized buckets containing elements of the source collection.</returns>
            <remarks> This operator uses deferred execution and streams its results (buckets and bucket content).</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a sequence consisting of the head element and the given tail elements.
            </summary>
            <typeparam name="T">Type of sequence</typeparam>
            <param name="head">Head element of the new sequence.</param>
            <param name="tail">All elements of the tail. Must not be null.</param>
            <returns>A sequence consisting of the head elements and the given tail elements.</returns>
            <remarks>This operator uses deferred execution and streams its results.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns a sequence consisting of the head elements and the given tail element.
            </summary>
            <typeparam name="T">Type of sequence</typeparam>
            <param name="head">All elements of the head. Must not be null.</param>
            <param name="tail">Tail element of the new sequence.</param>
            <returns>A sequence consisting of the head elements and the given tail element.</returns>
            <remarks>This operator uses deferred execution and streams its results.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Completely consumes the given sequence. This method uses immediate execution,
                and doesn't store any data during execution.
            </summary>
            <typeparam name="T">Element type of the sequence</typeparam>
            <param name="source">Source to consume</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns all distinct elements of the given source, where "distinctness"
                is determined via a projection and the default equality comparer for the projected type.
            </summary>
            <remarks>
                This operator uses deferred execution and streams the results, although
                a set of already-seen keys is retained. If a key is seen multiple times,
                only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>
                A sequence consisting of distinct elements from the source sequence,
                comparing them by the specified key projection.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Returns all distinct elements of the given source, where "distinctness"
                is determined via a projection and the specified comparer for the projected type.
            </summary>
            <remarks>
                This operator uses deferred execution and streams the results, although
                a set of already-seen keys is retained. If a key is seen multiple times,
                only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <param name="comparer">
                The equality comparer to use to determine whether or not keys are equal.
                If null, the default equality comparer for <c>TSource</c> is used.
            </param>
            <returns>
                A sequence consisting of distinct elements from the source sequence,
                comparing them by the specified key projection.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.EquiZip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
                Returns a projection of tuples, where each tuple contains the N-th element
                from each of the argument sequences.
            </summary>
            <remarks>
                If the two input sequences are of different lengths then
                <see cref="T:System.InvalidOperationException" /> is thrown.
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 1, 2, 3, 4 };
            string[] letters = { "A", "B", "C", "D" };
            var zipped = numbers.EquiZip(letters, (n, l) => n + l);
            </code>
                The <c>zipped</c> variable, when iterated over, will yield "1A", "2B", "3C", "4D" in turn.
            </example>
            <typeparam name="TFirst">Type of elements in first sequence</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="resultSelector">Function to apply to each pair of elements</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the set of elements in the first sequence which aren't
                in the second sequence, according to a given key selector.
            </summary>
            <remarks>
                This is a set operation; if multiple elements in <paramref name="first" /> have
                equal keys, only the first such element is returned.
                This operator uses deferred execution and streams the results, although
                a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">
                The sequence of elements whose keys may prevent elements in
                <paramref name="first" /> from being returned.
            </param>
            <param name="keySelector">The mapping from source element to key.</param>
            <returns>
                A sequence of elements from <paramref name="first" /> whose key was not also a key for
                any element in <paramref name="second" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Returns the set of elements in the first sequence which aren't
                in the second sequence, according to a given key selector.
            </summary>
            <remarks>
                This is a set operation; if multiple elements in <paramref name="first" /> have
                equal keys, only the first such element is returned.
                This operator uses deferred execution and streams the results, although
                a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">
                The sequence of elements whose keys may prevent elements in
                <paramref name="first" /> from being returned.
            </param>
            <param name="keySelector">The mapping from source element to key.</param>
            <param name="keyComparer">
                The equality comparer to use to determine whether or not keys are equal.
                If null, the default equality comparer for <c>TSource</c> is used.
            </param>
            <returns>
                A sequence of elements from <paramref name="first" /> whose key was not also a key for
                any element in <paramref name="second" />.
            </returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Immediately executes the given action on each element in the source sequence.
                Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">
                The action to execute on each element; the second parameter
                of the action represents the index of the source element.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Generate``1(``0,System.Func{``0,``0})">
            <summary>
                Returns a sequence of values consecutively generated by a generator function.
            </summary>
            <typeparam name="TResult">Type of elements to generate.</typeparam>
            <param name="initial">Value of first element in sequence</param>
            <param name="generator">
                Generator function which takes the previous series element and uses it to generate the next element.
            </param>
            <remarks>
                This function defers element generation until needed and streams the results.
            </remarks>
            <example>
                <code>
            IEnumerable&lt;int&gt; result = Sequence.Generate(2, n => n * n).Take(5);
            </code>
                The <c>result</c> variable, when iterated over, will yield 2, 4, 16, 256, and 65536, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.GenerateByIndex``1(System.Func{System.Int32,``0})">
            <summary>
                Returns a sequence of values based on indexes.
            </summary>
            <remarks>
                The sequence is (practically) infinite
                - the index ranges from 0 to <c>int.MaxValue</c> inclusive. This function defers
                execution and streams the results.
            </remarks>
            <typeparam name="TResult">Type of result to generate</typeparam>
            <param name="generator">Generation function to apply to each index</param>
            <returns>A sequence </returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Groups the adjacent elements of a sequence according to a
                specified key selector function.
            </summary>
            <typeparam name="TSource">
                The type of the elements of
                <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by
                <paramref name="keySelector" />.
            </typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">
                A function to extract the key for each
                element.
            </param>
            <returns>
                A sequence of groupings where each grouping
                (<see cref="T:System.Linq.IGrouping`2" />) contains the key
                and the adjacent elements in the same order as found in the
                source sequence.
            </returns>
            <remarks>
                This method is implemented by using deferred execution and
                streams the groupings. The grouping elements, however, are
                buffered. Each grouping is therefore yielded as soon as it
                is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Groups the adjacent elements of a sequence according to a
                specified key selector function and compares the keys by using a
                specified comparer.
            </summary>
            <typeparam name="TSource">
                The type of the elements of
                <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by
                <paramref name="keySelector" />.
            </typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">
                A function to extract the key for each
                element.
            </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
                compare keys.
            </param>
            <returns>
                A sequence of groupings where each grouping
                (<see cref="T:System.Linq.IGrouping`2" />) contains the key
                and the adjacent elements in the same order as found in the
                source sequence.
            </returns>
            <remarks>
                This method is implemented by using deferred execution and
                streams the groupings. The grouping elements, however, are
                buffered. Each grouping is therefore yielded as soon as it
                is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
                Groups the adjacent elements of a sequence according to a
                specified key selector function and projects the elements for
                each group by using a specified function.
            </summary>
            <typeparam name="TSource">
                The type of the elements of
                <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by
                <paramref name="keySelector" />.
            </typeparam>
            <typeparam name="TElement">
                The type of the elements in the
                resulting groupings.
            </typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">
                A function to extract the key for each
                element.
            </param>
            <param name="elementSelector">
                A function to map each source
                element to an element in the resulting grouping.
            </param>
            <returns>
                A sequence of groupings where each grouping
                (<see cref="T:System.Linq.IGrouping`2" />) contains the key
                and the adjacent elements (of type <typeparamref name="TElement" />)
                in the same order as found in the source sequence.
            </returns>
            <remarks>
                This method is implemented by using deferred execution and
                streams the groupings. The grouping elements, however, are
                buffered. Each grouping is therefore yielded as soon as it
                is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Groups the adjacent elements of a sequence according to a
                specified key selector function. The keys are compared by using
                a comparer and each group's elements are projected by using a
                specified function.
            </summary>
            <typeparam name="TSource">
                The type of the elements of
                <paramref name="source" />.
            </typeparam>
            <typeparam name="TKey">
                The type of the key returned by
                <paramref name="keySelector" />.
            </typeparam>
            <typeparam name="TElement">
                The type of the elements in the
                resulting groupings.
            </typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">
                A function to extract the key for each
                element.
            </param>
            <param name="elementSelector">
                A function to map each source
                element to an element in the resulting grouping.
            </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
                compare keys.
            </param>
            <returns>
                A sequence of groupings where each grouping
                (<see cref="T:System.Linq.IGrouping`2" />) contains the key
                and the adjacent elements (of type <typeparamref name="TElement" />)
                in the same order as found in the source sequence.
            </returns>
            <remarks>
                This method is implemented by using deferred execution and
                streams the groupings. The grouping elements, however, are
                buffered. Each grouping is therefore yielded as soon as it
                is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
                where the key is the zero-based index of the value in the source
                sequence.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>
                This operator uses deferred execution and streams its
                results.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
                where the key is the index of the value in the source sequence.
                An additional parameter specifies the starting index.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="startIndex"></param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>
                This operator uses deferred execution and streams its
                results.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the maximal element of the given sequence, based on
                the given projection.
            </summary>
            <remarks>
                If more than one element has the maximal projected value, the first
                one encountered will be returned. This overload uses the default comparer
                for the projected type. This operator uses immediate execution, but
                only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="selector" /> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is empty</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Returns the maximal element of the given sequence, based on
                the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
                If more than one element has the maximal projected value, the first
                one encountered will be returned. This operator uses immediate execution, but
                only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
                or <paramref name="comparer" /> is null
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is empty</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the minimal element of the given sequence, based on
                the given projection.
            </summary>
            <remarks>
                If more than one element has the minimal projected value, the first
                one encountered will be returned. This overload uses the default comparer
                for the projected type. This operator uses immediate execution, but
                only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="selector" /> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is empty</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Returns the minimal element of the given sequence, based on
                the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
                If more than one element has the minimal projected value, the first
                one encountered will be returned. This operator uses immediate execution, but
                only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
                or <paramref name="comparer" /> is null
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source" /> is empty</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Merges two ordered sequences into one. Where the elements equal
                in both sequences, the element from the first sequence is
                returned in the resulting sequence.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Merges two ordered sequences into one with an additional
                parameter specifying how to compare the elements of the
                sequences. Where the elements equal in both sequences, the
                element from the first sequence is returned in the resulting
                sequence.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Merges two ordered sequences into one with an additional
                parameter specifying the element key by which the sequences are
                ordered. Where the keys equal in both sequences, the
                element from the first sequence is returned in the resulting
                sequence.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
                Merges two ordered sequences into one. Additional parameters
                specify the element key by which the sequences are ordered,
                the result when element is found in first sequence but not in
                the second, the result when element is found in second sequence
                but not in the first and the result when elements are found in
                both sequences.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
                Merges two ordered sequences into one. Additional parameters
                specify the element key by which the sequences are ordered,
                the result when element is found in first sequence but not in
                the second, the result when element is found in second sequence
                but not in the first, the result when elements are found in
                both sequences and a method for comparing keys.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
                Merges two heterogeneous sequences ordered by a common key type
                into a homogeneous one. Additional parameters specify the
                element key by which the sequences are ordered, the result when
                element is found in first sequence but not in the second and
                the result when element is found in second sequence but not in
                the first, the result when elements are found in both sequences.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
                Merges two heterogeneous sequences ordered by a common key type
                into a homogeneous one. Additional parameters specify the
                element key by which the sequences are ordered, the result when
                element is found in first sequence but not in the second,
                the result when element is found in second sequence but not in
                the first, the result when elements are found in both sequences
                and a method for comparing keys.
            </summary>
            <remarks>
                This method uses deferred execution. The behavior is undefined
                if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Pads a sequence with default values if it is narrower (shorter
                in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <returns>
                Returns a sequence that is at least as wide/long as the width/length
                specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 123, 456, 789 };
            IEnumerable&lt;int&gt; result = numbers.Pad(5);
            </code>
                The <c>result</c> variable, when iterated over, will yield
                123, 456, 789 and two zeroes, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
                Pads a sequence with a given filler value if it is narrower (shorter
                in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="padding">The value to use for padding.</param>
            <returns>
                Returns a sequence that is at least as wide/long as the width/length
                specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 123, 456, 789 };
            IEnumerable&lt;int&gt; result = numbers.Pad(5, -1);
            </code>
                The <c>result</c> variable, when iterated over, will yield
                123, 456, and 789 followed by two occurrences of -1, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
            <summary>
                Pads a sequence with a dynamic filler value if it is narrower (shorter
                in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="paddingSelector">Function to calculate padding.</param>
            <returns>
                Returns a sequence that is at least as wide/long as the width/length
                specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 0, 1, 2 };
            IEnumerable&lt;int&gt; result = numbers.Pad(5, i => -i);
            </code>
                The <c>result</c> variable, when iterated over, will yield
                0, 1, 2, -3 and -4, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
                Returns a sequence resulting from applying a function to each
                element in the source sequence and its
                predecessor, with the exception of the first element which is
                only returned as the predecessor of the second element.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">
                A transform function to apply to
                each pair of sequence.
            </param>
            <returns>
                Returns the resulting sequence.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 123, 456, 789 };
            IEnumerable&lt;int&gt; result = numbers.Pairwise(5, (a, b) => a + b);
            </code>
                The <c>result</c> variable, when iterated over, will yield
                579 and 1245, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Pipe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Executes the given action on each element in the source sequence
                and yields it.
            </summary>
            <remarks>
                The returned sequence is essentially a duplicate of
                the original, but with the extra action being executed while the
                sequence is evaluated. The action is always taken before the element
                is yielded, so any changes made by the action will be visible in the
                returned sequence. This operator uses deferred execution and streams it results.
            </remarks>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Prepends a single value to a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to prepend to.</param>
            <param name="value">The value to prepend.</param>
            <returns>
                Returns a sequence where a value is prepended to it.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <code>
            int[] numbers = { 1, 2, 3 };
            IEnumerable&lt;int&gt; result = numbers.Prepend(0);
            </code>
            The
            <c>result</c>
            variable, when iterated over, will yield 
            0, 1, 2 and 3, in turn.
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
                Performs a pre-scan (exclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
                An exclusive prefix sum returns an equal-length sequence where the
                N-th element is the sum of the first N-1 input elements (the first
                element is a special case, it is set to the identity). More
                generally, the pre-scan allows any commutative binary operation,
                not just a sum.
                The inclusive version of PreScan is <see cref="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />.
                This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code>
            Func&lt;int, int, int&gt; plus = (a, b) =&gt; a + b;
            int[] values = { 1, 2, 3, 4 };
            IEnumerable&lt;int&gt; prescan = values.PreScan(plus, 0);
            IEnumerable&lt;int&gt; scan = values.Scan(plus; a + b);
            IEnumerable&lt;int&gt; result = values.Zip(prescan, plus);
            </code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
                and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
                shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <param name="identity">Identity element (see remarks)</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
                Peforms a scan (inclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
                An inclusive prefix sum returns an equal-length sequence where the
                N-th element is the sum of the first N input elements. More
                generally, the scan allows any commutative binary operation, not
                just a sum.
                The exclusive version of Scan is <see cref="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)" />.
                This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code>
            Func&lt;int, int, int&gt; plus = (a, b) =&gt; a + b;
            int[] values = { 1, 2, 3, 4 };
            IEnumerable&lt;int&gt; prescan = values.PreScan(plus, 0);
            IEnumerable&lt;int&gt; scan = values.Scan(plus; a + b);
            IEnumerable&lt;int&gt; result = values.Zip(prescan, plus);
            </code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
                and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
                shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="source" /> is empty.</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
                Like <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> except returns
                the sequence of intermediate results as well as the final one.
                An additional parameter specifies a seed.
            </summary>
            <remarks>
                This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code>
            var result = Enumerable.Range(1, 5).Scan(0, (a, b) =&gt; a + b);
            </code>
                When iterated, <c>result</c> will yield <c>{ 0, 1, 3, 6, 10, 15 }</c>.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <typeparam name="TState">Type of state</typeparam>
            <param name="source">Source sequence</param>
            <param name="seed">Initial state to seed</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.SingleOrFallback``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>
                Returns the single element in the given sequence, or the result
                of executing a fallback delegate if the sequence is empty.
                This method throws an exception if there is more than one element in the sequence.
            </summary>
            <remarks>
                The fallback delegate is not executed if the sequence is non-empty.
                This operator uses immediate execution and has optimizations for <see cref="T:System.Collections.Generic.IList`1" /> sources.
            </remarks>
            <typeparam name="TSource">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="fallback">The fallback delegate to execute if the sequence is empty</param>
            <exception cref="T:System.ArgumentNullException">source or fallback is null</exception>
            <exception cref="T:System.InvalidOperationException">The sequence has more than one element</exception>
            <returns>
                The single element in the sequence, or the result of calling the
                fallback delegate if the sequence is empty.
            </returns>
            <example>
                <code>
            var numbers = { 123, 456, 789 };
            var result = numbers.Where(x => x == 100).SingleOrFallback(() => -1);
            </code>
                The <c>result</c> variable will contain <c>-1</c>.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.SkipUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Skips items from the input sequence until the given predicate returns true
                when applied to the current source item; that item will be the last skipped.
            </summary>
            <remarks>
                <para>
                    SkipUntil differs from Enumerable.SkipWhile in two respects. Firstly, the sense
                    of the predicate is reversed: it is expected that the predicate will return false
                    to start with, and then return true - for example, when trying to find a matching
                    item in a sequence.
                </para>
                <para>
                    Secondly, SkipUntil skips the element which causes the predicate to return true. For
                    example, in a sequence <code>{ 1, 2, 3, 4, 5 }</code> and with a predicate of
                    <code>x => x == 3</code>, the result would be <code>{ 4, 5 }</code>.
                </para>
                <para>
                    SkipUntil is as lazy as possible: it will not iterate over the source sequence
                    until it has to, it won't iterate further than it has to, and it won't evaluate
                    the predicate until it has to. (This means that an item may be returned which would
                    actually cause the predicate to throw an exception if it were evaluated, so long as
                    it comes after the first item causing the predicate to return true.)
                </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence after the predicate first returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Splits the source sequence by a separator.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
                Splits the source sequence by a separator given a maximum count of splits.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator and then transforms
                the splits into results.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator, given a maximum count
                of splits, and then transforms the splits into results.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Splits the source sequence by a separator and then transforms the
                splits into results.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
                Splits the source sequence by a separator, given a maximum count
                of splits. A parameter specifies how the separator is compared
                for equality.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator and then transforms the
                splits into results. A parameter specifies how the separator is
                compared for equality.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator, given a maximum count
                of splits, and then transforms the splits into results. A
                parameter specifies how the separator is compared for equality.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Splits the source sequence by a separator function.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Splits the source sequence by a separator function, given a
                maximum count of splits.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator function and then
                transforms the splits into results.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Splits the source sequence by a separator function, given a
                maximum count of splits, and then transforms the splits into results.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns every N-th element of a source sequence.
            </summary>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="step">Number of elements to bypass before returning the next element.</param>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 1, 2, 3, 4, 5 };
            IEnumerable&lt;int&gt; result = numbers.TakeEvery(2);
            </code>
                The <c>result</c> variable, when iterated over, will yield 1, 3 and 5, in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a specified number of contiguous elements from the end of
                a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of
                elements from the end of the input sequence.
            </returns>
            <remarks>
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 12, 34, 56, 78 };
            IEnumerable&lt;int&gt; result = numbers.TakeLast(2);
            </code>
                The <c>result</c> variable, when iterated over, will yield
                56 and 78 in turn.
            </example>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns items from the input sequence until the given predicate returns true
                when applied to the current source item; that item will be the last returned.
            </summary>
            <remarks>
                <para>
                    TakeUntil differs from Enumerable.TakeWhile in two respects. Firstly, the sense
                    of the predicate is reversed: it is expected that the predicate will return false
                    to start with, and then return true - for example, when trying to find a matching
                    item in a sequence.
                </para>
                <para>
                    Secondly, TakeUntil yields the element which causes the predicate to return true. For
                    example, in a sequence <code>{ 1, 2, 3, 4, 5 }</code> and with a predicate of
                    <code>x => x == 3</code>, the result would be <code>{ 1, 2, 3 }</code>.
                </para>
                <para>
                    TakeUntil is as lazy as possible: it will not iterate over the source sequence
                    until it has to, it won't iterate further than it has to, and it won't evaluate
                    the predicate until it has to. (This means that an item may be returned which would
                    actually cause the predicate to throw an exception if it were evaluated, so long as
                    no more items of data are requested.)
                </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence, until the predicate returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
                object with a set of lambda expressions specifying which members (property
                or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable">The type of the input and resulting <see cref="T:System.Data.DataTable" /> object.</typeparam>
            <param name="source">The source.</param>
            <param name="table">The <see cref="T:System.Data.DataTable" /> type of object where to add rows</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
                A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
                Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable"></typeparam>
            <param name="source">The source.</param>
            <param name="table"></param>
            <returns>
                A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
                object with a set of lambda expressions specifying which members (property
                or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
                A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <returns>
                A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.BuildOrBindSchema(System.Data.DataTable,System.Reflection.MemberInfo[])">
            <remarks>
                The resulting array may contain null entries and those represent
                columns for which there is no source member supplying a value.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates a delimited string from a sequence of values. The
                delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
                This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">
                The sequence of items to delimit. Each is converted to a string using the
                simple ToString() conversion.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Creates a delimited string from a sequence of values and
                a given delimiter.
            </summary>
            <remarks>
                This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">
                The sequence of items to delimit. Each is converted to a string using the
                simple ToString() conversion.
            </param>
            <param name="delimiter">
                The delimiter to inject between elements. May be null, in which case
                the executing thread's current culture's list separator is used.
            </param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the default equality
                comparer for the type.
            </summary>
            <remarks>
                This evaluates the input sequence completely.
            </remarks>
            <param name="source">Source sequence</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the specified equality
                comparer for the type.
            </summary>
            <remarks>
                This evaluates the input sequence completely.
            </remarks>
            <param name="source">Source sequence</param>
            <param name="comparer">
                Equality comparer to use; a value of null will cause the type's default equality comparer to be
                used
            </param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null</exception>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Traces the elements of a source sequence for diagnostics.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <returns>
                Return the source sequence unmodified.
            </returns>
            <remarks>
                This a pass-through operator that uses deferred execution and
                streams the results.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Traces the elements of a source sequence for diagnostics using
                custom formatting.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="format">
                String to use to format the trace message. If null then the
                element value becomes the traced message.
            </param>
            <returns>
                Return the source sequence unmodified.
            </returns>
            <remarks>
                This a pass-through operator that uses deferred execution and
                streams the results.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
                Traces the elements of a source sequence for diagnostics using
                a custom formatter.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="formatter">Function used to format each source element into a string.</param>
            <returns>
                Return the source sequence unmodified.
            </returns>
            <remarks>
                This a pass-through operator that uses deferred execution and
                streams the results.
            </remarks>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
                Returns a projection of tuples, where each tuple contains the N-th element
                from each of the argument sequences.
            </summary>
            <remarks>
                If the two input sequences are of different lengths, the result sequence
                is terminated as soon as the shortest input sequence is exhausted.
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 1, 2, 3 };
            string[] letters = { "A", "B", "C", "D" };
            var zipped = numbers.Zip(letters, (n, l) => n + l);
            </code>
                The <c>zipped</c> variable, when iterated over, will yield "1A", "2B", "3C", in turn.
            </example>
            <typeparam name="TFirst">Type of elements in first sequence</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="resultSelector">Function to apply to each pair of elements</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.MoreEnumerable.ZipLongest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
                Returns a projection of tuples, where each tuple contains the N-th element
                from each of the argument sequences.
            </summary>
            <remarks>
                If the two input sequences are of different lengths then the result
                sequence will always be as long as the longer of the two input sequences.
                The default value of the shorter sequence element type is used for padding.
                This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code>
            int[] numbers = { 1, 2, 3 };
            string[] letters = { "A", "B", "C", "D" };
            var zipped = numbers.EquiZip(letters, (n, l) => n + l);
            </code>
                The <c>zipped</c> variable, when iterated over, will yield "1A", "2B", "3C", "0D" in turn.
            </example>
            <typeparam name="TFirst">Type of elements in first sequence</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="resultSelector">Function to apply to each pair of elements</param>
        </member>
        <member name="T:LeagueSharp.SDK.MoreLinq.SequenceException">
            <summary>
                The exception that is thrown for a sequence that fails a condition.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.SequenceException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.MoreLinq.SequenceException" /> class.
            </summary>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.SequenceException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.MoreLinq.SequenceException" /> class
                with a given error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.SequenceException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.MoreLinq.SequenceException" /> class
                with a given error message and a reference to the inner exception
                that is the cause of the exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:LeagueSharp.SDK.MoreLinq.SequenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:LeagueSharp.SDK.MoreLinq.SequenceException" /> class
                with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             internal class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            internal class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            internal class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            internal class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:NLog.Common.AsyncContinuation">
            <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
            <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
        </member>
        <member name="T:NLog.Common.AsyncHelpers">
            <summary>
            Helpers for asynchronous operations.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="items">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
            <param name="repeatCount">The repeat count.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
            <param name="asyncContinuation">The async continuation.</param>
            <param name="action">The action to pre-pend.</param>
            <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
            <returns>Wrapped continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="values">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
            <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PreventMultipleCalls(NLog.Common.AsyncContinuation)">
            <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Wrapped asynchronous continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.GetCombinedException(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Gets the combined exception from all exceptions in the list.
            </summary>
            <param name="exceptions">The exceptions.</param>
            <returns>Combined exception or null if no exception was thrown.</returns>
        </member>
        <member name="T:NLog.Common.AsynchronousAction">
            <summary>
            Asynchronous action.
            </summary>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsynchronousAction`1">
            <summary>
            Asynchronous action with one argument.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="argument">Argument to the action.</param>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsyncLogEventInfo">
            <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo"/> struct.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
            <summary>
            Gets the log event.
            </summary>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
            <summary>
            Gets the continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Equality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Inequality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:NLog.Common.InternalLogger">
            <summary>
            NLog internal logger.
            
            Writes to file, console or custom textwriter (see <see cref="P:NLog.Common.InternalLogger.LogWriter"/>)
            </summary>
            <remarks>
            Don't use <see cref="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)"/> as that can lead to recursive calls - stackoverflows
            </remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Trace level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Debug level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Info level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Warn level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Error level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.Exception,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the Fatal level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.#cctor">
            <summary>
            Initializes static members of the InternalLogger class.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Reset">
            <summary>
            Set the config of the InternalLogger with defaults and config.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogLevel">
            <summary>
            Gets or sets the minimal internal log level. 
            </summary>
            <example>If set to <see cref="F:NLog.LogLevel.Info"/>, then messages of the levels <see cref="F:NLog.LogLevel.Info"/>, <see cref="F:NLog.LogLevel.Error"/> and <see cref="F:NLog.LogLevel.Fatal"/> will be written.</example>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
            <remarks>Your application must be a console application.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
            <remarks>Your application must be a console application.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToTrace">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogFile">
            <summary>
            Gets or sets the file path of the internal log file.
            </summary>
            <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogWriter">
            <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
            <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message without an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(System.Exception,NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(System.Exception,NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message with an <see cref="T:System.Exception"/> at the specified level.
            </summary>
            <param name="ex">Exception to be logged.</param>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Write(System.Exception,NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Write to internallogger.
            </summary>
            <param name="ex">optional exception to be logged.</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="args">optional args for <paramref name="message"/></param>
        </member>
        <member name="M:NLog.Common.InternalLogger.IsSeriousException(System.Exception)">
            <summary>
            Determine if logging should be avoided because of exception type. 
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c> if logging should be avoided; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.Common.InternalLogger.LoggingEnabled(NLog.LogLevel)">
            <summary>
            Determine if logging is enabled.
            </summary>
            <param name="logLevel">The <see cref="P:NLog.Common.InternalLogger.LogLevel"/> for the log event.</param>
            <returns><c>true</c> if logging is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.Common.InternalLogger.WriteToTrace(System.String)">
            <summary>
            Write internal messages to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <param name="message">A message to write.</param>
            <remarks>
            Works when property <see cref="P:NLog.Common.InternalLogger.LogToTrace"/> set to true.
            The <see cref="T:System.Diagnostics.Trace"/> is used in Debug and Relese configuration. 
            The <see cref="T:System.Diagnostics.Debug"/> works only in Debug configuration and this is reason why is replaced by <see cref="T:System.Diagnostics.Trace"/>.
            in DEBUG 
            </remarks>
        </member>
        <member name="M:NLog.Common.InternalLogger.LogAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Logs the assembly version and file version of the given Assembly.
            </summary>
            <param name="assembly">The assembly to log.</param>
        </member>
        <member name="T:NLog.Common.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo"/> object.
            </summary>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.LogEventInfoBuffer" /> class.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="P:NLog.Common.LogEventInfoBuffer.Size">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="eventInfo">Log event.</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.GetEventsAndClear">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <returns>Events in the buffer.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionAndExpression">
            <summary>
            Condition <b>and</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression" /> class.
            </summary>
            <param name="left">Left hand side of the AND expression.</param>
            <param name="right">Right hand side of the AND expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Left">
            <summary>
            Gets the left hand side of the AND expression.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Right">
            <summary>
            Gets the right hand side of the AND expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A concatenated '(Left) and (Right)' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left"/> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the conjunction operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionEvaluationException">
            <summary>
            Exception during evaluation of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionExpression">
            <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
            <summary>
            Converts condition text to a condition expression tree.
            </summary>
            <param name="conditionExpressionText">Condition text to be converted.</param>
            <returns>Condition expression tree.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLayoutExpression">
            <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression" /> class.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
            <summary>
            Gets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>String literal in single quotes.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the layout.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLevelExpression">
            <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The '<b>level</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the current log level.
            </summary>
            <param name="context">Evaluation context. Ignored.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> object representing current log level.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLiteralExpression">
            <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression" /> class.
            </summary>
            <param name="literalValue">Literal value.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
            <summary>
            Gets the literal value.
            </summary>
            <value>The literal value.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The literal value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The literal value as passed in the constructor.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
            <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A <b>logger</b> string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger name.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger name.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMessageExpression">
            <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>The '<b>message</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger message.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger message.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodAttribute">
            <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute" /> class.
            </summary>
            <param name="name">Condition method name.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodExpression">
            <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression" /> class.
            </summary>
            <param name="conditionMethodName">Name of the condition method.</param>
            <param name="methodInfo"><see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo"/> of the condition method.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>The method parameters.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethods">
            <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Partially inspired by XPath 1.0.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
            <summary>
            Compares two values for equality.
            </summary>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns><b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality.
            </summary>
            <param name="firstValue">The first string.</param>
            <param name="secondValue">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c>, case is ignored; if <c>false</c> (default), case is significant.</param>
            <returns><b>true</b> when two strings are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="text">A string whose lengths is to be evaluated.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodsAttribute">
            <summary>
            Marks the class as containing condition methods.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionNotExpression">
            <summary>
            Condition <b>not</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
            <summary>
            Gets the expression to be negated.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionOrExpression">
            <summary>
            Condition <b>or</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression" /> class.
            </summary>
            <param name="left">Left hand side of the OR expression.</param>
            <param name="right">Right hand side of the OR expression.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression"/> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the alternative operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionParseException">
            <summary>
            Exception during parsing of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionParser">
            <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.#ctor(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactory">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>
            The root of the expression syntax tree which can be used to get the value of the condition in a specified context.
            </returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalExpression">
            <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression" /> class.
            </summary>
            <param name="leftExpression">The left expression.</param>
            <param name="rightExpression">The right expression.</param>
            <param name="relationalOperator">The relational operator.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
            <summary>
            Gets the relational operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Compares the specified values using specified relational operator.
            </summary>
            <param name="leftValue">The first value.</param>
            <param name="rightValue">The second value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <returns>Result of the given relational operator.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalOperator">
            <summary>
            Relational operators used in conditions.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
            <summary>
            Equality (==).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
            <summary>
            Inequality (!=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
            <summary>
            Less than (&lt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
            <summary>
            Greater than (&gt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
            <summary>
            Less than or equal (&lt;=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
            <summary>
            Greater than or equal (&gt;=).
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer">
            <summary>
            Hand-written tokenizer for conditions.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.#ctor(NLog.Internal.SimpleStringReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
            <summary>
            Gets the token position.
            </summary>
            <value>The token position.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
            <summary>
            Gets the value of a string token.
            </summary>
            <value>The string token value.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
            <summary>
            Asserts current token type and advances to the next token.
            </summary>
            <param name="tokenType">Expected token type.</param>
            <remarks>If token type doesn't match, an exception is thrown.</remarks>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
            <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
            <returns>Keyword value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
            <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
            <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
            <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
            <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
            <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
            <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
            <param name="tokenType">The token type.</param>
            <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
            <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType"/> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue"/> properties.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.TryGetComparisonToken(System.Char)">
            <summary>
            Try the comparison tokens (greater, smaller, greater-equals, smaller-equals)
            </summary>
            <param name="ch">current char</param>
            <returns>is match</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.TryGetLogicalToken(System.Char)">
            <summary>
            Try the logical tokens (and, or, not, equals)
            </summary>
            <param name="ch">current char</param>
            <returns>is match</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
            <summary>
            Mapping between characters and token types for punctuations.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
            <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
            <param name="character">The character.</param>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenType">
            <summary>
            Token types for condition expressions.
            </summary>
        </member>
        <member name="T:NLog.Config.AdvancedAttribute">
            <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
        </member>
        <member name="M:NLog.Config.AdvancedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
            <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute" /> class.
            </summary>
            <param name="itemType">The type of the array item.</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            Gets the .NET type of the array item.
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            Gets the XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:NLog.Config.ConfigurationItemCreator">
            <summary>
            Constructs a new instance the configuration item (target, layout, layout renderer, etc.) given its type.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns>Created object of the specified type.</returns>
        </member>
        <member name="T:NLog.Config.ConfigurationItemFactory">
            <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ConfigurationItemFactory"/> class.
            </summary>
            <param name="assemblies">The assemblies to scan for named items.</param>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Default">
            <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/>.
            </summary>
            <remarks>
            This property implements lazy instantiation so that the <see cref="T:NLog.Config.ConfigurationItemFactory"/> is not built before 
            the internal logger is configured.
            </remarks>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.CreateInstance">
            <summary>
            Gets or sets the creator delegate used to instantiate configuration objects.
            </summary>
            <remarks>
            By overriding this property, one can enable dependency injection or interception for created objects.
            </remarks>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Targets">
            <summary>
            Gets the <see cref="T:NLog.Targets.Target"/> factory.
            </summary>
            <value>The target factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Filters">
            <summary>
            Gets the <see cref="T:NLog.Filters.Filter"/> factory.
            </summary>
            <value>The filter factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.LayoutRenderers">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout renderer factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Layouts">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.AmbientProperties">
            <summary>
            Gets the ambient property factory.
            </summary>
            <value>The ambient property factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.TimeSources">
            <summary>
            Gets the time source factory.
            </summary>
            <value>The time source factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.ConditionMethods">
            <summary>
            Gets the condition method factory.
            </summary>
            <value>The condition method factory.</value>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="itemNamePrefix">Item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.Clear">
            <summary>
            Clears the contents of all factories.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.BuildDefaultFactory">
            <summary>
            Builds the default configuration item factory.
            </summary>
            <returns>Default factory.</returns>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterExtendedItems">
            <summary>
            Registers items in NLog.Extended.dll using late-bound types, so that we don't need a reference to NLog.Extended.dll.
            </summary>
        </member>
        <member name="T:NLog.Config.DefaultParameterAttribute">
            <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.ExceptionRenderingFormat">
            <summary>
            Format of the excpetion output to the specific target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Message">
            <summary>
            Appends the Message of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Type">
            <summary>
            Appends the type of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.ShortType">
            <summary>
            Appends the short type of an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.ToString">
            <summary>
            Appends the result of calling ToString() on an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Method">
            <summary>
            Appends the method name from Exception's stack trace to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.StackTrace">
            <summary>
            Appends the stack trace from an Exception to the specified target.
            </summary>
        </member>
        <member name="F:NLog.Config.ExceptionRenderingFormat.Data">
            <summary>
            Appends the contents of an Exception's Data property to the specified target.
            </summary>
        </member>
        <member name="T:NLog.Config.Factory`2">
            <summary>
            Factory for class-based items.
            </summary>
            <typeparam name="TBaseType">The base type of each item.</typeparam>
            <typeparam name="TAttributeType">The type of the attribute used to annotate items.</typeparam>
        </member>
        <member name="M:NLog.Config.Factory`2.ScanTypes(System.Type[],System.String)">
            <summary>
            Scans the assembly.
            </summary>
            <param name="types">The types to scan.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterNamedType(System.String,System.String)">
            <summary>
            Registers the item based on a type name.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.Clear">
            <summary>
            Clears the contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
            <summary>
            Registers a single type definition.
            </summary>
            <param name="name">The item name.</param>
            <param name="type">The type of the item.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
            <summary>
            Tries to get registered item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
            <summary>
            Creates an item instance.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>Created item.</returns>
        </member>
        <member name="T:NLog.Config.IFactory">
            <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
        </member>
        <member name="T:NLog.Config.IInstallable">
            <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
        </member>
        <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="T:NLog.Config.INamedItemFactory`2">
            <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
            <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
            <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type"/> or <see cref="T:System.Reflection.MethodInfo"/>).</typeparam>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
            <summary>
            Registers new item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="itemDefinition">Item definition.</param>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
            <summary>
            Tries to get registered item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
            <summary>
            Creates item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns>Newly created item instance.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="T:NLog.Config.InstallationContext">
            <summary>
            Provides context for install/uninstall operations.
            </summary>
        </member>
        <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
            <summary>
            Mapping between log levels and console output colors.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
            <param name="logOutput">The log output.</param>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogLevel">
            <summary>
            Gets or sets the installation log level.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.Parameters">
            <summary>
            Gets the installation parameters.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogOutput">
            <summary>
            Gets or sets the log output.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified trace message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
            <summary>
            Logs the specified informational message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
            <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
            <returns>Log event info object.</returns>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
             <summary>
             Keeps logging configuration and provides simple API
             to modify it.
             </summary>
            <remarks>This class is thread-safe.<c>.ToList()</c> is used for that purpose.</remarks>
        </member>
        <member name="F:NLog.Config.LoggingConfiguration.variables">
            <summary>
            Variables defined in xml or in API. name is case case insensitive. 
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.ExceptionLoggingOldStyle">
            <summary>
            Use the old exception log handling of NLog 3.0? 
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.Variables">
            <summary>
            Gets the variables defined in the configuration.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
            <returns>
            A list of named targets.
            </returns>
            <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            Gets the collection of logging rules.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo">
            <summary>
            Gets or sets the default culture info to use as <see cref="P:NLog.LogEventInfo.FormatProvider"/>.
            </summary>
            <value>
            Specific culture info or null to use <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </value>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
            <summary>
            Gets all targets.
            </summary>
        </member>
        <member name="F:NLog.Config.LoggingConfiguration.TargetNameComparer">
            <summary>
            Compare on name
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration.TargetNameEq">
            <summary>
            Compare on name
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(NLog.Targets.Target)">
            <summary>
            Registers the specified target object. The name of the target is read from <see cref="P:NLog.Targets.Target.Name"/>.
            </summary>
            <param name="target">
            The target object with a non <see langword="null"/> <see cref="P:NLog.Targets.Target.Name"/>
            </param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/></exception>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">
            Name of the target.
            </param>
            <param name="target">
            The target object.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <returns>
            Found target or <see langword="null"/> when the target is not found.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName``1(System.String)">
            <summary>
            Finds the target with the specified name and specified type.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <returns>
            Found target or <see langword="null"/> when the target is not found of not of type <typeparamref name="TTarget"/>
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRule(NLog.LogLevel,NLog.LogLevel,System.String,System.String)">
            <summary>
            Add a rule with min- and maxLevel.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRule(NLog.LogLevel,NLog.LogLevel,NLog.Targets.Target,System.String)">
            <summary>
            Add a rule with min- and maxLevel.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForOneLevel(NLog.LogLevel,System.String,System.String)">
            <summary>
            Add a rule for one loglevel.
            </summary>
            <param name="level">log level needed to trigger this rule. </param>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForOneLevel(NLog.LogLevel,NLog.Targets.Target,System.String)">
            <summary>
            Add a rule for one loglevel.
            </summary>
            <param name="level">log level needed to trigger this rule. </param>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForAllLevels(System.String,System.String)">
            <summary>
            Add a rule for alle loglevels.
            </summary>
            <param name="targetName">Name of the target to be written when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddRuleForAllLevels(NLog.Targets.Target,System.String)">
            <summary>
            Add a rule for alle loglevels.
            </summary>
            <param name="target">Target to be written to when the rule matches.</param>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration"/> that represents the updated configuration.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
            <summary>
            Removes the specified named target.
            </summary>
            <param name="name">
            Name of the target.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
            <summary>
            Installs target-specific objects on current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Uninstalls target-specific objects from current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Close">
            <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Dump">
            <summary>
            Log to the internal (NLog) logger the information about the <see cref="T:NLog.Targets.Target"/> and <see
            cref="T:NLog.Config.LoggingRule"/> associated with this <see cref="T:NLog.Config.LoggingConfiguration"/> instance.
            </summary>
            <remarks>
            The information are only recorded in the internal logger if Debug level is enabled, otherwise nothing is 
            recorded.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending log messages on all appenders.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged"/> events.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs" /> class.
            </summary>
            <param name="oldConfiguration">The old configuration.</param>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
            <summary>
            Gets the old configuration.
            </summary>
            <value>The old configuration.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
            <summary>
            Gets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs" /> class.
            </summary>
            <param name="succeeded">Whether configuration reload has succeeded.</param>
            <param name="exception">The exception during configuration reload.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
            <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
            <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
            <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Create an empty <see cref="T:NLog.Config.LoggingRule" />.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Create a new <see cref="T:NLog.Config.LoggingRule" /> with a <paramref name="minLevel"/> and  <paramref name="maxLevel"/> which writes to <paramref name="target"/>.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Create a new <see cref="T:NLog.Config.LoggingRule" /> with a <paramref name="minLevel"/> which writes to <paramref name="target"/>.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Create a (disabled) <see cref="T:NLog.Config.LoggingRule" />. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)"/> or see cref="EnableLoggingForLevels"/> to enable logging.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Gets or sets logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingRule.Levels">
            <summary>
            Gets the collection of log levels enabled by this rule.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevels(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Enables logging for a particular levels between (included) <paramref name="minLevel"/> and <paramref name="maxLevel"/>.
            </summary>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="maxLevel">Maximum log level needed to trigger this rule.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule"/>. Used for debugging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked.</param>
            <returns>A value of <see langword="true"/> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched.</param>
            <returns>A value of <see langword="true"/> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:NLog.Config.MethodFactory`2">
            <summary>
            Factory for locating methods.
            </summary>
            <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
            <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
        </member>
        <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo"/> of
            the item.
            </returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.ScanTypes(System.Type[],System.String)">
            <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType"/>
            and methods marked with <typeparamref name="TMethodAttributeType"/> and adds them 
            to the factory.
            </summary>
            <param name="types">The types to scan.</param>
            <param name="prefix">The prefix to use for names.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.Clear">
            <summary>
            Clears contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
            <summary>
            Registers the definition of a single method.
            </summary>
            <param name="name">The method name.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to retrieve method by name.
            </summary>
            <param name="name">The method name.</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
            <summary>
            Retrieves method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>MethodInfo object.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get method definition.
            </summary>
            <param name="name">The method .</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Config.NameBaseAttribute">
            <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target"/>, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>, <see cref="T:NLog.Layouts.Layout"/>, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute" /> class.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:NLog.Config.NameBaseAttribute.Name">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute">
            <summary>
            Indicates NLog should not scan this property during configuration.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationIgnorePropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogConfigurationItemAttribute">
            <summary>
            Marks the object as configuration item for NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationItemAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogXmlElement">
            <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="inputUri">The input URI.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="reader">The reader to initialize element from.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class from being created.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.LocalName">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
            <summary>
            Gets the dictionary of attribute values.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Children">
            <summary>
            Gets the collection of child elements.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
            <summary>
            Returns children elements with the specified element name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>Children elements with the specified element name.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
            <summary>
            Gets the required attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>Attribute value.</returns>
            <remarks>Throws if the attribute is not specified.</remarks>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
            <summary>
            Gets the optional boolean attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the optional boolean attribute value. If whitespace, then returning <c>null</c>.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
            <summary>
            Gets the optional attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the attribute or default value.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
            <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
            <param name="allowedNames">The allowed names.</param>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            
            Warning, these methods will overwrite the current config.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info"/> level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.StackTraceUsage">
            <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.None">
            <summary>
            Stack trace should not be captured.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
            <summary>
            Stack trace should be captured without source-level information.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithSource">
            <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.Max">
            <summary>
            Capture maximum amount of the stack trace information supported on the platform.
            </summary>
        </member>
        <member name="T:NLog.Config.ThreadAgnosticAttribute">
            <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
            <remarks>
            This is important because some layout renders should use the main thread. E.g. for using <c>HttpContext.Current</c> etc.
            
            If set to <c>true</c> then a layout will be render in the main thread, so for example in the AsyncTargetWrapper and BufferTargetWrapper with the <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> , using <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)"/>
            
            Apply this attribute when:
            - The result can we rendered in another thread. Delaying this could be more efficient. And/Or,
            - The result should not be precalculated, for example the target sends some extra context information. 
            </remarks>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
             <summary>
             A class for configuring NLog through an XML configuration file 
             (App.config style or App.nlog style).
             </summary>
            <remarks>This class is thread-safe.<c>.ToList()</c> is used for that purpose.</remarks>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CreateFileReader(System.String)">
            <summary>
            Create XML reader for (xml config) file.
            </summary>
            <param name="fileName">filepath</param>
            <returns>reader or <c>null</c> if filename is empty.</returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean,NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
            <param name="logFactory">The <see cref="T:NLog.LogFactory" /> to which to apply any applicable configuration values.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
            <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration" /> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.InitializeSucceeded">
            <summary>
            Did the <see cref="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)"/> Succeeded? <c>true</c>= success, <c>false</c>= error, <c>null</c> = initialize not started yet.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets a value indicating whether all of the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration" /> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration" /> object.</returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CleanSpaces(System.String)">
            <summary>
            Remove all spaces, also in between text. 
            </summary>
            <param name="s">text</param>
            <returns>text without spaces</returns>
            <remarks>Tabs and other whitespace is not removed!</remarks>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.StripOptionalNamespacePrefix(System.String)">
            <summary>
            Remove the namespace (before :)
            </summary>
            <example>
            x:a, will be a
            </example>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes the configuration.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.CheckUnusedTargets">
            <summary>
            Checks whether unused targets exist. If found any, just write an internal log at Warn level.
            <remarks>If initializing not started or failed, then checking process will be canceled</remarks>
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseTopLevel(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse the root
            </summary>
            <param name="content"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseConfigurationElement(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse {configuration} xml element.
            </summary>
            <param name="configurationElement"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseNLogElement(NLog.Config.NLogXmlElement,System.String,System.Boolean)">
            <summary>
            Parse {NLog} xml element.
            </summary>
            <param name="nlogElement"></param>
            <param name="filePath">path to config file.</param>
            <param name="autoReloadDefault">The default value for the autoReload option.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseRulesElement(NLog.Config.NLogXmlElement,System.Collections.Generic.IList{NLog.Config.LoggingRule})">
            <summary>
            Parse {Rules} xml element
            </summary>
            <param name="rulesElement"></param>
            <param name="rulesCollection">Rules are added to this parameter.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ParseLoggerElement(NLog.Config.NLogXmlElement,System.Collections.Generic.IList{NLog.Config.LoggingRule})">
            <summary>
            Parse {Logger} xml element
            </summary>
            <param name="loggerElement"></param>
            <param name="rulesCollection">Rules are added to this parameter.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.ExpandSimpleVariables(System.String)">
            <summary>
            Replace a simple variable with a value. The orginal value is removed and thus we cannot redo this in a later stage.
            
            Use for that: <see cref="T:NLog.LayoutRenderers.VariableLayoutRenderer"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Filters.ConditionBasedFilter">
            <summary>
            Matches when the specified condition is met.
            </summary>
            <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
        </member>
        <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
            <summary>
            Gets or sets the condition expression.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.Filter.Action">
            <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
            <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute" /> class.
            </summary>
            <param name="name">Name of the filter.</param>
        </member>
        <member name="T:NLog.Filters.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.LogFinal">
            <summary>
            The message should be logged and processing should be finished.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
            <summary>
            The message should not be logged and processing should be finished.
            </summary>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
            <value>The layout.</value>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenEqualFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favor of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">conditions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="T:NLog.Fluent.LogBuilder">
            <summary>
            A fluent class to build log events for NLog.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.ILogger,NLog.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder"/> class.
            </summary>
            <param name="logger">The <see cref="T:NLog.Logger"/> to send the log event.</param>
            <param name="logLevel">The <see cref="T:NLog.LogLevel"/> for the log event.</param>
        </member>
        <member name="P:NLog.Fluent.LogBuilder.LogEventInfo">
            <summary>
            Gets the <see cref="P:NLog.Fluent.LogBuilder.LogEventInfo"/> created by the builder.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Exception(System.Exception)">
            <summary>
            Sets the <paramref name="exception"/> information of the logging event.
            </summary>
            <param name="exception">The exception information of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Level(NLog.LogLevel)">
            <summary>
            Sets the level of the logging event.
            </summary>
            <param name="logLevel">The level of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.LoggerName(System.String)">
            <summary>
            Sets the logger name of the logging event.
            </summary>
            <param name="loggerName">The logger name of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String)">
            <summary>
            Sets the log message on the logging event.
            </summary>
            <param name="message">The log message for the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <param name="arg3">The fourth object to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Message(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Sets the log message and parameters for formatting on the logging event.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Property(System.Object,System.Object)">
            <summary>
            Sets a per-event context property on the logging event.
            </summary>
            <param name="name">The name of the context property.</param>
            <param name="value">The value of the context property.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Properties(System.Collections.IDictionary)">
            <summary>
            Sets multiple per-event context properties on the logging event.
            </summary>
            <param name="properties">The properties to set.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.TimeStamp(System.DateTime)">
            <summary>
            Sets the timestamp of the logging event.
            </summary>
            <param name="timeStamp">The timestamp of the logging event.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.StackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.Write">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Func{System.Boolean})">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
        </member>
        <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Boolean)">
            <summary>
            Writes the log event to the underlying logger.
            </summary>
            <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
        </member>
        <member name="T:NLog.Fluent.LoggerExtensions">
            <summary>
            Extension methods for NLog <see cref="T:NLog.Logger"/>.
            </summary>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Log(NLog.ILogger,NLog.LogLevel)">
            <summary>
            Starts building a log event with the specified <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <param name="logLevel">The log level.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Trace(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Trace</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Debug(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Debug</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Info(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Info</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Warn(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Warn</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Error(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Error</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="M:NLog.Fluent.LoggerExtensions.Fatal(NLog.ILogger)">
            <summary>
            Starts building a log event at the <c>Fatal</c> level.
            </summary>
            <param name="logger">The logger to write the log event to.</param>
            <returns>current <see cref="T:NLog.Fluent.LogBuilder"/> for chaining calls.</returns>
        </member>
        <member name="T:NLog.GDC">
            <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.GDC.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GDC.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GDC.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the Global Diagnostics Context item.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use when converting the item's value to a string.</param>
            <returns>The value of <paramref name="item"/> as a string, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GDC.GetObject(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.GDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GDC.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GDC.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.GlobalDiagnosticsContext">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.Object)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the Global Diagnostics Context item.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use when converting the item's value to a string.</param>
            <returns>The value of <paramref name="item"/> as a string, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.GetObject(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.ILogger">
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>s
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="P:NLog.ILogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.ILogger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILogger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="T:NLog.ILoggerBase">
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Logger with only generic methods (passing 'LogLevel' to methods) and core properties.
            </summary>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>    
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>        
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="E:NLog.ILoggerBase.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.ILoggerBase.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.ILoggerBase.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="M:NLog.ILoggerBase.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.ILoggerBase.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.ILoggerBase.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="T:NLog.Internal.AspHelper">
            <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
        </member>
        <member name="T:NLog.Internal.ConfigurationManager">
            <summary>
            Internal configuration manager used to read .NET configuration files.
            Just a wrapper around the BCL ConfigurationManager, but used to enable
            unit testing.
            </summary>
        </member>
        <member name="P:NLog.Internal.ConfigurationManager.AppSettings">
            <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2">
            <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <param name="key">Dictionary key.</param>
            <returns>Value corresponding to key or null if not found</returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            True if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
            <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator" /> class.
            </summary>
            <param name="wrapped">The wrapped.</param>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The key of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The value of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="F:NLog.Internal.EncodingHelpers.Utf8BOM">
            <summary>
            UTF-8 BOM 239, 187, 191
            </summary>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum. Note that this value need not be a member of the TEnum enumeration. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Wrapper because Enum.TryParse is not present in .net 3.5</remarks>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to consider case.</param>
            <param name="result">When this method returns, result contains an object of type TEnum whose value is represented by value if the parse operation succeeds. If the parse operation fails, result contains the default value of the underlying type of TEnum. Note that this value need not be a member of the TEnum enumeration. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Wrapper because Enum.TryParse is not present in .net 3.5</remarks>
        </member>
        <member name="M:NLog.Internal.EnumHelpers.TryParseEnum_net3``1(System.String,System.Boolean,``0@)">
            <summary>
            Enum.TryParse implementation for .net 3.5 
            
            </summary>
            <returns></returns>
            <remarks>Don't uses reflection</remarks>
        </member>
        <member name="T:NLog.Internal.EnvironmentHelper">
            <summary>
            Safe way to get environment variables.
            </summary>
        </member>
        <member name="T:NLog.Internal.ExceptionHelper">
            <summary>
            Helper class for dealing with exceptions.
            </summary>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MarkAsLoggedToInternalLogger(System.Exception)">
            <summary>
            Mark this exception as logged to the <see cref="T:NLog.Common.InternalLogger"/>.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.IsLoggedToInternalLogger(System.Exception)">
            <summary>
            Is this exception logged to the <see cref="T:NLog.Common.InternalLogger"/>? 
            </summary>
            <param name="exception"></param>
            <returns><c>true</c>if the <paramref name="exception"/> has been logged to the <see cref="T:NLog.Common.InternalLogger"/>.</returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown and logs the error to the <see cref="T:NLog.Common.InternalLogger"/> if <see cref="M:NLog.Internal.ExceptionHelper.IsLoggedToInternalLogger(System.Exception)"/> is <c>false</c>.
            
            Advised to log first the error to the <see cref="T:NLog.Common.InternalLogger"/> before calling this method.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrownImmediately(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown immediately, without logging the error to the <see cref="T:NLog.Common.InternalLogger"/>.
            
            Only used this method in special cases.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Internal.FactoryHelper">
            <summary>
            Object construction helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.AppDomainWrapper">
            <summary>
            Adapter for <see cref="T:System.AppDomain"/> to <see cref="T:NLog.Internal.Fakeables.IAppDomain"/>
            </summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.AppDomainWrapper.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper"/> class.
            </summary>
            <param name="appDomain">The <see cref="T:System.AppDomain"/> to wrap.</param>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.CurrentDomain">
            <summary>
            Gets a the current <see cref="T:System.AppDomain"/> wrappered in a <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper"/>.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.BaseDirectory">
            <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.ConfigurationFile">
            <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.PrivateBinPath">
            <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.FriendlyName">
            <summary>
            Gets or set the friendly name.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.Id">
            <summary>
            Gets an integer that uniquely identifies the application domain within the process. 
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.ProcessExit">
            <summary>
            Process exit event.
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.DomainUnload">
            <summary>
            Domain unloaded event.
            </summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.IAppDomain">
            <summary>
            Interface for fakeable the current <see cref="T:System.AppDomain"/>. Not fully implemented, please methods/properties as necessary.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.BaseDirectory">
            <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.ConfigurationFile">
            <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.PrivateBinPath">
            <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.FriendlyName">
            <summary>
            Gets or set the friendly name.
            </summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.IAppDomain.Id">
            <summary>
            Gets an integer that uniquely identifies the application domain within the process. 
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.IAppDomain.ProcessExit">
            <summary>
            Process exit event.
            </summary>
        </member>
        <member name="E:NLog.Internal.Fakeables.IAppDomain.DomainUnload">
            <summary>
            Domain unloaded event.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
            <summary>
            Base class for optimized file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="createParameters">The create parameters.</param>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
            <summary>
            Gets the path of the file, including file extension.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreationTime">
            <summary>
            Gets the file creation time.
            </summary>
            <value>The file creation time. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
            <summary>
            Gets the open time of the file.
            </summary>
            <value>The open time. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
            <summary>
            Gets the last write time.
            </summary>
            <value>The time the file was last written to. DateTime value must be of UTC kind.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
            <summary>
            Gets the file creation parameters.
            </summary>
            <value>The file creation parameters.</value>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
            <summary>
            Updates the last write time of the file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
            <summary>
            Updates the last write time of the file to the specified date.
            </summary>
            <param name="dateTime">Date and time when the last write occurred in UTC.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
            <summary>
            Creates the file stream.
            </summary>
            <param name="allowFileSharedWriting">If set to <c>true</c> sets the file stream to allow shared writing.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object which can be used to write to the file.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
            <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which caches 
            file information.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
            <summary>
            Closes this instance of the appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
            <summary>
            Flushes this current appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes to a file.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
            <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.FileAppenderCache">
            <summary>
            Maintains a collection of file appenders usually associated with file targets.
            </summary>
        </member>
        <member name="F:NLog.Internal.FileAppenders.FileAppenderCache.Empty">
            <summary>
            An "empty" instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class with zero size and empty list of appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.#ctor">
            <summary>
            Initializes a new "empty" instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class with zero size and empty
            list of appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.#ctor(System.Int32,NLog.Internal.FileAppenders.IFileAppenderFactory,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> class.
            </summary>
            <remarks>
            The size of the list should be positive. No validations are performed during initialisation as it is an
            intenal class.
            </remarks>
            <param name="size">Total number of appenders allowed in list.</param>
            <param name="appenderFactory">Factory used to create each appender.</param>
            <param name="createFileParams">Parameters used for creating a file.</param>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.ArchiveFilePatternToWatch">
            <summary>
            The archive file path pattern that is used to detect when archiving occurs.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.InvalidateAppendersForInvalidFiles">
            <summary>
            Invalidates appenders for all files that were archived.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.CreateFileParameters">
            <summary>
            Gets the parameters which will be used for creating a file.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.Factory">
            <summary>
            Gets the file appender factory used by all the appenders in this list.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.FileAppenderCache.Size">
            <summary>
            Gets the number of appenders which the list can hold.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.AllocateAppender(System.String)">
            <summary>
            It allocates the first slot in the list when the file name does not already in the list and clean up any
            unused slots.
            </summary>
            <param name="fileName">File name associated with a single appender.</param>
            <returns>The allocated appender.</returns>
            <exception cref="T:System.NullReferenceException">
            Thrown when <see cref="M:AllocateAppender"/> is called on an <c>Empty</c><see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/> instance.
            </exception>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.GetFullPathForPattern(System.String)">
            <summary>
            Get fullpath for a relative file pattern,  e.g *.log 
            <see cref="M:System.IO.Path.GetFullPath(System.String)"/> crashes on patterns: ArgumentException: Illegal characters in path.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.CloseAppenders">
            <summary>
            Close all the allocated appenders. 
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.CloseAppenders(System.DateTime)">
            <summary>
            Close the allocated appenders initialised before the supplied time.
            </summary>
            <param name="expireTime">The time which prior the appenders considered expired</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.FlushAppenders">
            <summary>
            Fluch all the allocated appenders. 
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.GetFileCharacteristics(System.String)">
            <summary>
            Gets the file info for a particular appender.
            </summary>
            <param name="fileName">The file name associated with a particular appender.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.FileAppenderCache.InvalidateAppender(System.String)">
            <summary>
            Closes the specified appender and removes it from the list. 
            </summary>
            <param name="fileName">File name of the appender to be closed.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
            <summary>
            Interface that provides parameters for create file function.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they do not exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.ForceManaged">
            <summary>
            Gets or set a value indicating whether a managed file stream is forced, instead of used the native implementation.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileAppenders.ICreateFileParameters.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
            <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
            <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
            <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileCharacteristics">
            <summary>
            Gets the file info.
            </summary>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileCharacteristics">
            <summary>
            An immutable object that stores basic file info.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristics.#ctor(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Constructs a FileCharacteristics object.
            </summary>
            <param name="creationTimeUtc">The time the file was created in UTC.</param>
            <param name="lastWriteTimeUtc">The time the file was last written to in UTC.</param>
            <param name="fileLength">The size of the file in bytes.</param>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.CreationTimeUtc">
            <summary>
            The time the file was created in UTC.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.LastWriteTimeUtc">
            <summary>
            The time the file was last written to in UTC.
            </summary>
        </member>
        <member name="P:NLog.Internal.FileCharacteristics.FileLength">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileCharacteristicsHelper">
            <summary>
            Optimized routines to get the basic file characteristics of the specified file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristicsHelper.#cctor">
            <summary>
            Initializes static members of the FileCharacteristicsHelper class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Internal.FormatHelper.ToStringWithOptionalFormat(System.Object,System.String,System.IFormatProvider)">
            <summary>
            toString(format) if the object is a <see cref="T:System.IFormattable"/>
            </summary>
            <param name="value">value to be converted</param>
            <param name="format">format value</param>
            <param name="formatProvider">provider, for example culture</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.FormatHelper.ConvertToString(System.Object,System.IFormatProvider)">
            <summary>
            Convert object to string
            </summary>
            <param name="o">value</param>
            <param name="formatProvider">format for conversion.</param>
            <returns></returns>
            <remarks>
            If <paramref name="formatProvider"/> is <c>null</c> and <paramref name="o"/> isn't a <see cref="T:System.String"/> already, then the <see cref="T:NLog.LogFactory"/> will get a locked by <see cref="P:NLog.LogManager.Configuration"/>
            </remarks>
        </member>
        <member name="T:NLog.Internal.IConfigurationManager">
            <summary>
            Interface for the wrapper around System.Configuration.ConfigurationManager.
            </summary>
        </member>
        <member name="P:NLog.Internal.IConfigurationManager.AppSettings">
            <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
        </member>
        <member name="T:NLog.Internal.IRenderable">
            <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout.</returns>
        </member>
        <member name="T:NLog.Internal.ISmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.DeliveryMethod">
            <summary>
            Specifies how outgoing email messages will be handled.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Host">
            <summary>
            Gets or sets the name or IP address of the host used for SMTP transactions.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Port">
            <summary>
            Gets or sets the port used for SMTP transactions.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Timeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous <see cref="M:NLog.Internal.ISmtpClient.Send(System.Net.Mail.MailMessage)">Send</see> call times out.
            </summary>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.Credentials">
            <summary>
            Gets or sets the credentials used to authenticate the sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISmtpClient.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends an e-mail message to an SMTP server for delivery. These methods block while the message is being transmitted.
            </summary>
            <param name="msg">
              <typeparam>System.Net.Mail.MailMessage
                <name>MailMessage</name>
            </typeparam> A <see cref="T:System.Net.Mail.MailMessage">MailMessage</see> that contains the message to send.</param>
        </member>
        <member name="P:NLog.Internal.ISmtpClient.PickupDirectoryLocation">
            <summary>
            Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.
            </summary>
        </member>
        <member name="T:NLog.Internal.ISupportsInitialize">
            <summary>
            Supports object initialization and termination.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:NLog.Internal.IUsesStackTrace">
            <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo"/>.
            </summary>
        </member>
        <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerConfiguration">
            <summary>
            Logger configuration.
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration" /> class.
            </summary>
            <param name="targetsByLevel">The targets by level.</param>
            <param name="exceptionLoggingOldStyle">  Use the old exception log handling of NLog 3.0? 
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerConfiguration.ExceptionLoggingOldStyle">
            <summary>
            Use the old exception log handling of NLog 3.0? 
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
            <summary>
            Gets targets for the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>Chain of targets with attached filters.</returns>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines whether the specified level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NLog.Internal.MultiFileWatcher">
            <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
        </member>
        <member name="P:NLog.Internal.MultiFileWatcher.NotifyFilters">
            <summary>
            The types of changes to watch for.
            </summary>
        </member>
        <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
            <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
            <summary>
            Stops watching all files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching(System.String)">
            <summary>
            Stops watching the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Watches the specified files for changes.
            </summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="T:NLog.Internal.MySmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.HttpNetworkSender">
            <summary>
            Network sender which uses HTTP or HTTPS POST.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.HttpNetworkSender"/> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
            <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> objects for given URLs.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String,System.Int32)">
            <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <param name="maxQueueSize">
            The maximum queue size.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.ISocket">
            <summary>
            Interface for mocking socket calls.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
            <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
            <summary>
            Gets the address of the network endpoint.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
            <summary>
            Gets the last send time.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
            <summary>
            Initializes this network sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Send the given text over the specified protocol.
            </summary>
            <param name="bytes">Bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific close operation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
            <summary>
            Parses the URI into an endpoint address.
            </summary>
            <param name="uri">The URI to parse.</param>
            <param name="addressFamily">The address family.</param>
            <returns>Parsed endpoint.</returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
            <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String,System.Int32)">
            <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <param name="maxQueueSize">
            The maximum queue size.
            </param>
            /// <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
            <summary>
            Socket proxy for mocking Socket code.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy"/> class.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.SocketProxy.UnderlyingSocket">
            <summary>
            Gets underlying socket instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
            <summary>
            Closes the wrapped socket.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with tcp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket with given parameters. 
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> which represents the socket.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
            <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
            <summary>
            Raises the Completed event.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with udp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket"/> to use.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.ObjectGraphScanner">
            <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances have <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> attached and returns 
            all objects implementing a specified interfaces.
            </summary>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(System.Object[])">
            <summary>
            Finds the objects which have attached <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
            <typeparam name="T">Type of the objects to return.</typeparam>
            <param name="rootObjects">The root objects.</param>
            <returns>Ordered list of objects implementing T.</returns>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.ScanProperties``1(System.Collections.Generic.List{``0},System.Object,System.Int32,System.Collections.Generic.HashSet{System.Object})">
            <remarks>ISet is not there in .net35, so using HashSet</remarks>
        </member>
        <member name="T:NLog.Internal.ParameterUtils">
            <summary>
            Parameter validation utilities.
            </summary>
        </member>
        <member name="M:NLog.Internal.ParameterUtils.AssertNotNull(System.Object,System.String)">
            <summary>
            Asserts that the value is not null and throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <param name="value">The value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:NLog.Internal.PlatformDetector">
            <summary>
            Detects the platform the NLog is running on.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.CurrentOS">
            <summary>
            Gets the current runtime OS.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsDesktopWin32">
            <summary>
            Gets a value indicating whether current OS is a desktop version of Windows.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsWin32">
            <summary>
            Gets a value indicating whether current OS is Win32-based (desktop or mobile).
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsUnix">
            <summary>
            Gets a value indicating whether current OS is Unix-based.
            </summary>
        </member>
        <member name="T:NLog.Internal.PortableFileCharacteristicsHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileCharacteristicsHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableFileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.PortableThreadIDHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.GetProcessName">
            <summary>
            Gets the name of the process.
            </summary>
        </member>
        <member name="T:NLog.Internal.PropertyHelper">
            <summary>
            Reflection helpers for accessing properties.
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.SetPropertyFromString(System.Object,System.String,System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Set value parsed from string.
            </summary>
            <param name="obj">object instance to set with property <paramref name="propertyName"/></param>
            <param name="propertyName">name of the property on <paramref name="obj"/></param>
            <param name="value">The value to be parsed.</param>
            <param name="configurationItemFactory"></param>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.IsArrayProperty(System.Type,System.String)">
            <summary>
            Is the property of array-type?
            </summary>
            <param name="t">Type which has the property <paramref name="propertyName"/></param>
            <param name="propertyName">name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.PropertyHelper.TryGetPropertyInfo(System.Object,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Get propertyinfo
            </summary>
            <param name="obj">object which could have property <paramref name="propertyName"/></param>
            <param name="propertyName">propertyname on <paramref name="obj"/></param>
            <param name="result">result when success.</param>
            <returns>success.</returns>
        </member>
        <member name="T:NLog.Internal.ReflectionHelpers">
            <summary>
            Reflection helpers.
            </summary>
        </member>
        <member name="M:NLog.Internal.ReflectionHelpers.SafeGetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all usable exported types from the given assembly.
            </summary>
            <param name="assembly">Assembly to scan.</param>
            <returns>Usable types from the given assembly.</returns>
            <remarks>Types which cannot be loaded are skipped.</remarks>
        </member>
        <member name="M:NLog.Internal.ReflectionHelpers.IsStaticClass(System.Type)">
            <summary>
            Is this a static class?
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>This is a work around, as Type doesn't have this property. 
            From: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="T:NLog.Internal.RuntimeOS">
            <summary>
            Supported operating systems.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector"/>
            </remarks>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Any">
            <summary>
            Any operating system.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unix">
            <summary>
            Unix/Linux operating systems.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsCE">
            <summary>
            Windows CE.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Windows">
            <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsNT">
            <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unknown">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="T:NLog.Internal.SimpleStringReader">
            <summary>
            Simple character tokenizer.
            </summary>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SimpleStringReader" /> class.
            </summary>
            <param name="text">The text to be tokenized.</param>
        </member>
        <member name="P:NLog.Internal.SimpleStringReader.Position">
            <summary>
            Current position in <see cref="P:NLog.Internal.SimpleStringReader.Text"/>
            </summary>
        </member>
        <member name="P:NLog.Internal.SimpleStringReader.Text">
            <summary>
            Full text to be parsed
            </summary>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Peek">
            <summary>
            Check current char while not changing the position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Read">
            <summary>
            Read the current char and change position
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.Substring(System.Int32,System.Int32)">
            <summary>
            Get the substring of the <see cref="P:NLog.Internal.SimpleStringReader.Text"/>
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.SingleCallContinuation">
            <summary>
            Implements a single-call guard around given continuation function.
            </summary>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the single-call guard.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:NLog.Internal.SortHelpers">
            <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
        </member>
        <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
            <summary>
            Key selector delegate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">Value to extract key information from.</param>
            <returns>Key selected from log event.</returns>
        </member>
        <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
            <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="inputs">The inputs.</param>
            <param name="keySelector">The key selector function.</param>
            <returns>
            Dictionary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo"/>.
            </returns>
        </member>
        <member name="T:NLog.Internal.StackTraceUsageUtils">
            <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage"/> values.
            </summary>
        </member>
        <member name="M:NLog.Internal.StackTraceUsageUtils.GetWriteStackTrace(System.Type)">
            <summary>
            Get this stacktrace for inline unit test
            </summary>
            <param name="loggerType"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.StreamHelpers">
            <summary>
            Stream helpers
            </summary>
        </member>
        <member name="M:NLog.Internal.StreamHelpers.CopyWithOffset(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copy stream input to output. Skip the first bytes
            </summary>
            <param name="input">stream to read from</param>
            <param name="output">stream to write to</param>
            <param name="offset">first bytes to skip (optional)</param>
        </member>
        <member name="T:NLog.Internal.StringBuilderExt">
            <summary>
            Helpers for <see cref="T:System.Text.StringBuilder"/>, which is used in e.g. layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.StringBuilderExt.Append(System.Text.StringBuilder,System.Object,NLog.LogEventInfo,NLog.Config.LoggingConfiguration)">
            <summary>
            Append a value and use formatProvider of <paramref name="logEvent"/> or <paramref name="configuration"/> to convert to string.
            </summary>
            <param name="builder"></param>
            <param name="o">value to append.</param>
            <param name="logEvent">current logEvent for FormatProvider.</param>
            <param name="configuration">Configuration for DefaultCultureInfo</param>
        </member>
        <member name="T:NLog.Internal.StringHelpers">
            <summary>
            Helpers for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.StringHelpers.IsNullOrWhiteSpace(System.String)">
            <summary>
            IsNullOrWhiteSpace, including for .NET 3.5
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Internal.TargetWithFilterChain">
            <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
        </member>
        <member name="F:NLog.Internal.TargetWithFilterChain._stackTraceUsage">
            <summary>
            cached result as calculating is expensive.
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain" /> class.
            </summary>
            <param name="target">The target.</param>
            <param name="filterChain">The filter chain.</param>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
            <summary>
            Gets the filter chain.
            </summary>
            <value>The filter chain.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
            <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain"/> item in the chain.
            </summary>
            <value>The next item in the chain.</value>
            <example>This is for example the 'target2' logger in writeTo='target1,target2'  </example>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
            <summary>
            Gets the stack trace usage.
            </summary>
            <returns>A <see cref="T:NLog.Config.StackTraceUsage" /> value that determines stack trace handling.</returns>
        </member>
        <member name="T:NLog.Internal.ThreadIDHelper">
            <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadIDHelper.#cctor">
            <summary>
            Initializes static members of the ThreadIDHelper class.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.Instance">
            <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
        </member>
        <member name="T:NLog.Internal.ThreadLocalStorageHelper">
            <summary>
            Helper for dealing with thread-local storage.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.AllocateDataSlot">
            <summary>
            Allocates the data slot for storing thread-local information.
            </summary>
            <returns>Allocated slot key.</returns>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.GetDataForSlot``1(System.Object)">
            <summary>
            Gets the data for a slot in thread-local storage.
            </summary>
            <typeparam name="T">Type of the data.</typeparam>
            <param name="slot">The slot to get data for.</param>
            <returns>
            Slot data (will create T if null).
            </returns>
        </member>
        <member name="T:NLog.Internal.TimeoutContinuation">
            <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation"/> with a timeout.
            </summary>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the timeout logic.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.UrlHelper">
            <summary>
            URL Encoding helper.
            </summary>
        </member>
        <member name="M:NLog.Internal.UrlHelper.UrlEncode(System.String,System.Boolean)">
            <summary>
            Url encode and URL
            </summary>
            <param name="str">URL to be encoded</param>
            <param name="spaceAsPlus">space as + or %20? <c>false</c> (%20) is the safe option.</param>
            <returns>Encoded url.</returns>
        </member>
        <member name="M:NLog.Internal.UrlHelper.IsSafeUrlCharacter(System.Char)">
            <summary>
            Is this character safe in the URL?
            </summary>
            <param name="ch">char to test.</param>
            <returns><c>true</c> is safe.</returns>
        </member>
        <member name="T:NLog.Internal.Win32FileCharacteristicsHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileCharacteristicsHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32FileCharacteristicsHelper.GetFileCharacteristics(System.String,System.IntPtr)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="T:NLog.Internal.Win32ThreadIDHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.Internal.XmlHelper">
            <summary>
             Helper class for XML
            </summary>
        </member>
        <member name="M:NLog.Internal.XmlHelper.RemoveInvalidXmlChars(System.String)">
            <summary>
            removes any unusual unicode characters that can't be encoded into XML
            </summary>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Safe version of WriteAttributeString
            </summary>
            <param name="writer"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Safe version of WriteAttributeString
            </summary>
            <param name="writer"></param>
            <param name="thread"></param>
            <param name="localName"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteElementSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Safe version of WriteElementSafeString
            </summary>
            <param name="writer"></param>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLog.Internal.XmlHelper.WriteSafeCData(System.Xml.XmlWriter,System.String)">
            <summary>
            Safe version of WriteCData
            </summary>
            <param name="writer"></param>
            <param name="text"></param>
        </member>
        <member name="T:NLog.ISuppress">
            <summary>
            Provides an interface to execute System.Actions without surfacing any exceptions raised for that action.
            </summary>
        </member>
        <member name="M:NLog.ISuppress.Swallow(System.Action)">
            <summary>
            Runs the provided action. If the action throws, the exception is logged at <c>Error</c> level. The exception is not propagated outside of this method.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NLog.ISuppress.Swallow``1(System.Func{``0})">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a default value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <returns>Result returned by the provided function or the default value of type <typeparamref name="T"/> in case of exception.</returns>
        </member>
        <member name="M:NLog.ISuppress.Swallow``1(System.Func{``0},``0)">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a fallback value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <param name="fallback">Fallback value to return in case of exception.</param>
            <returns>Result returned by the provided function or fallback value in case of exception.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Separator">
            <summary>
            Gets or sets string that will be used to separate key/value pairs.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Format">
            <summary>
            Gets or sets how key/value pairs will be formatted.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders all log event's properties and appends them to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
            <summary>
            Designates a property of the class as an ambient property.
            </summary>
            <example>
            non-ambient:  ${uppercase:${level}} 
            ambient    :  ${level:uppercase} 
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute" /> class.
            </summary>
            <param name="name">Ambient property name.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AppDomainLayoutRenderer">
            <summary>
             Used to render the application domain name.
             </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.#ctor">
            <summary>
            Create a new renderer
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Create a new renderer
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AppDomainLayoutRenderer.Format">
            <summary>
            Format string. Possible values: "Short", "Long" or custom like {0} {1}. Default "Long"
            The first parameter is the  <see cref="P:System.AppDomain.Id"/>, the second the second the  <see cref="P:System.AppDomain.FriendlyName"/>
            This string is used in <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Render the layout
            </summary>
            <param name="builder"></param>
            <param name="logEvent"></param>
        </member>
        <member name="M:NLog.LayoutRenderers.AppDomainLayoutRenderer.GetFormattingString(System.String)">
            <summary>
            Convert the formatting string
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
            <summary>
            ASP Application variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the ASP Application variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
            <summary>
            ASP Request variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
            <summary>
            ASP Session variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer">
            <summary>
            Assembly version.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders assembly version and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.CleanNamesOfAnonymousDelegates">
            <summary>
            Gets or sets a value indicating whether the method name will be cleaned up if it is detected as an anonymous delegate.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
            <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer">
            <summary>
            The call site source line number. Full callsite <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer"/>
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            Gets or sets the initial value of the counter.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Gets or sets the name of the environment variable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Default">
            <summary>
            Gets or sets the default value to be used when the environment variable is not set.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.EventPropertiesLayoutRenderer">
            <summary>
            Log event context data. See <see cref="P:NLog.LogEventInfo.Properties"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.#ctor">
            <summary>
             Log event context data with default options.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Format">
            <summary>
            Format string for conversion from object to string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <see cref="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Formats"/>
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormat">
            <summary>
            Gets or sets the format of the output of inner exceptions. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.MaxInnerExceptionLevel">
            <summary>
            Gets or sets the maximum number of inner exceptions to include in the output.
            By default inner exceptions are not enabled for compatibility with NLog 1.0.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerExceptionSeparator">
            <summary>
            Gets or sets the separator between inner exceptions.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Formats">
            <summary>
             Gets the formats of the output of inner exceptions to be rendered in target.
            </summary>
            <docgen category='Rendering Options' order='10' />
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormats">
            <summary>
             Gets the formats of the output to be rendered in target.
            </summary>
            <docgen category='Rendering Options' order='10' />
            <see cref="T:NLog.Config.ExceptionRenderingFormat"/>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the Message of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The exception containing the Message to append.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMethod(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the method name from Exception's stack trace to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose method name should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendStackTrace(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the stack trace from an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose stack trace should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendToString(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the result of calling ToString() on an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose call to ToString() should be appended.</param>       
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendType(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose type should be appended.</param>        
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendShortType(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the short type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose short type should be appended.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendData(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the contents of an Exception's Data property to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="ex">The Exception whose Data property elements should be appended.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.CompileFormat(System.String)">
            <summary>
            Split the string and then compile into list of Rendering formats.
            </summary>
            <param name="formatSpecifier"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
            <summary>
            Renders contents of the specified file.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <docgen category='File Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
            <summary>
            Gets or sets the encoding used in the file.
            </summary>
            <value>The encoding.</value>
            <docgen category='File Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
            <summary>
            The information about the garbage collector.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
            <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
            <summary>
            Total memory allocated.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
            <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
            <summary>
            Gets the number of Gen0 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
            <summary>
            Gets the number of Gen1 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
            <summary>
            Gets the number of Gen2 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
            <summary>
            Maximum generation number supported by GC.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
            <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
            <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LayoutRenderer.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout renderer.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>      
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
            <remarks>This attribute is not required when registering the layout in the API.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute" /> class.
            </summary>
            <param name="name">Name of the layout renderer, without the `${ }`</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
            <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
            <param name="text">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
            <summary>
            Gets or sets the literal text.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
            <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
            <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext"/> stack.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
            <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.LongDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.MessageLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.WithException">
            <summary>
            Gets or sets a value indicating whether to log exception along with message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.ExceptionSeparator">
            <summary>
            Gets or sets the string that separates message from the exception.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
            <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
            <summary>
            A newline literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.#cctor">
            <summary>
            Initializes static members of the NLogDirLayoutRenderer class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
            <summary>
            The performance counter.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
            <summary>
            Gets or sets the name of the counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
            <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
            <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessIdLayoutRenderer">
            <summary>
            The identifier of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
            <summary>
            The information about the running process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoProperty">
            <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.BasePriority">
            <summary>
            Base Priority.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitCode">
            <summary>
            Exit Code.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitTime">
            <summary>
            Exit Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Handle">
            <summary>
            Process Handle.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HandleCount">
            <summary>
            Handle Count.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HasExited">
            <summary>
            Whether process has exited.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Id">
            <summary>
            Process ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MachineName">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowHandle">
            <summary>
            Handle of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MaxWorkingSet">
            <summary>
            Maximum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MinWorkingSet">
            <summary>
            Minimum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize">
            <summary>
            Non-paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize64">
            <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize">
            <summary>
            Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize64">
            <summary>
            Paged Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize">
            <summary>
            Paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize64">
            <summary>
            Paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize">
            <summary>
            Peak Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize64">
            <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize">
            <summary>
            Peak Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize64">
            <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet">
            <summary>
            Peak Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet64">
            <summary>
            Peak Working Set Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityBoostEnabled">
            <summary>
            Whether priority boost is enabled.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityClass">
            <summary>
            Priority Class.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize">
            <summary>
            Private Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize64">
            <summary>
            Private Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivilegedProcessorTime">
            <summary>
            Privileged Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ProcessName">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Responding">
            <summary>
            Whether process is responding.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.SessionId">
            <summary>
            Session ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.StartTime">
            <summary>
            Process Start Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.TotalProcessorTime">
            <summary>
            Total Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.UserProcessorTime">
            <summary>
            User Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize">
            <summary>
            Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize64">
            <summary>
            Virtual Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet">
            <summary>
            Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet64">
            <summary>
            Working Set Size (64-bit).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
            <summary>
            The name of the current process.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
            <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process name (optionally with a full path).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.WritetTimestamp(System.Text.StringBuilder,System.TimeSpan)">
            <summary>
            Write timestamp to builder with format hh:mm:ss:fff
            </summary>
            <param name="builder"></param>
            <param name="ts"></param>
        </member>
        <member name="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer">
            <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Normalize">
            <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Difference">
            <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Seconds">
            <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Precision">
            <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.AlignDecimalPoint">
            <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
            <summary>
            A value from the Registry.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.#ctor">
            <summary>
            Create new renderer
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
            <summary>
            Gets or sets the registry value name.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
            <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.RequireEscapingSlashesInDefaultValue">
            <summary>
            Require escaping backward slashes in <see cref="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue"/>. Need to be backwardscompatible.
            
            When true:
            
            `\` in value should be configured as `\\`
            `\\` in value should be configured as `\\\\`.
            </summary>
            <remarks>Default value wasn't a Layout before and needed an escape of the slash</remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.View">
            <summary>
            Gets or sets the registry view (see: https://msdn.microsoft.com/de-de/library/microsoft.win32.registryview.aspx). 
            Allowed values: Registry32, Registry64, Default 
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
             <summary>
             Gets or sets the registry key.
             </summary>
             <example>
             HKCU\Software\NLogTest
             </example>
             <remarks>
             Possible keys:
             <ul>
            <li>HKEY_LOCAL_MACHINE</li>
            <li>HKLM</li>
            <li>HKEY_CURRENT_USER</li>
            <li>HKCU</li>
            <li>HKEY_CLASSES_ROOT</li>
            <li>HKEY_USERS</li>
            <li>HKEY_CURRENT_CONFIG</li>
            <li>HKEY_DYN_DATA</li>
            <li>HKEY_PERFORMANCE_DATA</li>
             </ul>
             </remarks>
             <docgen category='Registry Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event. Ignored.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseResult.HasSubKey">
            <summary>
            Has <see cref="P:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseResult.SubKey"/>?
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.ParseKey(System.String)">
            <summary>
            Parse key to <see cref="T:Microsoft.Win32.RegistryHive"/> and subkey.
            </summary>
            <param name="key">full registry key name</param>
            <returns>Result of parsing, never <c>null</c>.</returns>
        </member>
        <member name="F:NLog.LayoutRenderers.RegistryLayoutRenderer.HiveAliases">
            <summary>
            Aliases for the hives. See https://msdn.microsoft.com/en-us/library/ctb3kd86(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ShortDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.DateData.AppendDate(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Appends a date in format yyyy-MM-dd to the StringBuilder.
            The DateTime.ToString() result is cached for future uses
            since it only changes once a day. This optimization yields a
            performance boost of 40% and makes the renderer allocation-free
            in must cases.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the date to</param>
            <param name="timestamp">The date to append</param>
        </member>
        <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
            <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
            <summary>
            Gets or sets the system special folder to use.
            </summary>
            <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul>
            <li><b>ApplicationData</b> - roaming application data for current user.</li>
            <li><b>CommonApplicationData</b> - application data for all users.</li>
            <li><b>MyDocuments</b> - My Documents</li>
            <li><b>DesktopDirectory</b> - Desktop directory</li>
            <li><b>LocalApplicationData</b> - non roaming application data</li>
            <li><b>Personal</b> - user profile directory</li>
            <li><b>System</b> - System directory</li>
            </ul>
            </remarks>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceFormat">
            <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
            <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
            <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
            <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
            <summary>
            Stack trace renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
            <summary>
            Gets or sets the output format of the stack trace.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.SkipFrames">
            <summary>
            Gets or sets the number of frames to skip.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
            <summary>
            Gets or sets the stack frame separator string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
            <value></value>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
            <summary>
            A temporary directory.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIdLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TimeLayoutRenderer">
            <summary>
            The time in a 24-hour, sortable format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.TimeLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.TimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders time in the 24-h format (HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TraceActivityIdLayoutRenderer">
            <summary>
            A renderer that puts into log a System.Diagnostics trace correlation id.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TraceActivityIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current trace activity ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.VariableLayoutRenderer">
            <summary>
            Render a NLog variable (xml or config)
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.VariableLayoutRenderer.Name">
            <summary>
            Gets or sets the name of the NLog variable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.VariableLayoutRenderer.Default">
            <summary>
            Gets or sets the default value to be used when the variable is not set.
            </summary>
            <remarks>Not used if Name is <c>null</c></remarks>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.TryGetLayout(NLog.Layouts.SimpleLayout@)">
            <summary>
            Try get the 
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.LayoutRenderers.VariableLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
            <summary>
            Thread Windows identity information (username).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
            <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
            <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
            <summary>
            Applies caching to another layout output.
            </summary>
            <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption">
            <summary>
            A value indicating when the cache is cleared.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.None">
            <summary>Never clear the cache.</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.OnInit">
            <summary>Clear the cache whenever the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is initialized.</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCacheOption.OnClose">
            <summary>Clear the cache whenever the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is closed.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is enabled.
            </summary>
            <docgen category='Caching Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.ClearCache">
            <summary>
            Gets or sets a value indicating when the cache is cleared.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper">
            <summary>
            Filters characters not allowed in the file names by replacing them with safe character.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.FSNormalize">
            <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper">
            <summary>
            Escapes output of another layout using JSON rules.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.JsonEncode">
            <summary>
            Gets or sets a value indicating whether to apply JSON encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>JSON-encoded string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to lower case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Lowercase">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when exception has been defined for log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment">
            <summary>
            Horizontal alignment for padding layout renderers.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment.Left">
            <summary>
            When layout text is too long, align it to the left
            (remove characters from the right).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.PaddingHorizontalAlignment.Right">
            <summary>
            When layout text is too long, align it to the right
            (remove characters from the left).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
            <summary>
            Applies padding to another layout output.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
            <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
            <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
            <summary>
            Gets or sets the padding character.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
            <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.AlignmentOnTruncation">
            <summary>
            Gets or sets a value indicating whether a value that has
            been truncated (when <see cref="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength" /> is true)
            will be left-aligned (characters removed from the right)
            or right-aligned (characters removed from the left). The
            default is left alignment.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
            <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
            <example>
            ${replace:searchFor=\\n+:replaceWith=-:regex=true:inner=${message}}
            </example>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
            <summary>
            Gets or sets the text to search for.
            </summary>
            <value>The text search for.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Regex">
            <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
            <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
            <summary>
            Gets or sets the replacement string.
            </summary>
            <value>The replacement string.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceGroupName">
            <summary>
            Gets or sets the group name to replace when using regular expressions.
            Leave null or empty to replace without using group name.
            </summary>
            <value>The group name.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
            <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
            <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
            <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Replacer">
            <summary>
            This class was created instead of simply using a lambda expression so that the "ThreadAgnosticAttributeTest" will pass
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceNamedGroup(System.String,System.String,System.String,System.Text.RegularExpressions.Match)">
            <summary>
            A match evaluator for Regular Expression based replacing
            </summary>
            <param name="input">Input string.</param>
            <param name="groupName">Group name in the regex.</param>
            <param name="replacement">Replace value.</param>
            <param name="match">Match from regex.</param>
            <returns>Groups replaced with <paramref name="replacement"/>.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper">
            <summary>
            Replaces newline characters from the result of another layout renderer with spaces.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.Replacement">
            <summary>
            Gets or sets a value indicating the string that should be used for separating lines.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>String with newline characters replaced with spaces.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
            <summary>
            Gets or sets the layout to be wrapped.
            </summary>
            <value>The layout to be wrapped.</value>
            <remarks>This variable is for backwards compatibility</remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
            <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
            <param name="encodedValue">The string to be encoded/decoded.</param>
            <returns>Encoded/Decoded text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper">
            <summary>
            Trims the whitespace from the result of another layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpace">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to upper case.
            </summary>
            <example>
            ${uppercase:${level}} //[DefaultParameter]
            ${uppercase:Inner=${level}} 
            ${level:uppercase} // [AmbientProperty]
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Uppercase">
            <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
            <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
            <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
            <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper">
            <summary>
            Outputs alternative layout when the inner layout produces empty result.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.WhenEmpty">
            <summary>
            Gets or sets the layout to be rendered when original layout produced empty result.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when the specified condition has been met.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When">
            <summary>
            Gets or sets the condition that must be met for the inner layout to be printed.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper">
            <summary>
            Replaces newline characters from the result of another layout renderer with spaces.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.WrapLine">
            <summary>
            Gets or sets the line length for wrapping.
            </summary>
            <remarks>
            Only positive values are allowed
            </remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
            <summary>
            Base class for <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>s which wrapping other <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>s. 
            
            This has the <see cref="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner"/> property (which is default) and can be used to wrap.
            </summary>
            <example>
            ${uppercase:${level}} //[DefaultParameter]
            ${uppercase:Inner=${level}} 
            </example>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
            <summary>
            Gets or sets the wrapped layout.
            
            [DefaultParameter] so Inner: is not required if it's the first
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <remarks>If the <see cref="T:NLog.LogEventInfo"/> is needed, overwrite <see cref="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)"/>.</remarks>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to be XML-compliant.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.XmlEncode">
            <summary>
            Gets or sets a value indicating whether to apply XML encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvColumn">
            <summary>
            A column in the CSV.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="layout">The layout of the column.</param>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Layout">
            <summary>
            Gets or sets the layout of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
            <summary>
            Specifies allowed column delimiters.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
            <summary>
            Automatically detect from regional settings.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
            <summary>
            Comma (ASCII 44).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
            <summary>
            Semicolon (ASCII 59).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
            <summary>
            Tab character (ASCII 9).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
            <summary>
            Pipe character (ASCII 124).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
            <summary>
            Space character (ASCII 32).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
            <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvLayout">
            <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
            <remarks>If <see cref="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header"/> is set, then the header generation with columnnames will be disabled.</remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout"/> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Columns">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.WithHeader">
            <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
            <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Delimiter">
            <summary>
            Gets or sets the column delimiter.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Quoting">
            <summary>
            Gets or sets the quoting mode.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
            <summary>
            Gets or sets the quote Character.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
            <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="M:NLog.Layouts.CsvLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetHeader">
            <summary>
            Get the headers with the column names.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
            <summary>
            Header with column names for CSV layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvQuotingMode">
            <summary>
            Specifies CSV quoting modes.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.All">
            <summary>
            Quote all column.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
            <summary>
            Quote nothing.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
            <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
        </member>
        <member name="T:NLog.Layouts.JsonAttribute">
            <summary>
            JSON attribute.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="layout">The layout of the attribute's value.</param>
        </member>
        <member name="M:NLog.Layouts.JsonAttribute.#ctor(System.String,NLog.Layouts.Layout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonAttribute" /> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="layout">The layout of the attribute's value.</param>
            <param name="encode">Encode value with json-encode</param>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Layout">
            <summary>
            Gets or sets the layout that will be rendered as the attribute's value.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonAttribute.Encode">
            <summary>
            Determines wether or not this attribute will be Json encoded.
            </summary>
        </member>
        <member name="T:NLog.Layouts.JsonLayout">
            <summary>
            A specialized layout that renders JSON-formatted events.
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.JsonLayout"/> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.JsonLayout.Attributes">
            <summary>
            Gets the array of attributes' configurations.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.JsonLayout.SuppressSpaces">
            <summary>
            Gets or sets the option to suppress the extra spaces in the output json
            </summary>
        </member>
        <member name="M:NLog.Layouts.JsonLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event as a JSON document for writing.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A JSON string representation of the log event.</returns>
        </member>
        <member name="T:NLog.Layouts.Layout">
            <summary>
            Abstract interface that layouts must implement.
            </summary>
        </member>
        <member name="F:NLog.Layouts.Layout.isInitialized">
            <summary>
            Is this layout initialized? See <see cref="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)"/>
            </summary>
        </member>
        <member name="F:NLog.Layouts.Layout.threadAgnostic">
            <summary>
            Does the layout contains threadAgnostic layout renders? If contains non-threadAgnostic-layoutrendender, then this layout is also not threadAgnostic. 
            See <see cref="P:NLog.Layouts.Layout.IsThreadAgnostic"/> and <see cref="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)"/>.
            </summary>
        </member>
        <member name="P:NLog.Layouts.Layout.IsThreadAgnostic">
            <summary>
            Gets a value indicating whether this layout is thread-agnostic (can be rendered on any thread).
            </summary>
            <remarks>
            Layout is thread-agnostic if it has been marked with [ThreadAgnostic] attribute and all its children are
            like that as well.
            Thread-agnostic layouts only use contents of <see cref="T:NLog.LogEventInfo"/> for its output.
            </remarks>
        </member>
        <member name="P:NLog.Layouts.Layout.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
            <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout" />.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns><see cref="T:NLog.Layouts.SimpleLayout"/> object represented by the text.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <param name="configurationItemFactory">The NLog factories to use when resolving layout renderers.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            
            Only if the layout doesn't have [ThreadAgnostic] and doens't contain layouts with [ThreadAgnostic]. 
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
            <summary>
            Renders the event info in layout.
            </summary>
            <param name="logEvent">The event info.</param>
            <returns>String representing log event.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.CloseLayout">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.LayoutAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute" /> class.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="T:NLog.Layouts.LayoutParser">
            <summary>
            Parses layout strings.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
            <summary>
            A specialized layout that supports header and footer.
            </summary>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
            <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
            <summary>
            Gets or sets the header layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.Log4JXmlEventLayout">
            <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> class.
            </summary>
        </member>
        <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> instance that renders log events.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.SimpleLayout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout"/> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
            <param name="configurationItemFactory">The NLog factories to use when creating references to layout renderers.</param>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.OriginalText">
            <summary>
            Original text before compile to Layout renderes
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Text">
            <summary>
            Gets or sets the layout text.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.IsFixedText">
            <summary>
            Is the message fixed? (no Layout renderers used)
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.FixedText">
            <summary>
            Get the fixed text. Only set when <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/> is <c>true</c>
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Renderers">
            <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> objects that make up this layout.
            </summary>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required for rendering.
            </summary>
            <remarks>Calculated when setting <see cref="P:NLog.Layouts.SimpleLayout.Renderers"/>.</remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
            <summary>
            Converts a text to a simple layout.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns>A <see cref="T:NLog.Layouts.SimpleLayout"/> object.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
            <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped text.</returns>
            <remarks>
            Escaping is done by replacing all occurrences of
            '${' with '${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
            <summary>
            Evaluates the specified text by expanding all layout renderers.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <param name="logEvent">Log event to be used for evaluation.</param>
            <returns>The input text with all occurrences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
            <summary>
            Evaluates the specified text by expanding all layout renderers
            in new <see cref="T:NLog.LogEventInfo" /> context.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <returns>The input text with all occurrences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current object.
            </returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            Gets the date of the first log event created.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="message">Log message including parameter placeholders.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="P:NLog.LogEventInfo.SequenceID">
            <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets or sets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.HasStackTrace">
            <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
            <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerShortName">
            <summary>
            Gets the logger short name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Properties">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Context">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.CreateNullEvent">
            <summary>
            Creates the null event.
            </summary>
            <returns>Null log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.Exception,System.IFormatProvider,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="exception">The exception.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="exception">The exception.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
            <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo"/> from this <see cref="T:NLog.LogEventInfo"/> by attaching the specified asynchronous continuation.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo"/> with attached continuation.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.ToString">
            <summary>
            Returns a string representation of this log event.
            </summary>
            <returns>String representation of the log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
        </member>
        <member name="T:NLog.LogFactory`1">
            <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
            <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger"/>.</typeparam>
        </member>
        <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
            <summary>
            Gets the logger with type <typeparamref name="T"/>.
            </summary>
            <param name="name">The logger name.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
            <summary>
            Gets a custom logger with the name of the current class and type <typeparamref name="T"/>.
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:NLog.LogFactory">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="P:NLog.LogFactory.CurrentAppDomain">
            <summary>
            Gets the current <see cref="T:NLog.Internal.Fakeables.IAppDomain"/>.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether exceptions should be thrown. See also <see cref="P:NLog.LogFactory.ThrowConfigExceptions"/>.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>By default exceptions are not thrown under any circumstances.</remarks>
        </member>
        <member name="P:NLog.LogFactory.ThrowConfigExceptions">
            <summary>
            Gets or sets a value indicating whether <see cref="T:NLog.NLogConfigurationException"/> should be thrown.
            
            If <c>null</c> then <see cref="P:NLog.LogFactory.ThrowExceptions"/> is used.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>
            This option is for backwards-compatiblity.
            By default exceptions are not thrown under any circumstances.
            
            </remarks>
        </member>
        <member name="P:NLog.LogFactory.Configuration">
            <summary>
            Gets or sets the current logging configuration. After setting this property all
            existing loggers will be re-configured, so that there is no need to call <see cref="M:NLog.LogFactory.ReconfigExistingLoggers" />
            manually.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.DefaultCultureInfo">
            <summary>
            Gets the default culture info to use as <see cref="P:NLog.LogEventInfo.FormatProvider"/>.
            </summary>
            <value>
            Specific culture info or null to use <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </value>
        </member>
        <member name="M:NLog.LogFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger instance.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger with the name of the current class. 
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger``1">
            <summary>
            Gets the logger with the name of the current class. 
            </summary>
            <returns>The logger with type <typeparamref name="T"/>.</returns>
            <typeparam name="T">Type of the logger</typeparam>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets a custom logger with the name of the current class. Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="loggerType">The type of the logger to create. The type must inherit from <see cref="T:NLog.Logger"/></param>
            <returns>The logger of type <paramref name="loggerType"/>.</returns>
            <remarks>This is a slow-running method. Make sure you are not calling this method in a 
            loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument 
            are not guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger``1(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <typeparam name="T">Type of the logger</typeparam>
            <returns>The logger reference with type <typeparamref name="T"/>. Multiple calls to <c>GetLogger</c> with the same argument 
            are not guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.  Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger and recalculates their 
            target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time 
            will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages 
            after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages 
            after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.DisableLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.
            </remarks>
            <returns>An object that implements IDisposable whose Dispose() method re-enables logging. 
            To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.EnableLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.SuspendLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>
            Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater than 
            or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.
            </remarks>
            <returns>An object that implements IDisposable whose Dispose() method re-enables logging. 
            To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.ResumeLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.ResumeLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.SuspendLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.OnConfigurationChanged(NLog.Config.LoggingConfigurationChangedEventArgs)">
            <summary>
            Invoke the Changed event; called whenever list changes
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:NLog.LogFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>True</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:NLog.LogFactory.IsDisposing">
            <summary>
            Currenty this logfactory is disposing?
            </summary>
        </member>
        <member name="T:NLog.LogFactory.LoggerCacheKey">
            <summary>
            Logger cache key.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
            <summary>
            Determines if two objects are equal in value.
            </summary>
            <param name="obj">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(NLog.LogFactory.LoggerCacheKey)">
            <summary>
            Determines if two objects of the same type are equal in value.
            </summary>
            <param name="key">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="T:NLog.LogFactory.LoggerCache">
            <summary>
            Logger cache.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCache.InsertOrUpdate(NLog.LogFactory.LoggerCacheKey,NLog.Logger)">
            <summary>
            Inserts or updates. 
            </summary>
            <param name="cacheKey"></param>
            <param name="logger"></param>
        </member>
        <member name="T:NLog.LogFactory.LogEnabler">
            <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose"/> implementation.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler" /> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.System#IDisposable#Dispose">
            <summary>
            Enables logging.
            </summary>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Logging methods which only are executed when the DEBUG conditional compilation symbol is set.
            </summary>
            <remarks>
            The DEBUG conditional compilation symbol is default enabled (only) in a debug build.
            
            If the DEBUG conditional compilation symbol isn't set in the calling library, the compiler will remove all the invocations to these methods. 
            This could lead to better performance. 
            
            See: https://msdn.microsoft.com/en-us/library/4xssyw96%28v=vs.90%29.aspx
            </remarks>
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Provides logging interface and utility functions.
            </summary>
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalDebug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.ConditionalTrace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            Only executed when the DEBUG conditional compilation symbol is set.</summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger"/> class.
            </summary>
        </member>
        <member name="E:NLog.Logger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="args">Arguments to format.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Swallow(System.Action)">
            <summary>
            Runs the provided action. If the action throws, the exception is logged at <c>Error</c> level. The exception is not propagated outside of this method.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NLog.Logger.Swallow``1(System.Func{``0})">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a default value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <returns>Result returned by the provided function or the default value of type <typeparamref name="T"/> in case of exception.</returns>
        </member>
        <member name="M:NLog.Logger.Swallow``1(System.Func{``0},``0)">
            <summary>
            Runs the provided function and returns its result. If an exception is thrown, it is logged at <c>Error</c> level.
            The exception is not propagated outside of this method; a fallback value is returned instead.
            </summary>
            <typeparam name="T">Return type of the provided function.</typeparam>
            <param name="func">Function to run.</param>
            <param name="fallback">Fallback value to return in case of exception.</param>
            <returns>Result returned by the provided function or fallback value in case of exception.</returns>
        </member>
        <member name="P:NLog.Logger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="T:NLog.LoggerImpl">
            <summary>
            Implementation of logging engine.
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.FindCallingMethodOnStackTrace(System.Diagnostics.StackTrace,System.Type)">
            <summary>
             Finds first user stack frame in a stack trace
            </summary>
            <param name="stackTrace">The stack trace of the logging method invocation</param>
            <param name="loggerType">Type of the logger or logger wrapper. This is still Logger if it's a subclass of Logger.</param>
            <returns>Index of the first user stack frame or 0 if all stack frames are non-user</returns>
        </member>
        <member name="M:NLog.LoggerImpl.FindIndexOfCallingMethod(System.Collections.Generic.List{NLog.LoggerImpl.StackFrameWithIndex},System.Collections.Generic.List{NLog.LoggerImpl.StackFrameWithIndex})">
            <summary>
            Get the index which correspondens to the calling method.
            
            This is most of the time the first index after <paramref name="candidateStackFrames"/>.
            </summary>
            <param name="allStackFrames">all the frames of the stacktrace</param>
            <param name="candidateStackFrames">frames which all hiddenAssemblies are removed</param>
            <returns>index on stacktrace</returns>
        </member>
        <member name="M:NLog.LoggerImpl.SkipAssembly(System.Diagnostics.StackFrame)">
            <summary>
            Assembly to skip?
            </summary>
            <param name="frame">Find assembly via this frame. </param>
            <returns><c>true</c>, we should skip.</returns>
        </member>
        <member name="M:NLog.LoggerImpl.IsLoggerType(System.Diagnostics.StackFrame,System.Type)">
            <summary>
            Is this the type of the logger?
            </summary>
            <param name="frame">get type of this logger in this frame.</param>
            <param name="loggerType">Type of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IList{NLog.Filters.Filter},NLog.LogEventInfo)">
            <summary>
            Gets the filter result.
            </summary>
            <param name="filterChain">The filter chain.</param>
            <param name="logEvent">The log event.</param>
            <returns>The result of the filter.</returns>
        </member>
        <member name="T:NLog.LoggerImpl.StackFrameWithIndex">
            <summary>
            Stackframe with correspending index on the stracktrace
            </summary>
        </member>
        <member name="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrameIndex">
            <summary>
            Index of <see cref="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrame"/> on the stack.
            </summary>
        </member>
        <member name="P:NLog.LoggerImpl.StackFrameWithIndex.StackFrame">
            <summary>
            A stackframe
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.StackFrameWithIndex.#ctor(System.Int32,System.Diagnostics.StackFrame)">
            <summary>
            New item
            </summary>
            <param name="stackFrameIndex">Index of <paramref name="stackFrame"/> on the stack.</param>
            <param name="stackFrame">A stackframe</param>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            Off log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.AllLevels">
            <summary>
            All log levels. (Trace, Debug, Info, Warn, Error, Fatal, Off)
            </summary>
        </member>
        <member name="P:NLog.LogLevel.AllLoggingLevels">
            <summary>
            All log levels that can be used to log events (excludes Off). (Trace, Debug, Info, Warn, Error, Fatal)
            </summary>
        </member>
        <member name="M:NLog.LogLevel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="name">The log level name.</param>
            <param name="ordinal">The log level ordinal number.</param>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.Ordinal">
            <summary>
            Gets the ordinal of the log level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel"/> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> instance. For 0 it returns <see cref="F:NLog.LogLevel.Trace"/>, 1 gives <see cref="F:NLog.LogLevel.Debug"/> and so on.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="levelName">The textual representation of the log level.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.LogLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>Value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to 
            this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(NLog.LogLevel)">
            <summary>
            Determines whether the specified <see cref="T:NLog.LogLevel"/> instance is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:NLog.LogLevel"/> to compare with this instance.</param>
            <returns>Value of <c>true</c> if the specified <see cref="T:NLog.LogLevel"/> is equal to 
            this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel"/> object.
            </summary>
            <param name="obj">
            The object object.
            </param>
            <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal"/> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="T:NLog.LogManager.GetCultureInfo">
            <summary>
            Delegate used to set/get the culture in use.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#cctor">
            <summary>
            Initializes static members of the LogManager class.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#ctor">
            <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
        </member>
        <member name="P:NLog.LogManager.LogFactory">
            <summary>
            Gets the default <see cref="T:NLog.LogFactory" /> instance.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowConfigExceptions">
            <summary>
            Gets or sets a value indicating whether <see cref="T:NLog.NLogConfigurationException"/> should be thrown.
            </summary>
            <value>A value of <c>true</c> if exception should be thrown; otherwise, <c>false</c>.</value>
            <remarks>
            This option is for backwards-compatiblity.
            By default exceptions are not thrown under any circumstances.
            
            </remarks>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            <see cref="P:NLog.LogFactory.Configuration" />
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="P:NLog.LogManager.DefaultCultureInfo">
            <summary>
            Gets or sets the default culture to use.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger with the name of the current class.  
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.AddHiddenAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the given assembly which will be skipped 
            when NLog is trying to find the calling method on stack trace.
            </summary>
            <param name="assembly">The assembly to skip.</param>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets a custom logger with the name of the current class. Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger which discards all log messages.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named custom logger.  Use <paramref name="loggerType"/> to pass the type of the needed Logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger of type <paramref name="loggerType"/>. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
            <remarks>The generic way for this method is <see cref="M:NLog.LogFactory`1.GetLogger(System.String)"/></remarks>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>
            Decreases the log enable counter and if it reaches -1 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
            <returns>An object that implements IDisposable whose Dispose() method reenables logging. 
                To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>
            Increases the log enable counter and if it reaches 0 the logs are disabled.
            </summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Checks if logging is currently enabled.
            </summary>
            <returns><see langword="true" /> if logging is currently enabled, <see langword="false"/> 
                otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
                than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.Shutdown">
            <summary>
            Dispose all targets, and shutdown logging.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetClassFullName">
            <summary>
            Gets the fully qualified name of the class invoking the LogManager, including the 
            namespace but not the assembly.    
            </summary>
        </member>
        <member name="T:NLog.LogMessageGenerator">
            <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverOneWayClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverOneWayClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverOneWayClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverOneWayClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverTwoWayClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverTwoWayClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
            <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvent">
            <summary>
            Wire format for NLog Event.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.NLogEvent"/> class.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Id">
            <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
            <summary>
            Gets or sets the ordinal of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
            <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/>.
            </summary>
            <value>The logger ordinal.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
            <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
            <summary>
            Gets or sets the message string index.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Values">
            <summary>
            Gets or sets the collection of layout values.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
            <summary>
            Gets the collection of indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/> array for each layout value.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
            <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent"/> to <see cref="T:NLog.LogEventInfo"/>.
            </summary>
            <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent"/> object this <see cref="T:NLog.LogReceiverService.NLogEvent" /> is part of..</param>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
            <returns>Converted <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvents">
            <summary>
            Wire format for NLog event package.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>The name of the client.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
            <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
            <value>The base time UTC.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
            <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
            <value>The layout names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
            <summary>
            Gets or sets the collection of logger names.
            </summary>
            <value>The logger names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Events">
            <summary>
            Gets or sets the list of events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="T:NLog.LogReceiverService.SoapLogReceiverClient">
            <summary>
            Log Receiver Client using legacy SOAP client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.SoapLogReceiverClient"/> class.
            </summary>
            <param name="url">The service URL.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>
            Processes the log messages.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.StringCollection">
            <summary>
            List of strings annotated for more terse serialization.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.StringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.StringCollection"/> class.
            </summary>
        </member>
        <member name="T:NLog.MappedDiagnosticsContext">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.Object)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.String"/>.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String,System.IFormatProvider)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.String"/>.
            </summary>
            <param name="item">Item name.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting a value to a <see cref="T:System.String"/>.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If <paramref name="formatProvider"/> is <c>null</c> and the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.GetObject(System.String)">
            <summary>
            Gets the current thread MDC named item, as <see cref="T:System.Object"/>.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified <paramref name="item"/> exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified <paramref name="item"/> from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.MDC.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MDC.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <see cref="F:System.String.Empty"/>.</returns>
            <remarks>If the value isn't a <see cref="T:System.String"/> already, this call locks the <see cref="T:NLog.LogFactory"/> for reading the <see cref="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo"/> needed for converting to <see cref="T:System.String"/>. </remarks>
        </member>
        <member name="M:NLog.MDC.GetObject(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The value of <paramref name="item"/>, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.MDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MDC.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MDC.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
        </member>
        <member name="P:NLog.NDC.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="P:NLog.NDC.TopObject">
            <summary>
            Gets the top NDC object but doesn't remove it.
            </summary>
            <returns>The object from the top of the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NDC.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NDC.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.PopObject">
            <summary>
            Pops the top object off the NDC stack. The object is removed from the stack.
            </summary>
            <returns>The top object from the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NDC.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NDC.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.GetAllObjects">
            <summary>
            Gets all objects on the NDC stack. The objects are not removed from the stack.
            </summary>
            <returns>Array of objects on the stack.</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="P:NLog.NestedDiagnosticsContext.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="P:NLog.NestedDiagnosticsContext.TopObject">
            <summary>
            Gets the top NDC object but doesn't remove it.
            </summary>
            <returns>The object at the top of the NDC stack if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.Object)">
            <summary>
            Pushes the specified object on current thread NDC.
            </summary>
            <param name="value">The object to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop(System.IFormatProvider)">
            <summary>
            Pops the top message from the NDC stack.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting the value to a string.</param>
            <returns>The top message, which is removed from the stack, as a string value.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.PopObject">
            <summary>
            Pops the top object off the NDC stack.
            </summary>
            <returns>The object from the top of the NDC stack, if defined; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages(System.IFormatProvider)">
            <summary>
            Gets all messages from the stack, without removing them.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use when converting a value to a string.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllObjects">
            <summary>
            Gets all objects on the stack.
            </summary>
            <returns>Array of objects on the stack.</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
            <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.Object},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper" /> class.
            </summary>
            <param name="stack">The stack.</param>
            <param name="previousCount">The previous count.</param>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.System#IDisposable#Dispose">
            <summary>
            Reverts the stack to original item count.
            </summary>
        </member>
        <member name="T:NLog.NLogConfigurationException">
            <summary>
            Exception thrown during NLog configuration.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="messageParameters">Parameters for the message</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogRuntimeException">
            <summary>
            Exception thrown during log event processing.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="messageParameters">Parameters for the message</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogTraceListener">
            <summary>
            TraceListener which routes all messages through NLog.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogTraceListener"/> class.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.LogFactory">
            <summary>
            Gets or sets the log factory to use when outputting messages (null - use LogManager).
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.DefaultLogLevel">
            <summary>
            Gets or sets the default log level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.ForceLogLevel">
            <summary>
            Gets or sets the log which should be always used regardless of source level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.DisableFlush">
            <summary>
            Gets or sets a value indicating whether flush calls from trace sources should be ignored.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether the trace listener is thread safe.
            </summary>
            <value></value>
            <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:NLog.NLogTraceListener.AutoLoggerName">
            <summary>
            Gets or sets a value indicating whether to use auto logger name detected from the stack trace.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Close">
            <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String)">
            <summary>
            Emits an error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Flush">
            <summary>
            Flushes the output buffer.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes trace and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/>  object identifying a related activity.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
            <returns>
            A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.
            </returns>
        </member>
        <member name="M:NLog.NLogTraceListener.TranslateLogLevel(System.Diagnostics.TraceEventType)">
            <summary>
            Translates the event type to level from <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>Translated log level.</returns>
        </member>
        <member name="M:NLog.NLogTraceListener.ProcessLogEventInfo(NLog.LogLevel,System.String,System.String,System.Object[],System.Nullable{System.Int32},System.Nullable{System.Diagnostics.TraceEventType},System.Nullable{System.Guid})">
            <summary>
            Process the log event
            <param name="logLevel">The log level.</param>
            <param name="loggerName">The name of the logger.</param>
            <param name="message">The log message.</param>
            <param name="arguments">The log parameters.</param>
            <param name="eventId">The event id.</param>
            <param name="eventType">The event type.</param>
            <param name="relatedActiviyId">The related activity id.</param>
            </summary>
        </member>
        <member name="T:NLog.Targets.ArchiveNumberingMode">
            <summary>
            Specifies the way archive numbering is performed.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
            <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
            <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Date">
            <summary>
            Date style numbering.  Archives will be stamped with the prior period 
            (Year, Month, Day, Hour, Minute) datetime.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.DateAndSequence">
            <summary>
            Date and sequence style numbering.
            Archives will be stamped with the prior period (Year, Month, Day) datetime.
            The most recent archive has the highest number (in combination with the date).
            </summary>
        </member>
        <member name="T:NLog.Targets.AspResponseTarget">
            <summary>
            Outputs log messages through the ASP Response object.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AspResponse-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Targets.AspResponseTarget.AddComments">
            <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
            <docgen category='Layout Options' order='100' />
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.AspResponseTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.AspResponseTarget"/> class with a name.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.ChainsawTarget">
            <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Chainsaw-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget"/> class with a name.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget">
            <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/ColoredConsole-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
            <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
            <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
            <remarks>
            The default rules are:
            <table>
            <tr>
            <th>Condition</th>
            <th>Foreground Color</th>
            <th>Background Color</th>
            </tr>
            <tr>
            <td>level == LogLevel.Fatal</td>
            <td>Red</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Error</td>
            <td>Yellow</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Warn</td>
            <td>Magenta</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Info</td>
            <td>White</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Debug</td>
            <td>Gray</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Trace</td>
            <td>DarkGray</td>
            <td>NoChange</td>
            </tr>
            </table>
            </remarks>
            <docgen category='Highlighting Rules' order='9' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.Encoding">
            <summary>
            The encoding for writing messages to the <see cref="T:System.Console"/>.
             </summary>
            <remarks>Has side effect</remarks>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
            <summary>
            Gets the row highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='11' />
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget.ColorPair">
            <summary>
            Color pair (foreground and background).
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleOutputColor">
            <summary>
            Colored console output color.
            </summary>
            <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Black">
            <summary>
            Black Color (#000000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
            <summary>
            Dark blue Color (#000080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
            <summary>
            Dark green Color (#008000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
            <summary>
            Dark Cyan Color (#008080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
            <summary>
            Dark Red Color (#800000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
            <summary>
            Dark Magenta Color (#800080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
            <summary>
            Dark Yellow Color (#808000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
            <summary>
            Gray Color (#C0C0C0).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
            <summary>
            Dark Gray Color (#808080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
            <summary>
            Blue Color (#0000FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Green">
            <summary>
            Green Color (#00FF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
            <summary>
            Cyan Color (#00FFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Red">
            <summary>
            Red Color (#FF0000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
            <summary>
            Magenta Color (#FF00FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
            <summary>
            Yellow Color (#FFFF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.White">
            <summary>
            White Color (#FFFFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
            <summary>
            Don't change the color.
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
            <summary>
            The row-highlighting condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#cctor">
            <summary>
            Initializes static members of the ConsoleRowHighlightingRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes log messages to the console.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Console-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
            <docgen category='Console Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Encoding">
            <summary>
            The encoding for writing messages to the <see cref="T:System.Console"/>.
             </summary>
            <remarks>Has side effect</remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
            <param name="logEvent">The logging event.</param>
            <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Output(System.String)">
            <summary>
            Write to output
            </summary>
            <param name="textLine">text to be written.</param>
        </member>
        <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompileRegex">
            <summary>
            Compile the <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.Regex"/>? This can improve the performance, but at the costs of more memory usage. If <c>false</c>, the Regex Cache is used.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property. Only used when <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.CompileRegex"/> is <c>true</c>.
            </summary>
            <remarks>Access this property will compile the Regex.</remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.GetRegexOptions(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get regex options. 
            </summary>
            <param name="regexOptions">Default option to start with.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.GetRegexExpression">
            <summary>
            Get Expression for a <see cref="P:NLog.Targets.ConsoleWordHighlightingRule.Regex"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.MatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Replace regex result
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Targets.DatabaseCommandInfo">
            <summary>
            Information about database command + parameters.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo"/> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
            <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
            <summary>
            Gets or sets the command text.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterLayout">The parameter layout.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Gets or sets the database parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Gets or sets the database parameter size.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Gets or sets the database parameter precision.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Gets or sets the database parameter scale.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Database-target">Documentation on NLog Wiki</seealso>
            <example>
            <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
            <para>MS SQL Server using System.Data.SqlClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
            <para>Oracle using System.Data.OracleClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
            <para>Oracle using System.Data.OleDBClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDB/NLog.config" height="350" />
            <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
            <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
            </example>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
            <summary>
            Gets or sets the name of the database provider.
            </summary>
            <remarks>
            <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
            <ul>
            <li><c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
            <li><c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
            <li><c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
            <li><c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
            <li><c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
            <li><c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
            <li><c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
            </ul>
            <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
            <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection" />) or one of the following tokens:
            </para>
            <ul>
            <li><c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
            <li><c>oledb</c> - OLEDB Data Provider</li>
            <li><c>odbc</c> - ODBC Data Provider</li>
            </ul>
            </remarks>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
            <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
            <summary>
            Gets the installation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
            <summary>
            Gets the uninstallation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Obsolete - value will be ignored! The logging code always runs outside of transaction. 
            
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
            <docgen category='Connection Options' order='10' />
            <remarks>
            This option was removed in NLog 4.0 because the logging code always runs outside of transaction. 
            This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHost">
            <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
            <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
            <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
            <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
            <docgen category='SQL Statement' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandType">
            <summary>
            Gets or sets the type of the SQL command to be run on each log level.
            </summary>
            <remarks>
            This specifies how the command text is interpreted, as "Text" (default) or as "StoredProcedure".
            When using the value StoredProcedure, the commandText-property would 
            normally be the name of the stored procedure. TableDirect method is not supported in this context.
            </remarks>
            <docgen category='SQL Statement' order='11' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='SQL Statement' order='12' />
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="T:NLog.Targets.DateAndSequenceArchive">
            <summary>
            A descriptor for an archive created with the DateAndSequence numbering mode.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.FileName">
            <summary>
            The full name of the archive file.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.Date">
            <summary>
            The parsed date contained in the file name.
            </summary>
        </member>
        <member name="P:NLog.Targets.DateAndSequenceArchive.Sequence">
            <summary>
            The parsed sequence number contained in the file name.
            </summary>
        </member>
        <member name="M:NLog.Targets.DateAndSequenceArchive.HasSameFormattedDate(System.DateTime)">
            <summary>
            Determines whether <paramref name="date"/> produces the same string as the current instance's date once formatted with the current instance's date format.
            </summary>
            <param name="date">The date to compare the current object's date to.</param>
            <returns><c>True</c> if the formatted dates are equal, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:NLog.Targets.DateAndSequenceArchive.#ctor(System.String,System.DateTime,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DateAndSequenceArchive"/> class.
            </summary>
        </member>
        <member name="T:NLog.Targets.DebuggerTarget">
            <summary>
            Writes log messages to the attached managed debugger.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebuggerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebuggerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Mock target - useful for testing.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Debug-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            Gets the number of times this target has been called.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            Gets the last message rendered by this target.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/EventLog-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MachineName">
            <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventId">
            <summary>
            Gets or sets the layout that renders event ID.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Category">
            <summary>
            Gets or sets the layout that renders event Category.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EntryType">
            <summary>
            Optional entrytype. When not set, or when not convertable to <see cref="T:System.LogLevel"/> then determined by <see cref="T:NLog.LogLevel"/>
            </summary>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Source">
            <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Log">
            <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MaxMessageLength">
            <summary>
            Gets or sets the message length limit to write to the Event Log.
            </summary>
            <remarks><value>MaxMessageLength</value> cannot be zero or negative</remarks>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.OnOverflow">
            <summary>
            Gets or sets the action to take if the message is larger than the <see cref="P:NLog.Targets.EventLogTarget.MaxMessageLength"/> option.
            </summary>
            <docgen category='Event Log Overflow Action' order='10' />
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log. 
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetEntryType(NLog.LogEventInfo)">
            <summary>
            Get the entry type for logging the message.
            </summary>
            <param name="logEvent">The logging event - for rendering the <see cref="P:NLog.Targets.EventLogTarget.EntryType"/></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetFixedSource">
            <summary>
            Get the source, if and only if the source is fixed. 
            </summary>
            <returns><c>null</c> when not <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/></returns>
            <remarks>Internal for unit tests</remarks>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.GetEventLog(NLog.LogEventInfo)">
            <summary>
            Get the eventlog to write to.
            </summary>
            <param name="logEvent">Event if the source needs to be rendered.</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.CreateEventSourceIfNeeded(System.String,System.Boolean)">
            <summary>
            (re-)create a event source, if it isn't there. Works only with fixed sourcenames.
            </summary>
            <param name="fixedSource">sourcenaam. If source is not fixed (see <see cref="P:NLog.Layouts.SimpleLayout.IsFixedText"/>, then pass <c>null</c> or emptystring.</param>
            <param name="alwaysThrowError">always throw an Exception when there is an error</param>
        </member>
        <member name="T:NLog.Targets.EventLogTargetOverflowAction">
            <summary>
            Action that should be taken if the message is greater than
            the max message size allowed by the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Truncate">
            <summary>
            Truncate the message before writing to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Split">
            <summary>
            Split the message and write multiple entries to the Event Log.
            </summary>
        </member>
        <member name="F:NLog.Targets.EventLogTargetOverflowAction.Discard">
            <summary>
            Discard of the message. It will not be written to the Event Log.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileArchivePeriod">
            <summary>
            Modes of archiving files based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.None">
            <summary>
            Don't archive based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Year">
            <summary>
            AddToArchive every year.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Month">
            <summary>
            AddToArchive every month.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Day">
            <summary>
            AddToArchive daily.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Hour">
            <summary>
            AddToArchive every hour.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Minute">
            <summary>
            AddToArchive every minute.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes log messages to one or more files.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/File-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="F:NLog.Targets.FileTarget.InitializedFilesCleanupPeriod">
            <summary>
            Default clean up period of the initilized files. When a file exceeds the clean up period is removed from the list.
            </summary>
            <remarks>Clean up period is defined in days.</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.InitializedFilesCounterMax">
            <summary>
            The maximum number of initialised files at any one time. Once this number is exceeded clean up procedures
            are initiated to reduce the number of initialised files.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveAboveSizeDisabled">
            <summary>
            This value disables file archiving based on the size. 
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.DirectorySeparatorChars">
            <summary>
            Cached directory separator char array to avoid memory allocation on each method call.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.InvalidFileNameChars">
            <summary>
            Cached invalid filenames char array to avoid memory allocation everytime Path.GetInvalidFileNameChars() is called.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.initializedFiles">
            <summary>
            Holds the initialised files each given time by the <see cref="T:NLog.Targets.FileTarget"/> instance. Against each file, the last write time is stored. 
            </summary>
            <remarks>Last write time is store in local time (no UTC).</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.appenderFactory">
            <summary>
            Factory used to create the file appenders in the <see cref="T:NLog.Targets.FileTarget"/> instance. 
            </summary>
            <remarks>File appenders are stored in an instance of <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache"/>.</remarks>
        </member>
        <member name="F:NLog.Targets.FileTarget.fileAppenderCache">
            <summary>
            List of the associated file appenders with the <see cref="T:NLog.Targets.FileTarget"/> instance.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.initializedFilesCounter">
            <summary>
            The number of initialised files at any one time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.maxArchiveFiles">
            <summary>
            The maximum number of archive files that should be kept.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousFileNames">
            <summary>
            It holds the file names of existing archives in order for the oldest archives to be removed when the list of
            filenames becomes too long.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.fileName">
            <summary>
            The filename as target
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.archiveFileName">
            <summary>
            The archive file name as target
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.cachedCleanedFileNamed">
            <summary>
            The filename if <see cref="P:NLog.Targets.FileTarget.FileName"/> is a fixed string
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousLogEventTimestamp">
            <summary>
            The date of the previous log event.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.previousLogFileName">
            <summary>
            The file name of the previous log event.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            Gets or sets the name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
            <docgen category='Output Options' order='1' />
        </member>
        <member name="P:NLog.Targets.FileTarget.CleanupFileName">
            <summary>
            Cleanup invalid values in a filename, e.g. slashes in a filename. If set to <c>true</c>, this can impact the performance of massive writes. 
            If set to <c>false</c>, nothing gets written when the filename is wrong.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they do not exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
            <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.maxLogFilenames">
            <summary>
            Gets or sets the maximum number of log filenames that should be stored as existing.
            </summary>
            <remarks>
            The bigger this number is the longer it will take to write each log record. The smaller the number is
            the higher the chance that the clean function will be run when no new files have been opened.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.LineEnding">
            <summary>
            Gets or sets the line ending mode.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
            <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
            <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
            <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            Gets or sets the file encoding.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.NetworkWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
            <remarks>
            This effectively prevents files from being kept open.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts" /> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p/>
            a random value between 0 and 10 milliseconds - 1st attempt<br/>
            a random value between 0 and 20 milliseconds - 2nd attempt<br/>
            a random value between 0 and 40 milliseconds - 3rd attempt<br/>
            a random value between 0 and 80 milliseconds - 4th attempt<br/>
            ...<p/>
            and so on.
            </example>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to archive old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            After archiving the old file, the current log file will be empty.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveDateFormat">
            <summary>
            Gets or sets a value specifying the date format to use when archiving files.
            </summary>
            <remarks>
            This option works only when the "ArchiveNumbering" parameter is set either to Date or DateAndSequence.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
            <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            
            Warning: combining this with <see cref="F:NLog.Targets.ArchiveNumberingMode.Date"/> isn't supported. We cannot create multiple archive files, if they should have the same name.
            Choose:  <see cref="F:NLog.Targets.ArchiveNumberingMode.DateAndSequence"/> 
            </summary>
            <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
            <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
            <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p>
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
            <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
            <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
            <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileCompressor">
            <summary>
            Used to compress log files during archiving.
            This may be used to provide your own implementation of a zip file compressor,
            on platforms other than .Net4.5.
            Defaults to ZipArchiveFileCompressor on .Net4.5 and to null otherwise.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableArchiveFileCompression">
            <summary>
            Gets or sets a value indicating whether to compress archive files into the zip archive format.
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ForceManaged">
            <summary>
            Gets or set a value indicating whether a managed file stream is forced, instead of used the native implementation.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.NewLineChars">
            <summary>
            Gets the characters that are appended after each line.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.RefreshArchiveFilePatternToWatch">
            <summary>
            Refresh the ArchiveFilePatternToWatch option of the <see cref="T:NLog.Internal.FileAppenders.FileAppenderCache" />. 
            The log file must be watched for archiving when multiple processes are writing to the same 
            open file.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
            <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
            <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
            <param name="cleanupThreshold">The cleanup threshold.</param>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes all pending file operations.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFileAppenderFactory">
            <summary>
            Returns the suitable appender factory ( <see cref="T:NLog.Internal.FileAppenders.IFileAppenderFactory"/>) to be used to generate the file
            appenders associated with the <see cref="T:NLog.Targets.FileTarget"/> instance.
            
            The type of the file appender factory returned depends on the values of various <see cref="T:NLog.Targets.FileTarget"/> properties.
            </summary>
            <returns><see cref="T:NLog.Internal.FileAppenders.IFileAppenderFactory"/> suitable for this instance.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeTarget">
            <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CloseTarget">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
            <param name="logEvents">An array of <see cref="T:NLog.Common.AsyncLogEventInfo"/> objects.</param>
            <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written to the file.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Array of bytes that are ready to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
            <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
            <param name="value">The byte array.</param>
            <returns>The modified byte array. The function can do the modification in-place.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceNumberPattern(System.String,System.Int32)">
            <summary>
            Replaces the numeric pattern i.e. {#} in a file name with the <paramref name="value"/> parameter value.
            </summary>
            <param name="pattern">File name which contains the numeric pattern.</param>
            <param name="value">Value which will replace the numeric pattern.</param>
            <returns>File name with the value of <paramref name="value"/> in the position of the numeric pattern.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ContainsFileNamePattern(System.String)">
             <summary>
             Determines if the file name as <see cref="T:System.String"/> contains a numeric pattern i.e. {#} in it.  
            
             Example: 
                 trace{#}.log        Contains the numeric pattern.
                 trace{###}.log      Contains the numeric pattern.
                 trace{#X#}.log      Contains the numeric pattern (See remarks).
                 trace.log           Does not contain the pattern.
             </summary>
             <remarks>Occasionally, this method can identify the existence of the {#} pattern incorrectly.</remarks>
             <param name="fileName">File name to be checked.</param>
             <returns><see langword="true"/> when the pattern is found; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.RollArchivesForward(System.String,System.String,System.Int32)">
            <summary>
            Archives the <paramref name="fileName"/> using a rolling style numbering (the most recent is always #0 then
            #1, ..., #N. When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete archives
            are deleted.
            </summary>
            <remarks>
            This method is called recursively. This is the reason the <paramref name="archiveNumber"/> is required.
            </remarks>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="archiveNumber">Value which will replace the numeric pattern.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.RollArchiveForward(System.String,System.String)">
            <summary>
            Moves the archive file to the specified file name.
            </summary>
            <param name="existingFileName">The archive file to move.</param>
            <param name="newFileName">The destination file name.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveBySequence(System.String,System.String)">
            <summary>
            Archives the <paramref name="fileName"/> using a sequence style numbering. The most recent archive has the
            highest number. When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete
            archives are deleted.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveFile(System.String,System.String)">
            <summary>
            Archives fileName to archiveFileName.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="archiveFileName">Name of the archive file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveByDateAndSequence(System.String,System.String,NLog.LogEventInfo)">
            <summary>
            <para>
            Archives the <paramref name="fileName"/> using a date and sequence style numbering. Archives will be stamped
            with the prior period (Year, Month, Day) datetime. The most recent archive has the highest number (in
            combination with the date).
            </para>
            <para>
            When the number of archive files exceed <see cref="P:MaxArchiveFiles"/> the obsolete archives are deleted.
            </para>
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.EnsureArchiveCount(System.Collections.Generic.List{System.String})">
            <summary>
            Deletes files among a given list, and stops as soon as the remaining files are fewer than the <see
            cref="P:FileTarget.MaxArchiveFiles"/> setting.
            </summary>
            <param name="oldArchiveFileNames">List of the file archives.</param>
            <remarks>
            Items are deleted in the same order as in <paramref name="oldArchiveFileNames"/>. No file is deleted if <see
            cref="P:FileTarget.MaxArchiveFiles"/> property is zero.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FindDateAndSequenceArchives(System.String,System.String,System.String,System.Int32,System.String,NLog.Targets.FileTarget.FileNameTemplate)">
            <summary>
            Searches a given directory for archives that comply with the current archive pattern.
            </summary>
            <returns>An enumeration of archive infos, ordered by their file creation date.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the collection of files in the specified directory which they match the <paramref name="fileNameMask"/>.
            </summary>
            <param name="directoryInfo">Directory to searched.</param>
            <param name="fileNameMask">Pattern which the files will be searched against.</param>
            <returns>List of files matching the pattern.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceFileNamePattern(System.String,System.String)">
            <summary>
            Replaces the string-based pattern i.e. {#} in a file name with the value passed in <paramref
            name="replacementValue"/> parameter.
            </summary>
            <param name="pattern">File name which contains the string-based pattern.</param>
            <param name="replacementValue">Value which will replace the string-based pattern.</param>
            <returns>
            File name with the value of <paramref name="replacementValue"/> in the position of the string-based pattern.
            </returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ArchiveByDate(System.String,System.String,NLog.LogEventInfo)">
            <summary>
            Archives the <paramref name="fileName"/> using a date style numbering. Archives will be stamped with the
            prior period (Year, Month, Day, Hour, Minute) datetime. When the number of archive files exceed <see
            cref="P:MaxArchiveFiles"/> the obsolete archives are deleted.
            </summary>
            <param name="fileName">File name to be archived.</param>
            <param name="pattern">File name template which contains the numeric pattern to be replaced.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DeleteOldDateArchives(System.String)">
            <summary>
            Deletes archive files in reverse chronological order until only the
            MaxArchiveFiles number of archive files remain.
            </summary>
            <param name="pattern">The pattern that archive filenames will match</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetArchiveDateFormatString(System.String)">
            <summary>
            Gets the correct formatting <see langword="String"/> to be used based on the value of <see
            cref="P:ArchiveEvery"/> for converting <see langword="DateTime"/> values which will be inserting into file
            names during archiving.
            
            This value will be computed only when a empty value or <see langword="null"/> is passed into <paramref name="defaultFormat"/>
            </summary>
            <param name="defaultFormat">Date format to used irrespectively of <see cref="P:ArchiveEvery"/> value.</param>
            <returns>Formatting <see langword="String"/> for dates.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DoAutoArchive(System.String,NLog.LogEventInfo)">
            <summary>
            Invokes the archiving process after determining when and which type of archiving is required.
            </summary>
            <param name="fileName">File name to be checked and archived.</param>
            <param name="eventInfo">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetArchiveFileNamePattern(System.String,NLog.LogEventInfo)">
            <summary>
            Gets the pattern that archive files will match
            </summary>
            <param name="fileName">Filename of the log file</param>
            <param name="eventInfo">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <returns>A string with a pattern that will match the archive filenames</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldDeleteOldArchives">
            <summary>
            Determine if old archive files should be deleted.
            </summary>
            <returns><see langword="true"/> when old archives should be deleted; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchive(System.String,NLog.LogEventInfo,System.Int32)">
            <summary>
            Indicates if the automatic archiving process should be executed.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="ev">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="upcomingWriteSize">The size in bytes of the next chunk of data to be written in the file.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchiveBasedOnFileSize(System.String,System.Int32)">
            <summary>
            Indicates if the automatic archiving process should be executed based on file size constrains.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="upcomingWriteSize">The size in bytes of the next chunk of data to be written in the file.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.ShouldAutoArchiveBasedOnTime(System.String,NLog.LogEventInfo)">
            <summary>
            Indicates if the automatic archiving process should be executed based on date/time constrains.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <returns><see langword="true"/> when archiving should be executed; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetHeaderBytes">
            <summary>
            The sequence of <see langword="byte"/> to be written for the file header.
            </summary>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFooterBytes">
            <summary>
            The sequence of <see langword="byte"/> to be written for the file footer.
            </summary>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>        
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteToFile(System.String,NLog.LogEventInfo,System.Byte[],System.Boolean)">
            <summary>
            Evaluates which parts of a file should be written (header, content, footer) based on various properties of
            <see cref="T:NLog.Targets.FileTarget"/> instance and writes them.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="bytes">Raw sequence of <see langword="byte"/> to be written into the content part of the file.</param>        
            <param name="justData">Indicates that only content section should be written in the file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeFile(System.String,NLog.LogEventInfo,System.Boolean)">
            <summary>
            Initialise a file to be used by the <see cref="T:NLog.Targets.FileTarget"/> instance. Based on the number of initialised
            files and the values of various instance properties clean up and/or archiving processes can be invoked.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
            <param name="justData">Indicates that only content section should be written in the file.</param>
            <returns><see langword="true"/> when file header should be written; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.UninitializeFile(System.String)">
            <summary>
            Writes the file footer and uninitialises the file in <see cref="T:NLog.Targets.FileTarget"/> instance internal structures.
            </summary>
            <param name="fileName">File name to close.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteFooter(System.String)">
            <summary>
            Writes the footer information to a file.
            </summary>
            <param name="fileName">The file path to write to.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ProcessOnStartup(System.String,NLog.LogEventInfo)">
            <summary>
            Invokes the archiving and clean up of older archive file based on the values of <see
            cref="P:NLog.Targets.FileTarget.ArchiveOldFileOnStartup"/> and <see
            cref="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup"/> properties respectively.
            </summary>
            <param name="fileName">File name to be written.</param>
            <param name="logEvent">Log event that the <see cref="T:NLog.Targets.FileTarget"/> instance is currently processing.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.ReplaceFileContent(System.String,System.Byte[],System.Boolean)">
            <summary>
            Creates the file specified in <paramref name="fileName"/> and writes the file content in each entirety i.e.
            Header, Content and Footer.
            </summary>
            <param name="fileName">The name of the file to be written.</param>
            <param name="bytes">Sequence of <see langword="byte"/> to be written in the content section of the file.</param>
            <param name="firstAttempt">First attempt to write?</param>
            <remarks>This method is used when the content of the log file is re-written on every write.</remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.WriteHeader(NLog.Internal.FileAppenders.BaseFileAppender)">
            <summary>
            Writes the header information to a file.
            </summary>
            <param name="appender">File appender associated with the file.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFileCharacteristics(System.String)">
            <summary>
            Returns the length of a specified file and the last time it has been written. File appender is queried before the file system.  
            </summary>
            <param name="filePath">File which the information are requested.</param>
            <returns>The file characteristics, if the file information was retrieved successfully, otherwise null.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetLayoutBytes(NLog.Layouts.Layout)">
            <summary>
            The sequence of <see langword="byte"/> to be written in a file after applying any formating and any
            transformations required from the <see cref="T:NLog.Layouts.Layout"/>.
            </summary>
            <param name="layout">The layout used to render output message.</param>
            <returns>Sequence of <see langword="byte"/> to be written.</returns>
            <remarks>Usually it is used to render the header and hooter of the files.</remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInvalidFileNameChars(System.String)">
            <summary>
            Replaces any invalid characters found in the <paramref name="fileName"/> with underscore i.e _ character.
            Invalid characters are defined by .NET framework and they returned by <see
            cref="M:System.IO.Path.GetInvalidFileNameChars"/> method.
            <para>Note: not implemented in Silverlight</para>
            </summary>
            <param name="fileName">The original file name which might contain invalid characters.</param>
            <returns>The cleaned up file name without any invalid characters.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.#ctor(NLog.Targets.FileTarget,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:NLog.Targets.FileTarget.DynamicFileArchive"/> class.
            </summary>
            <param name="fileTarget">The file target instance whose files to archive.</param>
            <param name="maxArchivedFiles">Maximum number of archive files to be kept.</param>
        </member>
        <member name="P:NLog.Targets.FileTarget.DynamicFileArchive.MaxArchiveFileToKeep">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.InitializeForArchiveFolderPath(System.String)">
            <summary>
            Adds the files in the specified path to the archive file queue.
            </summary>
            <param name="archiveFolderPath">The folder where the archive files are stored.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.Archive(System.String,System.String,System.Boolean)">
            <summary>
            Adds a file into archive.
            </summary>
            <param name="archiveFileName">File name of the archive</param>
            <param name="fileName">Original file name</param>
            <param name="createDirectory">Create a directory, if it does not exist</param>
            <returns><see langword="true"/> if the file has been moved successfully; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.AddToArchive(System.String,System.String,System.Boolean)">
            <summary>
            Archives the file, either by copying it to a new file system location or by compressing it, and add the file name into the list of archives.
            </summary>
            <param name="archiveFileName">Target file name.</param>
            <param name="fileName">Original file name.</param>
            <param name="createDirectory">Create a directory, if it does not exist.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.DeleteOldArchiveFiles">
            <summary>
            Remove old archive files when the files on the queue are more than the <see cref="P:MaxArchiveFilesToKeep"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.DynamicFileArchive.GetNextArchiveFileName(System.String)">
            <summary>
            Gets the file name for the next archive file by appending a number to the provided
            "base"-filename.
            
            Example: 
                Original Filename   trace.log
                Target Filename     trace.15.log
            </summary>          
            <param name="fileName">Original file name.</param>
            <returns>File name suitable for archiving</returns>
        </member>
        <member name="F:NLog.Targets.FileTarget.FileNameTemplate.PatternStartCharacters">
            <summary>
            Characters determining the start of the <see cref="P:FileNameTemplate.Pattern"/>.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.FileNameTemplate.PatternEndCharacters">
            <summary>
            Characters determining the end of the <see cref="P:FileNameTemplate.Pattern"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.Template">
            <summary>
            File name which is used as template for matching and replacements. 
            It is expected to contain a pattern to match.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.BeginAt">
            <summary>
            The begging position of the <see cref="P:FileNameTemplate.Pattern"/> 
            within the <see cref="P:FileNameTemplate.Template"/>. -1 is returned 
            when no pattern can be found.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileNameTemplate.EndAt">
            <summary>
            The ending position of the <see cref="P:FileNameTemplate.Pattern"/> 
            within the <see cref="P:FileNameTemplate.Template"/>. -1 is returned 
            when no pattern can be found.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.FileNameTemplate.ReplacePattern(System.String)">
            <summary>
            Replace the pattern with the specified String.
            </summary>
            <param name="replacementValue"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Targets.IFileCompressor">
            <summary>
            <see cref="T:NLog.Targets.FileTarget"/> may be configured to compress archived files in a custom way
            by setting <see cref="P:NLog.Targets.FileTarget.FileCompressor"/> before logging your first event.
            </summary>
        </member>
        <member name="M:NLog.Targets.IFileCompressor.CompressFile(System.String,System.String)">
            <summary>
            Create archiveFileName by compressing fileName.
            </summary>
            <param name="fileName">Absolute path to the log file to compress.</param>
            <param name="archiveFileName">Absolute path to the compressed archive file to create.</param>
        </member>
        <member name="T:NLog.Targets.LineEndingMode">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.Default">
            <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CRLF">
            <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CR">
            <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.LF">
            <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.None">
            <summary>
            Do not insert any line ending.
            </summary>
        </member>
        <member name="P:NLog.Targets.LineEndingMode.Name">
            <summary>
            Gets the name of the LineEndingMode instance.
            </summary>
        </member>
        <member name="P:NLog.Targets.LineEndingMode.NewLineCharacters">
            <summary>
            Gets the new line characters (value) of the LineEndingMode instance.  
            </summary>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="name">The mode name.</param>
            <param name="newLineCharacters">The new line characters to be used.</param>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.FromString(System.String)">
            <summary>
             Returns the <see cref="T:NLog.Targets.LineEndingMode"/> that corresponds to the supplied <paramref name="name"/>.
            </summary>
            <param name="name">
             The textual representation of the line ending mode, such as CRLF, LF, Default etc.
             Name is not case sensitive.
            </param>
            <returns>The <see cref="T:NLog.Targets.LineEndingMode"/> value, that corresponds to the <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">There is no line ending mode with the specified name.</exception>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.op_Equality(NLog.Targets.LineEndingMode,NLog.Targets.LineEndingMode)">
            <summary>
            Compares two <see cref="T:NLog.Targets.LineEndingMode"/> objects and returns a 
            value indicating whether the first one is equal to the second one.
            </summary>
            <param name="mode1">The first level.</param>
            <param name="mode2">The second level.</param>
            <returns>The value of <c>mode1.NewLineCharacters == mode2.NewLineCharacters</c>.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.op_Inequality(NLog.Targets.LineEndingMode,NLog.Targets.LineEndingMode)">
            <summary>
            Compares two <see cref="T:NLog.Targets.LineEndingMode"/> objects and returns a 
            value indicating whether the first one is not equal to the second one.
            </summary>
            <param name="mode1">The first mode</param>
            <param name="mode2">The second mode</param>
            <returns>The value of <c>mode1.NewLineCharacters != mode2.NewLineCharacters</c>.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with 
            this instance.</param>
            <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object"/> 
            is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="T:NLog.Targets.LineEndingMode.LineEndingModeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:NLog.Targets.LineEndingMode"/> objects to and from other representations.
            </summary>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.LineEndingModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:NLog.Targets.LineEndingMode.LineEndingModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
            <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/LogReceiverService-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
            <value>The endpoint address.</value>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>The client ID.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
            <summary>
            Gets the list of parameters.
            </summary>
            <value>The parameters.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.IncludeEventProperties">
            <summary>
            Gets or sets a value indicating whether to include per-event properties in the payload sent to the server.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
            <summary>
            Called when log events are being sent (test hook).
            </summary>
            <param name="events">The events.</param>
            <param name="asyncContinuations">The async continuations.</param>
            <returns>True if events should be sent, false to stop processing them.</returns>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.MailTarget">
            <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Mail-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
            <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
            <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
            <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpSection">
            <summary>
            Gets the mailSettings/smtp configuration from app.config in cases when we need those configuration.
            E.g when UseSystemNetMailSettings is enabled and we need to read the From attribute from system.net/mailSettings/smtp
            </summary>
            <remarks>Internal for mocking</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.MailTarget.From">
            <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
            <docgen category='Message Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.To">
            <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.CC">
            <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Bcc">
            <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.AddNewLines">
            <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
            <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
            <docgen category='Layout Options' order='99' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
            <docgen category='Message Options' order='5' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Body">
            <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
            <remarks>Alias for the <c>Layout</c> property.</remarks>
            <docgen category='Message Options' order='6' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Encoding">
            <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
            <docgen category='Layout Options' order='20' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Html">
            <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
            <docgen category='Layout Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpServer">
            <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
            <docgen category='SMTP Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
            <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
            <docgen category='SMTP Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpUserName">
            <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPassword">
            <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.EnableSsl">
            <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
            <docgen category='SMTP Options' order='14' />.
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPort">
            <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
            <docgen category='SMTP Options' order='15' />
        </member>
        <member name="P:NLog.Targets.MailTarget.UseSystemNetMailSettings">
            <summary>
            Gets or sets a value indicating whether the default Settings from System.Net.MailSettings should be used.
            </summary>
            <docgen category='SMTP Options' order='16' />
        </member>
        <member name="P:NLog.Targets.MailTarget.DeliveryMethod">
            <summary>
            Specifies how outgoing email messages will be handled.
            </summary>
            <docgen category='SMTP Options' order='18' />
        </member>
        <member name="P:NLog.Targets.MailTarget.PickupDirectoryLocation">
            <summary>
            Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.
            </summary>
            <docgen category='SMTP Options' order='17' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Priority">
            <summary>
            Gets or sets the priority used for sending mails.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.ReplaceNewlineWithBrTagInHtml">
            <summary>
            Gets or sets a value indicating whether NewLine characters in the body should be replaced with <br/> tags.
            </summary>
            <remarks>Only happens when <see cref="P:NLog.Targets.MailTarget.Html"/> is set to true.</remarks>
        </member>
        <member name="P:NLog.Targets.MailTarget.Timeout">
            <summary>
            Gets or sets a value indicating the SMTP client timeout.
            </summary>
            <remarks>Warning: zero is not infinit waiting</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Renders an array logging events.
            </summary>
            <param name="logEvents">Array of logging events.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.MailTarget.ProcessSingleMailMessage(System.Collections.Generic.List{NLog.Common.AsyncLogEventInfo})">
            <summary>
            Create mail and send with SMTP
            </summary>
            <param name="events">event printed in the body of the event</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.CreateBodyBuffer(System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo},NLog.LogEventInfo,NLog.LogEventInfo)">
            <summary>
            Create buffer for body
            </summary>
            <param name="events">all events</param>
            <param name="firstEvent">first event for header</param>
            <param name="lastEvent">last event for footer</param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.ConfigureMailClient(NLog.LogEventInfo,NLog.Internal.ISmtpClient)">
            <summary>
            Set properties of <paramref name="client"/>
            </summary>
            <param name="lastEvent">last event for username/password</param>
            <param name="client">client to set properties on</param>
            <remarks>Configure not at <see cref="M:NLog.Targets.MailTarget.InitializeTarget"/>, as the properties could have layout renderers.</remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.ConvertDirectoryLocation(System.String)">
            <summary>
            Handle <paramref name="pickupDirectoryLocation"/> if it is a virtual directory.
            </summary>
            <param name="pickupDirectoryLocation"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.GetSmtpSettingsKey(NLog.LogEventInfo)">
             <summary>
             Create key for grouping. Needed for multiple events in one mailmessage
             </summary>
             <param name="logEvent">event for rendering layouts   </param>  
            <returns>string to group on</returns>
        </member>
        <member name="M:NLog.Targets.MailTarget.AppendLayout(System.Text.StringBuilder,NLog.LogEventInfo,NLog.Layouts.Layout)">
            <summary>
            Append rendered layout to the stringbuilder
            </summary>
            <param name="sb">append to this</param>
            <param name="logEvent">event for rendering <paramref name="layout"/></param>
            <param name="layout">append if not <c>null</c></param>
        </member>
        <member name="M:NLog.Targets.MailTarget.CreateMailMessage(NLog.LogEventInfo,System.String)">
            <summary>
            Create the mailmessage with the addresses, properties and body.
            </summary>
        </member>
        <member name="M:NLog.Targets.MailTarget.AddAddresses(System.Net.Mail.MailAddressCollection,NLog.Layouts.Layout,NLog.LogEventInfo)">
            <summary>
            Render  <paramref name="layout"/> and add the addresses to <paramref name="mailAddressCollection"/>
            </summary>
            <param name="mailAddressCollection">Addresses appended to this list</param>
            <param name="layout">layout with addresses, ; separated</param>
            <param name="logEvent">event for rendering the <paramref name="layout"/></param>
            <returns>added a address?</returns>
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Memory-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="layout">The layout to use for parameter value.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="layout">The layout.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            Gets or sets the layout that should be use to calculate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/MethodCall-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            Gets or sets the method name. The method must be public and static.
            
            Use the AssemblyQualifiedName , https://msdn.microsoft.com/en-us/library/system.type.assemblyqualifiedname(v=vs.110).aspx
            e.g. 
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends log messages over the network.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Network-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
            <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
            <img src="examples/targets/Screenshots/Network/Output.gif" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will be very slow. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            Gets or sets the network address.
            </summary>
            <remarks>
            The network address can be:
            <ul>
            <li>tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)</li>
            <li>tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)</li>
            <li>tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)</li>
            <li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>http://host:port/pageName - HTTP using POST verb</li>
            <li>https://host:port/pageName - HTTPS using POST verb</li>
            </ul>
            For SOAP-based webservice support over HTTP use WebService target.
            </remarks>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
            <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxConnections">
            <summary>
            Gets or sets the maximum current connections. 0 = no maximum.
            </summary>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnConnectionOverflow">
            <summary>
            Gets or sets the action that should be taken if the will be more connections than <see cref="P:NLog.Targets.NetworkTarget.MaxConnections"/>.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxQueueSize">
            <summary>
            Gets or sets the maximum queue size.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
            <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.TryRemove``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Try to remove. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
            <returns>removed something?</returns>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:NLog.Targets.NetworkTargetConnectionsOverflowAction">
            <summary>
            The action to be taken when there are more connections then the max.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.AllowNewConnnection">
            <summary>
            Just allow it.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.DiscardMessage">
            <summary>
            Discard the connection item.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetConnectionsOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.NetworkTargetOverflowAction">
            <summary>
            Action that should be taken if the message overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
            <summary>
            Report an error.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
            <summary>
            Split the message into smaller pieces.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
            <summary>
            Discard the entire message.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfo">
            <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
            <summary>
            Gets or sets viewer parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/NLogViewer-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary contents.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext"/> stack contents.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
            <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Layout">
            <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout"/> that is used to format log messages.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Null-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
            </example>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Targets.NullTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NullTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NullTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NullTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name"></param>
        </member>
        <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.OutputDebugStringTarget">
            <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/OutputDebugString-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.OutputDebugStringTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.OutputDebugStringTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.PerformanceCounterTarget">
            <summary>
            Increments specified performance counter on each write.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/PerformanceCounter-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
            </example>
            <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
            <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
            <summary>
            Gets or sets the name of the performance counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
            <summary>
            Gets or sets the performance counter instance name.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
            <summary>
            Gets or sets the counter help text.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
            <summary>
            Gets or sets the performance counter type.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.IncrementValue">
            <summary>
            The value by which to increment the counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increments the configured performance counter.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
            <summary>
            Ensures that the performance counter has been initialized.
            </summary>
            <returns>True if the performance counter is operational, false otherwise.</returns>
        </member>
        <member name="T:NLog.Targets.SmtpAuthenticationMode">
            <summary>
            SMTP authentication modes.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
            <summary>
            No authentication.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
            <summary>
            Basic - username and password.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
            <summary>
            NTLM Authentication.
            </summary>
        </member>
        <member name="T:NLog.Targets.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.Name">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <docgen category='General Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Target.SyncRoot">
            <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.IsInitialized">
            <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.GetAllLayouts">
            <summary>
            Get all used layouts in this target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)"/> on each volatile layout
            used by this target.
            </summary>
            <param name="logEvent">
            The log event.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the log to the target.
            </summary>
            <param name="logEvent">Log event to write.</param>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the array of log events.
            </summary>
            <param name="logEvents">The log events.</param>
        </member>
        <member name="M:NLog.Targets.Target.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Targets.Target.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            classes.
            </summary>
            <param name="logEvent">
            Logging event to be written out.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Log event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.MergeEventProperties(NLog.LogEventInfo)">
            <summary>
            Merges (copies) the event context properties from any event info object stored in
            parameters of the given event info object.
            </summary>
            <param name="logEvent">The event info object to perform the merge to.</param>
        </member>
        <member name="T:NLog.Targets.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
            <remarks>This attribute is not required when registering the target in the API.</remarks>
        </member>
        <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute" /> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
            <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsCompound">
            <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="T:NLog.Targets.TargetWithLayout">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayout.Layout">
            <summary>
            Gets or sets the layout used to format log messages.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <docgen category='Layout Options' order='3' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <docgen category='Layout Options' order='2' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
            <summary>
            Gets or sets the layout with header and footer.
            </summary>
            <value>The layout with header and footer.</value>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/Trace-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.TraceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TraceTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.TraceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TraceTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace"/> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error"/> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.WebServiceProtocol">
            <summary>
            Web service protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
            <summary>
            Use SOAP 1.1 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
            <summary>
            Use SOAP 1.2 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
            <summary>
            Use HTTP POST Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
            <summary>
            Use HTTP GET Protocol.
            </summary>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget">
            <summary>
            Calls the specified web service on each log message.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/WebService-target">Documentation on NLog Wiki</seealso>
            <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
            <p>The example web service that works with this example is shown below</p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
            <param name="name">Name of the target</param>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Url">
            <summary>
            Gets or sets the web service URL.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.MethodName">
            <summary>
            Gets or sets the Web service method name. Only used with Soap.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Namespace">
            <summary>
            Gets or sets the Web service namespace. Only used with Soap.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Protocol">
            <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.IncludeBOM">
            <summary>
            Should we include the BOM (Byte-order-mark) for UTF? Influences the <see cref="P:NLog.Targets.WebServiceTarget.Encoding"/> property.
            
            This will only work for UTF-8.
            </summary>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="parameters">Parameters to be passed.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.BuildWebServiceUrl(System.Object[])">
            <summary>
            Builds the URL to use when calling the web service for a message, depending on the WebServiceProtocol.
            </summary>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.PrepareSoapRequestPost(System.Net.WebRequest,System.Object[],System.String,System.String)">
            <summary>
            Helper for creating soap POST-XML request
            </summary>
            <param name="request"></param>
            <param name="parameterValues"></param>
            <param name="soapEnvelopeNamespace"></param>
            <param name="soapname"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.WriteStreamAndFixPreamble(System.IO.Stream,System.IO.Stream,System.Nullable{System.Boolean},System.Text.Encoding)">
            <summary>
            Write from input to output. Fix the UTF-8 bom
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="writeUtf8BOM"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:NLog.Targets.Win32FileAttributes">
            <summary>
            Win32 file attributes.
            </summary>
            <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReadOnly">
            <summary>
            Read-only file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
            <summary>
            Hidden file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.System">
            <summary>
            System file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Device">
            <summary>
            Device file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Normal">
            <summary>
            Normal file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
            <summary>
            Encrypted file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
            <summary>
            Asynchronous request queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
            <param name="requestLimit">Request limit.</param>
            <param name="overflowAction">The overflow action.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
            <summary>
            Gets or sets the request limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
            <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
            <summary>
            Gets the number of requests currently in the queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow"/>.
            </summary>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32)">
            <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
            <param name="count">Maximum number of items to be dequeued.</param>
            <returns>The array of log events.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
            <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AsyncWrapper-target">Documentation on NLog Wiki</seealso>
            <remarks>
            <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
            <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
            <code lang="XML">
            <![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="queueLimit">Maximum number of requests in the queue.</param>
            <param name="overflowAction">The action to be taken when the queue overflows.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
            <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
            <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
            <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
            <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
            <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
            <summary>
            Shuts down the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
            <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
            <summary>
            Stops the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
            <summary>
            The action to be taken when the queue overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
            <summary>
            Grow the queue.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
            <summary>
            Discard the overflowing item.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
            <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AutoFlushWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="name">Name of the target</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)"/> on it.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
            <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/BufferingWrapper-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="flushTimeout">The flush timeout.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
            <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
            <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
            <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes pending events in the buffer (if any).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
            <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
            <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
            <summary>
            Provides fallback-on-error.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/FallbackGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
            <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
            <docgen category='Fallback Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess"/> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets"/>.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRule">
            <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
            <param name="whenExistsExpression">Condition to be tested against all events.</param>
            <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
            <summary>
            Gets or sets the condition to be tested.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
            <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
            <summary>
            Filters log entries based on a condition.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/FilteringWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages not contains the string '1' to be ignored.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
            <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
            <summary>
            Impersonates another user for the duration of the write.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/ImpersonatingWrapper-target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
            <summary>
            Gets or sets username to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
            <summary>
            Gets or sets the user account password.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
            <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnType">
            <summary>
            Gets or sets the Logon Type.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnProvider">
            <summary>
            Gets or sets the type of the logon provider.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
            <summary>
            Gets or sets the required impersonation level.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
            <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
            <summary>
            Closes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvents">Log events.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
            <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext"/> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter" /> class.
            </summary>
            <param name="windowsImpersonationContext">The windows impersonation context.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
            <summary>
            Reverts the impersonation context.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.LogOnProviderType">
            <summary>
            Logon provider.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.LogOnProviderType.Default">
            <summary>
            Use the standard logon provider for the system.
            </summary>
            <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
            <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/PostFilteringWrapper-target">Documentation on NLog Wiki</seealso>
            <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
            <example>
            <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
            <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
            <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
            <docgen category='Filtering Rules' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
            <param name="logEvents">Array of log events to be post-filtered.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
            <summary>
            Sends log messages to a randomly selected target.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RandomizeGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
            <summary>
            Repeats each log event the specified number of times.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RepeatingWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each log message to be repeated 3 times.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
            <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
            <docgen category='Repeating Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)"/> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/> times.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
            <summary>
            Retries in case of write error.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RetryingWrapper-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
            <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
            <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
            <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/RoundRobinGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets"/> collection.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
            <summary>
            Anonymous Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
            <summary>
            Identification Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
            <summary>
            Impersonation Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
            <summary>
            Delegation Level.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityLogOnType">
            <summary>
            Logon type.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Interactive">
            <summary>
            Interactive Logon.
            </summary>
            <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Network">
            <summary>
            Network Logon.
            </summary>
            <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Batch">
            <summary>
            Batch Logon.
            </summary>
            <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Service">
            <summary>
            Logon as a Service.
            </summary>
            <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NetworkClearText">
            <summary>
            Network Clear Text Logon.
            </summary>
            <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NewCredentials">
            <summary>
            New Network Credentials.
            </summary>
            <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
            <summary>
            Writes log events to all targets.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/SplitGroup-target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
            <summary>
            Base class for targets wrap other (single) targets.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
            <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
            <docgen category='General Options' order='11' />
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Time.AccurateLocalTimeSource">
            <summary>
            Current local time retrieved directly from DateTime.Now.
            </summary>
        </member>
        <member name="P:NLog.Time.AccurateLocalTimeSource.Time">
            <summary>
            Gets current local time directly from DateTime.Now.
            </summary>
        </member>
        <member name="M:NLog.Time.AccurateLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to local time.
            </returns>
        </member>
        <member name="T:NLog.Time.AccurateUtcTimeSource">
            <summary>
            Current UTC time retrieved directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="P:NLog.Time.AccurateUtcTimeSource.Time">
            <summary>
            Gets current UTC time directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="M:NLog.Time.AccurateUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to UTC time.
            </returns>
        </member>
        <member name="T:NLog.Time.CachedTimeSource">
            <summary>
            Fast time source that updates current time only once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.CachedTimeSource.FreshTime">
            <summary>
            Gets raw uncached time from derived time source.
            </summary>
        </member>
        <member name="P:NLog.Time.CachedTimeSource.Time">
            <summary>
            Gets current time cached for one system tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="T:NLog.Time.FastLocalTimeSource">
            <summary>
            Fast local time source that is updated once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.FastLocalTimeSource.FreshTime">
            <summary>
            Gets uncached local time directly from DateTime.Now.
            </summary>
        </member>
        <member name="M:NLog.Time.FastLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to local time.
            </returns>
        </member>
        <member name="T:NLog.Time.FastUtcTimeSource">
            <summary>
            Fast UTC time source that is updated once per tick (15.6 milliseconds).
            </summary>
        </member>
        <member name="P:NLog.Time.FastUtcTimeSource.FreshTime">
            <summary>
            Gets uncached UTC time directly from DateTime.UtcNow.
            </summary>
        </member>
        <member name="M:NLog.Time.FastUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to UTC time.
            </returns>
        </member>
        <member name="T:NLog.Time.TimeSource">
            <summary>
            Defines source of current time.
            </summary>
        </member>
        <member name="P:NLog.Time.TimeSource.Time">
            <summary>
            Gets current time.
            </summary>
        </member>
        <member name="P:NLog.Time.TimeSource.Current">
            <summary>
            Gets or sets current global time source used in all log events.
            </summary>
            <remarks>
            Default time source is <see cref="T:NLog.Time.FastLocalTimeSource"/>.
            </remarks>
        </member>
        <member name="M:NLog.Time.TimeSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Time.TimeSource.FromSystemTime(System.DateTime)">
            <summary>
             Converts the specified system time to the same form as the time value originated from this time source.
            </summary>
            <param name="systemTime">The system originated time value to convert.</param>
            <returns>
             The value of <paramref name="systemTime"/> converted to the same form 
             as time values originated from this source.
            </returns>
            <remarks>
             <para>
              There are situations when NLog have to compare the time originated from TimeSource 
              to the time originated externally in the system.
              To be able to provide meaningful result of such comparisons the system time must be expressed in 
              the same form as TimeSource time.
            </para>
            <para>
              Examples:
               - If the TimeSource provides time values of local time, it should also convert the provided 
                 <paramref name="systemTime"/> to the local time.
               - If the TimeSource shifts or skews its time values, it should also apply 
                 the same transform to the given <paramref name="systemTime"/>.
            </para>
            </remarks>
        </member>
        <member name="T:NLog.Time.TimeSourceAttribute">
            <summary>
            Marks class as a time source and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Time.TimeSourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Time.TimeSourceAttribute" /> class.
            </summary>
            <param name="name">Name of the time source.</param>
        </member>
    </members>
</doc>
